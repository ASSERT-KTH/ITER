bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  encodeBase64);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  encodeBase64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  encodeBase64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  encodeBase64,  isChunked);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  encodeBase64,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  encodeBase64,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  encodeBase64);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  encodeBase64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  encodeBase64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  len);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  len);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  encodeBase64);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  encodeBase64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  encodeBase64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR,  encodeBase64);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR,  encodeBase64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR,  encodeBase64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS,  encodeBase64);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS,  encodeBase64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS,  encodeBase64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
9	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
10	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
11	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
12	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
13	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
14	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
15	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
16	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  not  a  statement	108	None	replace
17	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked)+  1;  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked)+  1;	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	108	None	replace
18	[BUG]  [BUGGY]  if(isChunked)  {  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  if(isChunked)  {  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	if(isChunked)  {  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  parent!=    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ';'  expected	148	None	replace
19	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_6BIT,    maxResultSize);    	non-compiled	[CE]  ';'  expected	124	None	replace
20	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_6BIT,    maxResultSize);    	non-compiled	[CE]  ';'  expected	124	None	replace
21	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_6BIT,    maxResultSize);    	non-compiled	[CE]  ';'  expected	124	None	replace
22	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_6BIT,    maxResultSize);    	non-compiled	[CE]  ';'  expected	124	None	replace
23	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_6BIT,    maxResultSize);    	non-compiled	[CE]  ';'  expected	124	None	replace
24	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  ';'  expected	2	None	replace
25	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LEN);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LEN);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LEN);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  ';'  expected	2	None	replace
27	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  if(isChunked)  {  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  if(isChunked)  {  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	if(isChunked)  {  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  parent!=    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ';'  expected	136	None	replace
29	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
32	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
33	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
34	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
35	[BUG]  [BUGGY]  long  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
36	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
37	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
38	[BUG]  [BUGGY]  threadException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  threadException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	threadException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
39	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
40	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
41	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
42	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
43	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
44	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
45	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  base64);  [CE]  unclosed  string  literal  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  base64);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  unclosed  string  literal	42	None	replace
46	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  len);  [CE]  unclosed  string  literal  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  unclosed  string  literal	105	None	replace
47	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [CE]  unclosed  string  literal  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  unclosed  string  literal	105	None	replace
48	[BUG]  [BUGGY]  result  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  unclosed  string  literal  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize,  len);	  result    =    encodeBase64(result,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  unclosed  string  literal	147	None	replace
49	[BUG]  [BUGGY]  result  =  encodeBase64(data,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(data,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(data,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(result,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
50	[BUG]  [BUGGY]  result  =  encodeBase64(isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(result,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
51	[BUG]  [BUGGY]  result  =  encodeBase64(len,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(len,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(len,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(result,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
52	[BUG]  [BUGGY]  result  =  encodeBase64(isChunked,  maxResultSize,  urlSafe);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(isChunked,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(isChunked,  maxResultSize,  urlSafe);	  result    =    encodeBase64(result,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
53	[BUG]  [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(result,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
54	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binary,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binary,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binary,  isChunked,  urlSafe,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
55	[BUG]  [BUGGY]  ByteBuffer  buffer  =  encodeBase64(b64,  isChunked,  urlSafe);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  ByteBuffer  buffer  =  encodeBase64(b64,  isChunked,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	ByteBuffer  buffer  =  encodeBase64(b64,  isChunked,  urlSafe);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
56	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
57	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
58	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	129	None	replace
59	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
60	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	129	None	replace
61	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	129	None	replace
62	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  ')'  expected	111	None	replace
63	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize));  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize));  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize));	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  ')'  expected	111	None	replace
64	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize));  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize));  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize));	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  ')'  expected	111	None	replace
65	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize),  buffer);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize),  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize),  buffer);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  ')'  expected	111	None	replace
66	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize));  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize));  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize));	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  ')'  expected	111	None	replace
67	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1));  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1));  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1));	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  ')'  expected	111	None	replace
68	[BUG]  [BUGGY]  if(isChunked)  {  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  if(isChunked)  {  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	if(isChunked)  {  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  parent    ==    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ')'  expected	160	None	replace
69	[BUG]  [BUGGY]  parent  ==  null  ||  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  parent  ==  null  ||  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	parent  ==  null  ||  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  parent    ==    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ')'  expected	160	None	replace
70	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	53	None	replace
71	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	53	None	replace
72	[BUG]  [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	53	None	replace
73	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	53	None	replace
74	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  len);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  ')'  expected	146	None	replace
75	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  ')'  expected	146	None	replace
76	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  len);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  ')'  expected	146	None	replace
77	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  MIME_CHUNK_SIZE);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  ')'  expected	146	None	replace
78	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LEN);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LEN);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LEN);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  ')'  expected	146	None	replace
79	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  MIME_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  MIME_CHUNK_SEPARATOR);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  ';'  expected	146	None	replace
80	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	6	None	replace
81	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	6	None	replace
82	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	6	None	replace
83	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	6	None	replace
84	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	6	None	replace
85	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8bitS);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8bitS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8bitS);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	6	None	replace
86	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")after  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")after  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")after  the  specified  maxium  size  of "  +	  Throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	158	None	replace
87	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +	  Throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	158	None	replace
88	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")before  the  specified  maxium  size  of "  +	  Throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	158	None	replace
89	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  len);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  len);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
90	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
91	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
92	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
93	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  MASK_6BITS,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  MASK_6BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  MASK_6BITS,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
94	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  0,  len);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  0,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	135	None	replace
95	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  0,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	135	None	replace
96	[BUG]  [BUGGY]  allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  allowInput(input,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
97	[BUG]  [BUGGY]  enableInput(input,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  enableInput(input,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	enableInput(input,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  allowInput(input,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
98	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	63	None	replace
99	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	63	None	replace
100	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	63	None	replace
101	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	63	None	replace
102	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	63	None	replace
103	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	106	None	replace
104	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	106	None	replace
105	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	106	None	replace
106	[BUG]  [BUGGY]  ByteBuffer  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  ByteBuffer  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	ByteBuffer  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	106	None	replace
107	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	1	None	replace
108	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	1	None	replace
109	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	1	None	replace
110	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  len);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  len);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	1	None	replace
111	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LENGTH_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LENGTH_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LENGTH_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	1	None	replace
112	[BUG]  [BUGGY]  byte  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	14	None	replace
113	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	14	None	replace
114	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	14	None	replace
115	[BUG]  [BUGGY]  byte  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  0);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	14	None	replace
116	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MASK_6BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
117	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MASK_6BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
118	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
119	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  class  or  interface  expected	117	None	replace
120	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
121	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
122	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
123	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
124	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
125	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ';'  expected	117	None	replace
126	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")after    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	35	None	replace
127	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")after    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	35	None	replace
128	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	23	None	replace
129	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  smaller  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  smaller  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  smaller  ( "  +  len  + ")than  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	23	None	replace
130	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")than  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")than  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	23	None	replace
131	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  len);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
132	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  len);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
133	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_8BITS);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  not  a  statement	16	None	replace
134	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_6BITS);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  not  a  statement	16	None	replace
135	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  not  a  statement	16	None	replace
136	[BUG]  [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  not  a  statement	78	None	replace
137	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  not  a  statement	78	None	replace
138	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	55	None	replace
139	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	56	None	replace
140	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	56	None	replace
141	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	56	None	replace
142	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
143	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  len);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  len);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	56	None	replace
144	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	56	None	replace
145	[BUG]  [BUGGY]  int  len  =  getEncodeLength(b64,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(b64,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(b64,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	56	None	replace
146	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
147	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
148	[BUG]  [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(base64,  isChunked,  urlSafe,  0,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
149	[BUG]  [BUGGY]  Result  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Result  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Result  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
150	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
151	[BUG]  [BUGGY]  result  =  encodeBase64(data,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(data,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(data,  isChunked,  urlSafe,  0,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
152	[BUG]  [BUGGY]  result  =  encodeBase64(basicData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(basicData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(basicData,  isChunked,  urlSafe,  0,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
153	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +   ")    than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	40	None	replace
154	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	71	None	replace
155	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  0,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	71	None	replace
156	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  len);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  len);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	71	None	replace
157	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	71	None	replace
158	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	17	None	replace
159	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	17	None	replace
160	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	17	None	replace
161	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	17	None	replace
162	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  -  1);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  -  1);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	17	None	replace
163	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  not  a  statement	125	None	replace
164	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  not  a  statement	125	None	replace
165	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  not  a  statement	125	None	replace
166	[BUG]  [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	60	None	replace
167	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	60	None	replace
168	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	15	None	replace
169	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	15	None	replace
170	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	15	None	replace
171	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	15	None	replace
172	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  len);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  len);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
173	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LEN);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LEN);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LEN);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
174	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  MASK_8BITS);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
175	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LENGTH_CHUNK_SIZE);  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LENGTH_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LENGTH_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
176	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  not  a  statement	3	None	replace
177	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  not  a  statement	3	None	replace
178	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIN_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIN_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	156	None	replace
179	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIN_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIN_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	156	None	replace
180	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
181	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	156	None	replace
182	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	156	None	replace
183	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  len);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	156	None	replace
184	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	33	None	replace
185	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE);    	non-compiled	[CE]  not  a  statement	65	None	replace
186	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE);    	non-compiled	[CE]  not  a  statement	65	None	replace
187	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE);    	non-compiled	[CE]  not  a  statement	65	None	replace
188	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  buffer,  maxResultSize);  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  buffer,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  buffer,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE);    	non-compiled	[CE]  not  a  statement	65	None	replace
189	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  2);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	109	None	replace
190	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	109	None	replace
191	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	109	None	replace
192	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	109	None	replace
193	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	109	None	replace
194	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	109	None	replace
195	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_SIZE);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_SIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  not  a  statement	45	None	replace
196	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MIME_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MIME_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  not  a  statement	45	None	replace
197	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MASK_6BITS);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
198	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
200	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_LENGTH);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_LENGTH);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_LENGTH);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
201	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6BITSIZE,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6BITSIZE,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6BITSIZE,  DEFAULT_BUFFER_RESIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
202	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
203	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
204	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  -  1);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  -  1);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
205	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
206	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
207	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
208	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
209	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
210	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
211	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
212	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  LEN);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  LEN);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  LEN);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
213	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
214	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
215	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
216	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  LEN_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  LEN_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  LEN_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
217	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  len);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  len);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
218	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
219	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
220	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  len);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  len);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
221	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
222	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
223	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
224	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MAX_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MAX_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  MAX_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MAX_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MAX_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  MAX_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  MIME_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
229	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
230	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
231	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
232	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  Len);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  Len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  Len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
233	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LONG);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LONG);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LONG);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
234	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
235	[BUG]  [BUGGY]  System.arraycopy(b64,  0,  binaryData,  0,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(b64,  0,  binaryData,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(b64,  0,  binaryData,  0,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
236	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  0,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	95	None	replace
237	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binData,  0,  len);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binData,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binData,  0,  len);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  urlSafe);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  urlSafe);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  buffer.length);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  buffer.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  buffer.length);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	95	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binData,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binData,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binData,  0,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	95	None	replace
241	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	32	None	replace
242	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	32	None	replace
243	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	32	None	replace
244	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  len);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  ';'  expected	85	None	replace
245	[BUG]  [BUGGY]  Result  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Result  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Result  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  ';'  expected	85	None	replace
246	[BUG]  [BUGGY]  result  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
247	[BUG]  [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  len);  [CE]  'else'  without  'if'  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(base64,  isChunked,  urlSafe,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  'else'  without  'if'	85	None	replace
248	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	161	None	replace
249	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	161	None	replace
250	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	161	None	replace
251	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	161	None	replace
252	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	161	None	replace
253	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	161	None	replace
254	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  PEM_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  PEM_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  PEM_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	4	None	replace
255	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  PEM_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  PEM_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  PEM_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	4	None	replace
256	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	4	None	replace
257	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  len);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
258	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  ';'  expected	30	None	replace
259	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  len);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  len);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  ';'  expected	30	None	replace
260	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  ';'  expected	30	None	replace
261	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  len);	  result    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	87	None	replace
262	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  1);	  result    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	87	None	replace
263	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);	  result    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	87	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  isChunked);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	96	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  isChunked);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	96	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  isChunked,  urlSafe);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  isChunked,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  isChunked,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	96	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  isChunked);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	96	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe,  isChunked);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
269	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
270	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  MIME_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  MIME_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  ';'  expected	21	None	replace
271	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  ';'  expected	21	None	replace
272	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
273	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  MIME_CHUNK_SEPARATOR,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  MIME_CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  MIME_CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
274	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
275	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);  [CE]  <identifier>  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
276	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
277	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
278	[BUG]  [BUGGY]  ByteBuffer  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  ByteBuffer  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	ByteBuffer  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
279	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  1);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  1);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
280	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  0);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
281	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
282	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  2);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  2);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
283	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE,  0);  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  ';'  expected	12	None	replace
284	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  0);  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  ';'  expected	12	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  buffer.length);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  buffer.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  buffer.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
286	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  binaryData.length);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  binaryData.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  binaryData.length);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  binaryData.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
288	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  binaryData.length);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  binaryData.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
289	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS,  maxResultSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
290	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  [CE]  <identifier>  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +       ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  <identifier>  expected	83	None	replace
291	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  len);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  0,  len);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	126	None	replace
292	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  0,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	126	None	replace
293	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  maxResultSize);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	126	None	replace
294	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  maxResultSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	126	None	replace
295	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  0,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	126	None	replace
296	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  ';'  expected	75	None	replace
297	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	104	None	replace
298	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	104	None	replace
299	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	104	None	replace
300	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
301	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  len);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  len);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
302	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
303	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
304	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
305	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
306	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  maxResultSize);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	163	None	replace
307	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	163	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	163	None	replace
309	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  MIME_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	163	None	replace
310	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  'else'  without  'if'  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	163	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	163	None	replace
312	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
313	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
314	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  'else'  without  'if'	57	None	replace
315	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	57	None	replace
316	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LONG);  [CE]  <identifier>  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LONG);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LONG);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
317	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  ';'  expected	133	None	replace
318	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  DEFAULT_BUFFER_RESIZE);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  ';'  expected	133	None	replace
319	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  LONG,  MIME_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  LONG,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  LONG,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  ';'  expected	133	None	replace
320	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  MASK_8BITS);  [CE]  <identifier>  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
321	[BUG]  [BUGGY]  allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  <identifier>  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  allowInput(b64,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
322	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  <identifier>  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
323	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  base64);  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  base64);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
324	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [CE]  <identifier>  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
325	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [CE]  <identifier>  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
326	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [CE]  <identifier>  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
327	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);  [CE]  'else'  without  'if'  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
328	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  2;  [CE]  'else'  without  'if'  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  2;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  2;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
329	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  4;  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  4;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  4;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
330	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)/  1;  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)/  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)/  1;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
331	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  3;  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  3;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  3;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
332	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  6;  [CE]  'else'  without  'if'  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  6;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  6;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
333	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1L;  [CE]  'else'  without  'if'  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1L;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1L;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
334	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  5;  [CE]  'else'  without  'if'  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  5;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  5;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
335	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)-  1;  [CE]  'else'  without  'if'  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)-  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)-  1;	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize)+    1;    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
336	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [CE]  'else'  without  'if'  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
337	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer.length);  [CE]  'else'  without  'if'  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer.length);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
338	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  buffer);  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  buffer);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
339	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HORIZONTAL);  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HORIZONTAL);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HORIZONTAL);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
340	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HOUR_SIZE);  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HOUR_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HOUR_SIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
341	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_RANGE_ENCODE_TABLE);  [CE]  'else'  without  'if'  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_RANGE_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_RANGE_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
342	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6);  [CE]  'else'  without  'if'  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
343	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6);  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
344	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	10	None	replace
345	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
346	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  true,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  true,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  true,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
347	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  len);  [CE]  'else'  without  'if'  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
348	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  false,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  false,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  false,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
349	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize,  len);  [CE]  'else'  without  'if'  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
350	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize,  urlSafe);  [CE]  'else'  without  'if'  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize,  urlSafe);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
351	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MIME_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  MIME_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
353	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MIME_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  MIME_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
354	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_8BITS);  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_8BITS);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
355	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
356	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
357	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  'else'  without  'if'  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  MASK_8BITS);	  System.arraycopy(binaryData,    0,    buffer,    len,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
358	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +       ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  'else'  without  'if'	140	None	replace
359	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
360	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
361	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
362	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
363	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
364	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  MIME_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  0,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
365	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
366	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  urlSafe);  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  urlSafe);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
367	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
368	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
369	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  isChunked);  [CE]  'else'  without  'if'  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
370	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
371	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked,  urlSafe);  [CE]  'else'  without  'if'  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked,  urlSafe);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
372	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
373	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
374	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
375	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  base64);  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  base64);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
376	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
377	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64.length);  [CE]  illegal  start  of  type  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64.length);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
378	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64,  isChunked);  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64,  isChunked);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
379	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +       ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
380	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
381	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
382	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")>  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")>  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")>  the  specified  maxium  size  of "  +  maxResultSize);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
383	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
384	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
385	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
386	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
387	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
388	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  'else'  without  'if'  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  LONG_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
389	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	36	None	replace
390	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	36	None	replace
391	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
392	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  len);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  len);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
393	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  urlSafe);  [CE]  'else'  without  'if'  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    urlSafe);    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
394	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  CHUNK_SEPARATOR,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    urlSafe);    	non-compiled	[CE]  orphaned  case	98	None	replace
395	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  CHUNK_SEPARATOR);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    urlSafe);    	non-compiled	[CE]  orphaned  case	98	None	replace
396	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  isChunked);  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  isChunked);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
397	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MIME_CHUNK_SIZE);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MIME_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
398	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  urlSafe);  [CE]  'else'  without  'if'  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  urlSafe);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
399	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MASK_6BITS);  [CE]  'else'  without  'if'  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MASK_6BITS);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
400	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  urlSafe);  [CE]  'else'  without  'if'  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  urlSafe);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
401	[BUG]  [BUGGY]  Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  Parchet.IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
402	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [CE]  'else'  without  'if'  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    1);    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
403	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  1);  [CE]  'else'  without  'if'  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  1);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    1);    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
404	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    1);    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
405	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);  [CE]  'else'  without  'if'  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
406	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  urlSafe);  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  urlSafe);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
407	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  urlSafe);  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
408	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [CE]  orphaned  case  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	48	None	replace
409	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [CE]  orphaned  case  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	48	None	replace
410	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [CE]  'else'  without  'if'  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
411	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [CE]  'else'  without  'if'  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
412	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);  [CE]  orphaned  case  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	48	None	replace
413	[BUG]  [BUGGY]  allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  orphaned  case  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  allowInput(b64,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  orphaned  case	80	None	replace
414	[BUG]  [BUGGY]  if(isChunked)  {  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  orphaned  case  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  if(isChunked)  {  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	if(isChunked)  {  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  allowInput(b64,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  orphaned  case	80	None	replace
415	[BUG]  [BUGGY]  if(isChunked)  {  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  orphaned  case  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  if(isChunked)  {  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	if(isChunked)  {  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	  parent    ==    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  orphaned  case	144	None	replace
416	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  len);  [CE]  orphaned  case  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  orphaned  case	130	None	replace
417	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LEN);  [CE]  orphaned  case  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LEN);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LEN);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  orphaned  case	130	None	replace
418	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  len);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize  +  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  orphaned  case	130	None	replace
419	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  orphaned  case  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  orphaned  case	157	None	replace
420	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  HUNTARD_ENCODE_TABLE);  [CE]  orphaned  case  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  HUNTARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  HUNTARD_ENCODE_TABLE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  orphaned  case	157	None	replace
421	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  len);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  orphaned  case	157	None	replace
422	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  maxResultSize);  [CE]  orphaned  case  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  orphaned  case	157	None	replace
423	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  STANDARD_ENCODE_TABLE);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  STANDARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  STANDARD_ENCODE_TABLE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  orphaned  case	157	None	replace
424	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  urlSafe);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  orphaned  case	102	None	replace
425	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  len,  urlSafe);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  len,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  offset,  len,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  orphaned  case	102	None	replace
426	[BUG]  [BUGGY]  System.arraycopy(b64,  0,  binaryData,  len,  urlSafe);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(b64,  0,  binaryData,  len,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(b64,  0,  binaryData,  len,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  orphaned  case	102	None	replace
427	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  urlSafe,  len,  buffer);  [CE]  orphaned  case  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  urlSafe,  len,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  urlSafe,  len,  buffer);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  orphaned  case	102	None	replace
428	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);  [CE]  orphaned  case  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  orphaned  case	9	None	replace
429	[BUG]  [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Integer  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  orphaned  case	9	None	replace
430	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  orphaned  case	88	None	replace
431	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);  [CE]  orphaned  case  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  orphaned  case	88	None	replace
432	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  orphaned  case	88	None	replace
433	[BUG]  [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize,  isChunked);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  orphaned  case	88	None	replace
434	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
435	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  orphaned  case	88	None	replace
436	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  1,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  1,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  1,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
437	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  offset,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
438	[BUG]  [BUGGY]  System.arraycopy(b64,  0,  binaryData,  len,  maxResultSize);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(b64,  0,  binaryData,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(b64,  0,  binaryData,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    len,    maxResultSize);    	non-compiled	[CE]  orphaned  case	97	None	replace
439	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
440	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
441	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
442	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
443	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
444	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
445	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  buffer);  [CE]  illegal  start  of  type  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked,  buffer);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
446	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
447	[BUG]  [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
448	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
449	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
450	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	159	None	replace
451	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	159	None	replace
452	[BUG]  [BUGGY]  long  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  orphaned  case  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	159	None	replace
453	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  orphaned  case  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	159	None	replace
454	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  orphaned  case  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	159	None	replace
455	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  orphaned  case  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  0);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	159	None	replace
456	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  orphaned  case  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  orphaned  case	82	None	replace
457	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	82	None	replace
458	[BUG]  [BUGGY]  Throwables.warning( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.warning( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.warning( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	82	None	replace
459	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ';'  expected	141	None	replace
460	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
461	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  orphaned  case	141	None	replace
462	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  orphaned  case  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  orphaned  case	141	None	replace
463	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [CE]  orphaned  case  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  orphaned  case	141	None	replace
464	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  orphaned  case  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  orphaned  case	141	None	replace
465	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);  [CE]  orphaned  case  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  orphaned  case	141	None	replace
466	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	107	None	replace
467	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	107	None	replace
468	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  minResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	107	None	replace
469	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    len);    	non-compiled	[CE]  orphaned  case	31	None	replace
470	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  len);  [CE]  orphaned  case  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    len);    	non-compiled	[CE]  orphaned  case	31	None	replace
471	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  len);  [CE]  orphaned  case  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    len);    	non-compiled	[CE]  orphaned  case	31	None	replace
472	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	90	None	replace
473	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  minResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	90	None	replace
474	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  orphaned  case	90	None	replace
475	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
476	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  orphaned  case  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	150	None	replace
477	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [CE]  orphaned  case  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	150	None	replace
478	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  orphaned  case  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	150	None	replace
479	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	150	None	replace
480	[BUG]  [BUGGY]  Base64  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  orphaned  case  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Base64  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Base64  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	150	None	replace
481	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	150	None	replace
482	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6_RESIZE,  DEFAULT_CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6_RESIZE,  DEFAULT_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  MASK_6_RESIZE,  DEFAULT_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  orphaned  case	44	None	replace
483	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  orphaned  case	44	None	replace
484	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MIME_CHUNK_SIZE);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MIME_CHUNK_SIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  orphaned  case	44	None	replace
485	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  orphaned  case	44	None	replace
486	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CASE_CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CASE_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CASE_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  orphaned  case	44	None	replace
487	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
488	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  Len);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  Len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  Len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
489	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  len);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  len);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  orphaned  case	5	None	replace
490	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS,  len);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS,  len);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
491	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
492	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  orphaned  case	118	None	replace
493	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  orphaned  case  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  orphaned  case	118	None	replace
494	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  len);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  orphaned  case	118	None	replace
495	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  orphaned  case	118	None	replace
496	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(data,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(data,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(data,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  orphaned  case	118	None	replace
497	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_8BITS,  maxResultSize);  [CE]  orphaned  case  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_8BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_8BITS,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	101	None	replace
498	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_6BITS);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_6BITS);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	101	None	replace
499	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_6BITS);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_6BITS);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_6BITS);    	non-compiled	[CE]  orphaned  case	101	None	replace
500	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_8BITS);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  MASK_8BITS);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_6BITS);    	non-compiled	[CE]  ';'  expected	101	None	replace
501	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
502	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
503	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
504	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	64	None	replace
505	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  len);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	64	None	replace
506	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	64	None	replace
507	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  0,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	64	None	replace
508	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	64	None	replace
509	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	69	None	replace
510	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	69	None	replace
511	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ';'  expected	72	None	replace
512	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer,  len);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ';'  expected	72	None	replace
513	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
514	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  buffer);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  buffer);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
515	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea);  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
516	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  ';'  expected	162	None	replace
517	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Thread.currentThread().getContextClassLoader().reportError( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  Thread.currentThread().getContextClassLoader().reportError(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ';'  expected	153	None	replace
518	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	120	None	replace
519	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	120	None	replace
520	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	120	None	replace
521	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	120	None	replace
522	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	120	None	replace
523	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	120	None	replace
524	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	120	None	replace
525	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	120	None	replace
526	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	152	None	replace
527	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	152	None	replace
528	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	152	None	replace
529	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  ')'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  0);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	152	None	replace
530	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  ')'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	152	None	replace
531	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	152	None	replace
532	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  3);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	145	None	replace
533	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
534	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  4);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	145	None	replace
535	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	145	None	replace
536	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  *  1);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	145	None	replace
537	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  ';'  expected	128	None	replace
538	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
539	[BUG]  [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
540	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_SEPARATOR);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
541	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len  +  1);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
542	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
543	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  0,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  0,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
544	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  1,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
545	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
546	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")that  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")that  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")that  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
547	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
548	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  len  + ")the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
549	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
550	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
551	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
552	[BUG]  [BUGGY]  Throwables.warning( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.warning( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.warning( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
553	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
554	[BUG]  [BUGGY]  byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize):  encodeBase64(binaryData,  isChunked,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize):  encodeBase64(binaryData,  isChunked,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize):  encodeBase64(binaryData,  isChunked,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	110	None	replace
555	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(base64,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
556	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
557	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  LONG_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  LONG_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  LONG_CHUNK_SIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
558	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  STANDARD_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  STANDARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize,  STANDARD_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	110	None	replace
559	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	77	None	replace
560	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	77	None	replace
561	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	77	None	replace
562	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ')'  expected	132	None	replace
563	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
564	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
565	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
566	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  DEFAULT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  DEFAULT_BUFFER_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
567	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
568	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
569	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
570	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
571	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
572	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")Over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")Over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")Over  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
573	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
574	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
575	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  MASK_6);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  MASK_6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  MASK_6);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
576	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
577	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  isChunked);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
578	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
579	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize,  isChunked);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
580	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);  [CE]  illegal  start  of  type  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked  +  1);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
581	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isEnabled);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isEnabled);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
582	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
583	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
584	[BUG]  [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(b64,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
585	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  isChunked);  [CE]  unclosed  string  literal  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
586	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  unclosed  string  literal  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);	  byte[]    BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  unclosed  string  literal	134	None	replace
587	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  unclosed  string  literal  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	  byte[]    BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  unclosed  string  literal	134	None	replace
588	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LEN  +  1);  [CE]  unclosed  string  literal  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LEN  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LEN  +  1);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LEN);    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
589	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  LEN,  MIME_CHUNK_SIZE);  [CE]  unclosed  string  literal  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  LEN,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  LEN,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LEN);    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
590	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  unclosed  string  literal  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize,  buffer);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
591	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer.length);  [CE]  unclosed  string  literal  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer.length);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
592	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer,  len);  [CE]  unclosed  string  literal  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  unclosed  string  literal	89	None	replace
593	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +  [CE]  unclosed  string  literal  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
594	[BUG]  [BUGGY]  Throwables.warning( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  unclosed  string  literal  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.warning( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.warning( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  unclosed  string  literal	94	None	replace
595	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64,  len);  [CE]  unclosed  string  literal  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64,  len);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
596	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  base64);  [CE]  unclosed  string  literal  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  base64);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
597	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	73	None	replace
598	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_7BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_7BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_7BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  ')'  expected	54	None	replace
599	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BIT);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BIT);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BIT);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  ')'  expected	54	None	replace
600	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	121	None	replace
601	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	121	None	replace
602	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	121	None	replace
603	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  class  or  interface  expected	121	None	replace
604	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  class  or  interface  expected	121	None	replace
605	[BUG]  [BUGGY]  Len  =  getEncode(CHUNK_SEPARATOR,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(CHUNK_SEPARATOR,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(CHUNK_SEPARATOR,  MIME_CHUNK_SIZE,  MIME_CHUNK_SIZE);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	121	None	replace
606	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  0);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE,  0);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    0);    	non-compiled	[CE]  ')'  expected	11	None	replace
607	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  0);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  0);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    0);    	non-compiled	[CE]  ')'  expected	11	None	replace
608	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0,  maxResultSize);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    0);    	non-compiled	[CE]  ')'  expected	11	None	replace
609	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_SIZE,  0);  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_SIZE,  0);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    0);    	non-compiled	[CE]  ')'  expected	11	None	replace
610	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  ')'  expected	17	None	replace
611	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  len,  maxResultSize);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  0,  len,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  ')'  expected	17	None	replace
612	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  ')'  expected	17	None	replace
613	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  ')'  expected	7	None	replace
614	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_SIZE,  MASK_8BITS);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_SIZE,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  ')'  expected	7	None	replace
615	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_7BITS,  maxResultSize);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_7BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_7BITS,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  ')'  expected	7	None	replace
616	[BUG]  [BUGGY]  enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  allowInput(b64,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
617	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);  [CE]  class  or  interface  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	26	None	replace
618	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);  [CE]  class  or  interface  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	26	None	replace
619	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")than  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	26	None	replace
620	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    len);    	non-compiled	[CE]  class  or  interface  expected	31	None	replace
621	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MASK_8BITS,  len);  [CE]  class  or  interface  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MASK_8BITS,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    len);    	non-compiled	[CE]  class  or  interface  expected	31	None	replace
622	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  class  or  interface  expected	70	None	replace
623	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64.length);  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64.length);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  class  or  interface  expected	73	None	replace
624	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  urlSafe,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    len,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	97	None	replace
625	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  maxResultSize);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    len,    maxResultSize);    	non-compiled	[CE]  not  a  statement	97	None	replace
626	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isEncod,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isEncod,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isEncod,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	118	None	replace
627	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  areChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	118	None	replace
628	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	118	None	replace
629	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_SIZE);  [CE]  class  or  interface  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
630	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  0);  [CE]  class  or  interface  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
631	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_7BITS,  0);  [CE]  class  or  interface  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_7BITS,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_7BITS,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
632	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  class  or  interface  expected	21	None	replace
633	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  class  or  interface  expected	21	None	replace
634	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_FACTOR,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_FACTOR,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_FACTOR,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  not  a  statement	21	None	replace
635	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  not  a  statement	21	None	replace
636	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  not  a  statement	21	None	replace
637	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  0);  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE,  CHUNK_SEPARATOR,  0);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  not  a  statement	21	None	replace
638	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  maxResultSize);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MASK_6BIT,    maxResultSize);    	non-compiled	[CE]  not  a  statement	124	None	replace
639	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	63	None	replace
640	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	63	None	replace
641	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;	  byte[]    binData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	63	None	replace
642	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_9BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_9BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_9BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  not  a  statement	54	None	replace
643	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  MASK_6BITS);  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  not  a  statement	54	None	replace
644	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  not  a  statement	54	None	replace
645	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_8BITS,  MASK_6BITS);  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_8BITS,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_8BITS,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  class  or  interface  expected	54	None	replace
646	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  class  or  interface  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  class  or  interface  expected	152	None	replace
647	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  class  or  interface  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  class  or  interface  expected	152	None	replace
648	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  class  or  interface  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  class  or  interface  expected	152	None	replace
649	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  not  a  statement	152	None	replace
650	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  0,  MASK_6BITS);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  0,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  0,  MASK_6BITS);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  not  a  statement	154	None	replace
651	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	50	None	replace
652	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	50	None	replace
653	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LAST_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LAST_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LAST_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	44	None	replace
654	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HIDE_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HIDE_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HIDE_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	44	None	replace
655	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CDATA_SEPARATOR);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CDATA_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CDATA_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	44	None	replace
656	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  not  a  statement	59	None	replace
657	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	117	None	replace
658	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +       ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	83	None	replace
659	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
660	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
661	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  MIME_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  0,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	6	None	replace
662	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ';'  expected	6	None	replace
663	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	15	None	replace
664	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  LAST_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  LAST_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  LAST_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	15	None	replace
665	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +	  Throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	158	None	replace
666	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_8BITS);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  MASK_8BITS);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_6BITS);    	non-compiled	[CE]  ';'  expected	101	None	replace
667	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  binaryData.length);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize,  binaryData.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
668	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  binaryData.length);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  binaryData.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
669	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  binaryData.length  -  1);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  binaryData.length  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  binaryData.length  -  1);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
670	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  binaryData.length);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE,  binaryData.length);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    binaryData.length);    	non-compiled	[CE]  ';'  expected	114	None	replace
671	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  urlSafe);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	64	None	replace
672	[BUG]  [BUGGY]  enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  allowInput(b64,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
673	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS  +  1);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS  +  1);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	29	None	replace
674	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_9BITS,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_9BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_9BITS,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	122	None	replace
675	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_7BITS,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_7BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_7BITS,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
676	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  isChunked);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	122	None	replace
677	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  isChunked);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	119	None	replace
678	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIN_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIN_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIN_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	119	None	replace
679	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	119	None	replace
680	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  SHORT_SIZE,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  SHORT_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  SHORT_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	119	None	replace
681	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")after  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")after  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")after  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")after    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	35	None	replace
682	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  ';'  expected	78	None	replace
683	[BUG]  [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  ';'  expected	78	None	replace
684	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	121	None	replace
685	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	121	None	replace
686	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LONG);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LONG);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LONG);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  not  a  statement	146	None	replace
687	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENGTH_SIZE);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENGTH_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENGTH_SIZE);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  not  a  statement	146	None	replace
688	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  buffer.length);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  buffer.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  buffer.length);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	69	None	replace
689	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  resultSize);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  resultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  resultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	69	None	replace
690	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	82	None	replace
691	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  0,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  0,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  0,  urlSafe,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	86	None	replace
692	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  not  a  statement	86	None	replace
693	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	33	None	replace
694	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	106	None	replace
695	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binarydata,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binarydata,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binarydata,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
696	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
697	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
698	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
699	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [CE]  class  or  interface  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  class  or  interface  expected	49	None	replace
700	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  class  or  interface  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_SEPARATOR,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  class  or  interface  expected	49	None	replace
701	[BUG]  [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	55	None	replace
702	[BUG]  [BUGGY]  Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	55	None	replace
703	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  maxResultSize);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  maxResultSize);	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
704	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIN_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIN_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
705	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  MIN_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  MIN_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
706	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIN_CHUNK_SIZE,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
707	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
708	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;	  BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
709	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
710	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
711	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
712	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of   "  +  len  +   ")  than  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  	81	None	replace
713	[BUG]  [BUGGY]  result  =  encodeBase64(bytes,  isChunked,  urlSafe,  maxResultSize);  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(bytes,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(bytes,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  	87	None	replace
714	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
715	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  4);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
716	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEADARD_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEADARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEADARD_ENCODE_TABLE);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
717	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataLength);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataLength);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataLength);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
718	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  data.length);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  data.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  data.length);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
719	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LONG);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LONG);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LONG);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
720	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENGTH_SIZE);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENGTH_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENGTH_SIZE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
721	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
722	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIN_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIN_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIN_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
723	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  SHORT_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  SHORT_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  SHORT_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
724	[BUG]  [BUGGY]  allowInput(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  allowInput(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  allowInput(input,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
725	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
726	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
727	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
728	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  urlSafe);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  urlSafe);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
729	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SIZE,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
730	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  0);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  0);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
731	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  0,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
732	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
733	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  B64.parseBinary(binaryData));  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  B64.parseBinary(binaryData));  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  B64.parseBinary(binaryData));	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
734	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  B64.256);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  B64.256);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  B64.256);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
735	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  len,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  len,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  0,  len,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
736	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
737	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
738	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LENGTH_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LENGTH_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  LENGTH_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
739	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_FACTOR);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_FACTOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
740	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_BASE64);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_BASE64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_BASE64);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
741	[BUG]  [BUGGY]  byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
742	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  arrayOctet);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
743	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize  +  1);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize  +  1);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
744	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
745	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_7BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_7BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_7BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
746	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
747	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_9BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_9BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_9BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
748	[BUG]  [BUGGY]  Result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
749	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
750	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
751	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
752	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  isChunked);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
753	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  urlSafe);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    MAX_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
754	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
755	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
756	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  urlSafe);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  urlSafe);	  castException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
757	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  cache);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
758	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
759	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  isChunked);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  isChunked);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
760	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  buffer,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  buffer,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  buffer,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
761	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  encodeBase64,  buffer,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  encodeBase64,  buffer,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  encodeBase64,  buffer,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
762	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  bytes,  buffer,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  bytes,  buffer,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  bytes,  buffer,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
763	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  b64,  buffer,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  b64,  buffer,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  b64,  buffer,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
764	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
765	[BUG]  [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
766	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  isChunked);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  not  a  statement	151	None	replace
767	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MASK_8BITS,  isChunked);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MASK_8BITS,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MASK_8BITS,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
768	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  urlSafe);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
769	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  urlSafe,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  urlSafe,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  urlSafe,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
770	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  urlSafe,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
771	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
772	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  encodeBase64,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  encodeBase64,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  encodeBase64,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
773	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  urlSafe,  len,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  urlSafe,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  urlSafe,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
774	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  len);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  len);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
775	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	155	None	replace
776	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MASK_8BITS,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MASK_8BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MASK_8BITS,  maxResultSize);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
777	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_BUFFER_RESIZE_FACTOR,  0);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_BUFFER_RESIZE_FACTOR,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_BUFFER_RESIZE_FACTOR,  0);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    0);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
778	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  5);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
779	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
780	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MASK_6BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
781	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_6BITS,  MASK_8BITS);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_6BITS,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_6BITS,  MASK_8BITS);	  int    len    =    getEncodeLength(binaryData,    MASK_6BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
782	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  encodeBase64,  len,  maxResultSize,  buffer);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  encodeBase64,  len,  maxResultSize,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  encodeBase64,  len,  maxResultSize,  buffer);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
783	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  len);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  encodeBase64,  len);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
784	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  32,  encodeBase64);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  32,  encodeBase64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  32,  encodeBase64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
785	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  base64);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  base64);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	65	None	replace
786	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataLength);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataLength);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataLength);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
787	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LONG);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LONG);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  LONG);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
788	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  data.length);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  data.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  data.length);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
789	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  SHORT_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  SHORT_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  SHORT_ENCODE_TABLE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
790	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  isChunked);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
791	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	  byte[]    BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
792	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	  byte[]    BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
793	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	  byte[]    BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
794	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8bitS);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8bitS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8bitS);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
795	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
796	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	120	None	replace
797	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  isChunked,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  isChunked,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  isChunked,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	120	None	replace
798	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SIZE);  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	137	None	replace
799	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	53	None	replace
800	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  ')'  expected	128	None	replace
801	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  0,  urlSafe,  maxResultSize);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  0,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  0,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ')'  expected	104	None	replace
802	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  resultSize);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  resultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  resultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ')'  expected	104	None	replace
803	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ')'  expected	104	None	replace
804	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  isChunked);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  isChunked);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	131	None	replace
805	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  isChunked,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  isChunked,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  isChunked,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  ')'  expected	20	None	replace
806	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  urlSafe,  CHUNK_SEPARATOR,  isChunked);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  urlSafe,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  urlSafe,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  ')'  expected	20	None	replace
807	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  urlSafe,  isChunked);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  urlSafe,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  urlSafe,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  ')'  expected	20	None	replace
808	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	91	None	replace
809	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	91	None	replace
810	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64  +  1);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64  +  1);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	91	None	replace
811	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  isChunked,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  isChunked,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  isChunked,  CHUNK_SEPARATOR,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  ')'  expected	139	None	replace
812	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ')'  expected	36	None	replace
813	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ')'  expected	36	None	replace
814	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  base64);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  base64);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    urlSafe);    	non-compiled	[CE]  ')'  expected	98	None	replace
815	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  buffer.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  buffer.length);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
816	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize  +  1);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ')'  expected	41	None	replace
817	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ')'  expected	24	None	replace
818	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ')'  expected	24	None	replace
819	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")from  the  specified  maxium  size  of "  +  maxResultSize  + ")to  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ')'  expected	24	None	replace
820	[BUG]  [BUGGY]  enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	enableInput(binaryData,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);	  allowInput(b64,    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
821	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [CE]  <identifier>  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
822	[BUG]  [BUGGY]  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	&&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  parent    ==    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
823	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ')'  expected	42	None	replace
824	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);  [CE]  <identifier>  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(basicData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
825	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [CE]  <identifier>  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
826	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);  [CE]  <identifier>  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
827	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  <identifier>  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
828	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	56	None	replace
829	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  bytes,  0,  maxResultSize);  [CE]  <identifier>  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  bytes,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  bytes,  0,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
830	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  buf.length);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  buf.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  buf.length);	  System.arraycopy(binaryData,    0,    binaryData,    0,    maxResultSize);    	non-compiled	[CE]  ')'  expected	95	None	replace
831	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LONG);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LONG);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  LONG);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  ')'  expected	133	None	replace
832	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG  +  1);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG  +  1);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  ')'  expected	133	None	replace
833	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG  +  maxResultSize);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG  +  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LONG);    	non-compiled	[CE]  ')'  expected	133	None	replace
834	[BUG]  [BUGGY]  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	&&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  parent    ==    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ')'  expected	144	None	replace
835	[BUG]  [BUGGY]  Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")  than  the  specified  maxium  size  of "  +  len);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")  than  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")  than  the  specified  maxium  size  of "  +  len);	  Parchet.IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  ')'  expected	39	None	replace
836	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  isChunked);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea,  isChunked);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  ')'  expected	74	None	replace
837	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isEnabled);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isEnabled);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isEnabled);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  ')'  expected	74	None	replace
838	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	93	None	replace
839	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);	  System.arraycopy(binaryData,    0,    buffer,    len,    MASK_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	163	None	replace
840	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_SIZE);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ')'  expected	141	None	replace
841	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  maxResultSize,  urlSafe);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  ')'  expected	66	None	replace
842	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ')'  expected	10	None	replace
843	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  not  a  statement	10	None	replace
844	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ')'  expected	10	None	replace
845	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  false,  maxResultSize);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  false,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  false,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  ')'  expected	67	None	replace
846	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ')'  expected	32	None	replace
847	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe);    	non-compiled	[CE]  ')'  expected	62	None	replace
848	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe);    	non-compiled	[CE]  ')'  expected	62	None	replace
849	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe);	  byte[]    binaryData    =    encodeBase64(b64,    isChunked,    urlSafe);    	non-compiled	[CE]  ')'  expected	62	None	replace
850	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MASK_6BITS);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ')'  expected	3	None	replace
851	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_SIZE);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_SIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ')'  expected	132	None	replace
852	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE  +  1);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE  +  1);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ')'  expected	132	None	replace
853	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE  +  len);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE  +  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ')'  expected	132	None	replace
854	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	34	None	replace
855	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  len);  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  0,  len);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  ')'  expected	16	None	replace
856	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  READARD_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  READARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  READARD_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ')'  expected	43	None	replace
857	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEAD_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ')'  expected	43	None	replace
858	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  dataArea);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ')'  expected	43	None	replace
859	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  isChunked);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ')'  expected	61	None	replace
860	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ')'  expected	14	None	replace
861	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  4);  [CE]  ')'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  4);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ')'  expected	14	None	replace
862	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  3);  [CE]  ')'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  3);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  3);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ')'  expected	14	None	replace
863	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  6);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  ')'  expected	145	None	replace
864	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SEPARATOR);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_SIZE,  MIME_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ')'  expected	3	None	replace
865	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  DEFAULT_BUFFER_SIZE);  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  DEFAULT_BUFFER_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  DEFAULT_BUFFER_SIZE);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    DEFAULT_BUFFER_SIZE);    	non-compiled	[CE]  ')'  expected	141	None	replace
866	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	46	None	replace
867	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HANDARD_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HANDARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HANDARD_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	46	None	replace
868	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  base64,  maxResultSize);  [CE]  ')'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  base64,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  base64,  maxResultSize);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	46	None	replace
869	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  ')'  expected	46	None	replace
870	[BUG]  [BUGGY]  result  =  encodeBase64(BASE64,  isChunked,  urlSafe,  maxResultSize);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(BASE64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(BASE64,  isChunked,  urlSafe,  maxResultSize);	  result    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ')'  expected	87	None	replace
871	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	22	None	replace
872	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  ')'  expected	12	None	replace
873	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MASK_8BITS,  0);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MASK_8BITS,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MASK_8BITS,  0);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    0);    	non-compiled	[CE]  ')'  expected	12	None	replace
874	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  len);  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  len);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  len);	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	94	None	replace
875	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  getEncodeLength(maxResultSize));  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  getEncodeLength(maxResultSize));  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  getEncodeLength(maxResultSize));	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	94	None	replace
876	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize);	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	94	None	replace
877	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    large,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ')'  expected	94	None	replace
878	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URLSafe,  maxResultSize);  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URLSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URLSafe,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    false,    maxResultSize);    	non-compiled	[CE]  ')'  expected	67	None	replace
879	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  isChunked);  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  isChunked);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  ')'  expected	88	None	replace
880	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	88	None	replace
881	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_FACTOR);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_FACTOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  ';'  expected	21	None	replace
882	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MAX_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  ';'  expected	21	None	replace
883	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  maxResultSize);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	4	None	replace
884	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  urlSafe);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    PEM_CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	4	None	replace
885	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	1	None	replace
886	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  ')'  expected	1	None	replace
887	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  base64);  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  base64);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  base64);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  ')'  expected	20	None	replace
888	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MAX_RESIZE_FACTOR,  CHUNK_SEPARATOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    isChunked);    	non-compiled	[CE]  class  or  interface  expected	20	None	replace
889	[BUG]  [BUGGY]  Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  class  or  interface  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	123	None	replace
890	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of   "  +  maximumResultSize  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of   "  +  maximumResultSize  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of   "  +  maximumResultSize  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	81	None	replace
891	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")over  the  specified  maxium  size  of   "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +       ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	140	None	replace
892	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ';'  expected	72	None	replace
893	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HANDARD_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HANDARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HANDARD_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
894	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEADARD_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEADARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HEADARD_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ';'  expected	72	None	replace
895	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  READARD_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  READARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  READARD_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  ';'  expected	72	None	replace
896	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  null);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  null);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	135	None	replace
897	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_6BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
898	[BUG]  [BUGGY]  boolean  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  boolean  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	boolean  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of   "  +  maxResultSize);  }	  parent    ==    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
899	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  USER_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  USER_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  USER_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	44	None	replace
900	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MAX_RESIZE_FACTOR,  CHUNK_SEPARATOR,  urlSafe);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  ';'  expected	149	None	replace
901	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    urlSafe);    	non-compiled	[CE]  ';'  expected	149	None	replace
902	[BUG]  [BUGGY]  BinaryData  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  ';'  expected	105	None	replace
903	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  0,  len);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  ';'  expected	104	None	replace
904	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  len);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR,  len);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    len);    	non-compiled	[CE]  ';'  expected	58	None	replace
905	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  case,  default,  or  '}'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  case,  default,  or  '}'  expected	18	None	replace
906	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_S  [CE]  case,  default,  or  '}'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_S  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_S	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  case,  default,  or  '}'  expected	18	None	replace
907	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_S  [CE]  case,  default,  or  '}'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_S  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_S	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  case,  default,  or  '}'  expected	18	None	replace
908	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [CE]  case,  default,  or  '}'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MIN_CHUNK_SEPARATOR);    	non-compiled	[CE]  case,  default,  or  '}'  expected	156	None	replace
909	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);  [CE]  case,  default,  or  '}'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  binaryData.length);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  case,  default,  or  '}'  expected	43	None	replace
910	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [CE]  case,  default,  or  '}'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  CHUNK_ENCODE_TABLE);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  case,  default,  or  '}'  expected	103	None	replace
911	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [CE]  case,  default,  or  '}'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  case,  default,  or  '}'  expected	103	None	replace
912	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [CE]  case,  default,  or  '}'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  2);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  case,  default,  or  '}'  expected	103	None	replace
913	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);  [CE]  case,  default,  or  '}'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  case,  default,  or  '}'  expected	103	None	replace
914	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len,  maxResultSize);  [CE]  case,  default,  or  '}'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    buffer);    	non-compiled	[CE]  case,  default,  or  '}'  expected	89	None	replace
915	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize  +  1);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	17	None	replace
916	[BUG]  [BUGGY]  byte  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  case,  default,  or  '}'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  0);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
917	[BUG]  [BUGGY]  byte  len  =  getEncodeBoolean(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  case,  default,  or  '}'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte  len  =  getEncodeBoolean(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeBoolean(binaryData,  MIME_CHUNK_SIZE,  0);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
918	[BUG]  [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  case,  default,  or  '}'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
919	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maximumResultSize  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  case,  default,  or  '}'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maximumResultSize  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maximumResultSize  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  case,  default,  or  '}'  expected	93	None	replace
920	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  len);  [CE]  case,  default,  or  '}'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  len);  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  len);	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  case,  default,  or  '}'  expected	93	None	replace
921	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [CE]  case,  default,  or  '}'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  case,  default,  or  '}'  expected	93	None	replace
922	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [CE]  case,  default,  or  '}'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  len);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	41	None	replace
923	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [CE]  case,  default,  or  '}'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  case,  default,  or  '}'  expected	51	None	replace
924	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  urlSafe,  len,  maxResultSize);  [CE]  case,  default,  or  '}'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  urlSafe,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  urlSafe,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	115	None	replace
925	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MASK_CHUNK_SIZE);  [CE]  case,  default,  or  '}'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MASK_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  MASK_CHUNK_SIZE);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	115	None	replace
926	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize  +  1);  [CE]  case,  default,  or  '}'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize  +  1);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	115	None	replace
927	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize  -  1);  [CE]  case,  default,  or  '}'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize  -  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize  -  1);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	115	None	replace
928	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  len,  maxResultSize);  [CE]  case,  default,  or  '}'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  len,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  offset,  len,  maxResultSize);	  System.arraycopy(binaryData,    0,    binaryData,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	115	None	replace
929	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS)+  1;  [CE]  case,  default,  or  '}'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS)+  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS)+  1;	  int    len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  case,  default,  or  '}'  expected	159	None	replace
930	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
931	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  LAST_CHUNK_SEPARATOR);  [CE]  case,  default,  or  '}'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  LAST_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  LAST_CHUNK_SEPARATOR);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	110	None	replace
932	[BUG]  [BUGGY]  byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize):  new  byte[len];  [CE]  case,  default,  or  '}'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize):  new  byte[len];  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  isChunked?  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize):  new  byte[len];	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  case,  default,  or  '}'  expected	110	None	replace
933	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [CE]  case,  default,  or  '}'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  len);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    len);    	non-compiled	[CE]  case,  default,  or  '}'  expected	85	None	replace
934	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	161	None	replace
935	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENA);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENA);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  LENA);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    len);    	non-compiled	[CE]  not  a  statement	146	None	replace
936	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_ENCODE_TABLE);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_ENCODE_TABLE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  orphaned  case	47	None	replace
937	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [CE]  orphaned  case  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);	  byte[]    BinaryData    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  orphaned  case	134	None	replace
938	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    0);    	non-compiled	[CE]  orphaned  case	11	None	replace
939	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  buffer);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  buffer);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  buffer);	  Len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	121	None	replace
940	[BUG]  [BUGGY]  t  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  t  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	t  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	138	None	replace
941	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  not  a  statement	129	None	replace
942	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MAX_CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MAX_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MAX_CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	57	None	replace
943	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  2);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  2);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  ';'  expected	100	None	replace
944	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  4);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  4);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    encodeBase64);    	non-compiled	[CE]  ';'  expected	100	None	replace
945	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR  +  1);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR  +  1);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	19	None	replace
946	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR,  isChunked);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	19	None	replace
947	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  HEADARD_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  HEADARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  HEADARD_ENCODE_TABLE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR,    DEFAULT_BUFFER_RESIZE_FACTOR);    	non-compiled	[CE]  ';'  expected	19	None	replace
948	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  isChunked);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  isChunked);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	108	None	replace
949	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  orphaned  case	126	None	replace
950	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  maxResultSize);  [CE]  orphaned  case  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MAX_CHUNK_SIZE,  maxResultSize);	  int    len    =    getEncodeLength(binaryData,    0,    maxResultSize);    	non-compiled	[CE]  orphaned  case	126	None	replace
951	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_8BITS);    	non-compiled	[CE]  orphaned  case	30	None	replace
952	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  1,  urlSafe);  [CE]  orphaned  case  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  1,  urlSafe);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  1,  urlSafe);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  orphaned  case	102	None	replace
953	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  len);  [CE]  orphaned  case  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  offset,  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  offset,  len);	  System.arraycopy(binaryData,    0,    buffer,    len,    urlSafe);    	non-compiled	[CE]  orphaned  case	102	None	replace
954	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIME_CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    maxResultSize,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  orphaned  case	125	None	replace
955	[BUG]  [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  orphaned  case  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);	  short    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  orphaned  case	13	None	replace
956	[BUG]  [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  orphaned  case  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	double  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  orphaned  case	52	None	replace
957	[BUG]  [BUGGY]  byte[]  len  =  isChunked?  new  Base64(urlSafe,  maxResultSize):  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  isChunked?  new  Base64(urlSafe,  maxResultSize):  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  isChunked?  new  Base64(urlSafe,  maxResultSize):  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	42	None	replace
958	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(base64,  isChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	42	None	replace
959	[BUG]  [BUGGY]  byte[]  len  =  isChunked?  new  Base64(urlSafe,  maxResultSize):  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  isChunked?  new  Base64(urlSafe,  maxResultSize):  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  isChunked?  new  Base64(urlSafe,  maxResultSize):  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    len    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	42	None	replace
960	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  2);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  2);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  2);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize));    	non-compiled	[CE]  class  or  interface  expected	111	None	replace
961	[BUG]  [BUGGY]  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  class  or  interface  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	&&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	  parent!=    null    &&    isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	148	None	replace
962	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8);  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8);	  Len    =    getEncodeLength(binaryData,    MASK_8BITS,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
963	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize  + ")that  the  specified  maxium  size  of "  +  len);  [CE]  class  or  interface  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize  + ")that  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize  + ")that  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	26	None	replace
964	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize  + ")from  the  specified  maxium  size  of "  +  len);  [CE]  class  or  interface  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize  + ")from  the  specified  maxium  size  of "  +  len);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  maxResultSize  + ")from  the  specified  maxium  size  of "  +  len);	  aughtException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    len    +       ")than    the    specified    maxium    size    of   "    +    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	26	None	replace
965	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  class  or  interface  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  class  or  interface  expected	74	None	replace
966	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_ENCODE_TABLE);  [CE]  class  or  interface  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  IS_CHUNK_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  class  or  interface  expected	74	None	replace
967	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  hashCode);  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  hashCode);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  hashCode);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    isChunked);    	non-compiled	[CE]  not  a  statement	74	None	replace
968	[BUG]  [BUGGY]  byte[]  buf  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buf  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buf  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	106	None	replace
969	[BUG]  [BUGGY]  B64  b64  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  B64  b64  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	B64  b64  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(b64,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	106	None	replace
970	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	122	None	replace
971	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  maxResultSize);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	122	None	replace
972	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_S  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_S  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_S	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	122	None	replace
973	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_S  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_S  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_S	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	122	None	replace
974	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	122	None	replace
975	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  [CE]  invalid  method  declaration;  return  type  required  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  MASK_6BITS,	  Len    =    getEncodeLength(binaryData,    MASK_6BITS,    CHUNK_SEPARATOR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
976	[BUG]  [BUGGY]  double  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  invalid  method  declaration;  return  type  required  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  double  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	double  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
977	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);  [CE]  invalid  method  declaration;  return  type  required  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	145	None	replace
978	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  binaryData.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  binaryData.length);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	145	None	replace
979	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [CE]  invalid  method  declaration;  return  type  required  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  short  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
980	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE);	  int    len    =    getEncodeLength(binaryData,    0,    CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
981	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  LEN);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  LEN);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  LEN);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    LEN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
982	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize,  isChunked);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize,  isChunked);	  int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS,    isChunked);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	151	None	replace
983	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MASK_6BITSIZE);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MASK_6BITSIZE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  MASK_6BITSIZE);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
984	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_LAST);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_LAST);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_LAST);	  byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    DEFAULT_BUFFER_RESIZE);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
985	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_HEIGHT_RESIZE_FACTOR,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_HEIGHT_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_HEIGHT_RESIZE_FACTOR,  MASK_6BITS);	  int    len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
986	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
987	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
988	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	  int    len    =    getEncode(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
989	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8);	  int    len    =    getEncodeLength(binaryData,    MASK_8BITS,    MIME_CHUNK_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
990	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  minResultSize);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  minResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  minResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    minResultSize);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
991	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64  +  1);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64  +  1);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    base64);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
992	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URLSafe,  0,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  URLSafe,  0,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  URLSafe,  0,  maxResultSize);	  result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    0,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
993	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    DEFAULT_BUFFER_RESIZE_FACTOR,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
994	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  binaryData,  isChunked,  urlSafe,  maxResultSize);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
995	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    maxResultSize    +   ")    than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	142	None	replace
996	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);	  Len    =    getEncodeSize(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	155	None	replace
997	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  base64,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  base64,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  base64,  maxResultSize);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    URL_SAFE_ENCODE_TABLE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
998	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1,  isChunked);	  byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
999	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1000	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  binaryData.length);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  binaryData.length);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  binaryData.length);	  Len    =    getEncodeBase64(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1001	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE);	  Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    HUNTARD_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1002	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_S  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_S  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_S	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1003	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1004	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1005	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1006	[BUG]  [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEC  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEC  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  isChunked?  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR):  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEC	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1007	[BUG]  [BUGGY]  Len  =  encodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Len  =  encodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  encodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	  Len    =    getEncodeLength(binaryData,    maxResultSize,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1008	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  HARD_ENCODE_TABLE);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1009	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  1);	  byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize,    len);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1010	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [BUGGY]      len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of   "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +	  Throwables.throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +   ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1011	[BUG]  [BUGGY]  long  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  long  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	  long    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BIT);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1012	[BUG]  [BUGGY]  Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	  byte    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
1013	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  1,  isChunked);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  1,  isChunked);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  1,  isChunked);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	96	None	replace
1014	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {      [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  urlSafe,  maxResultSize);  [BUGGY]      throw  new  IllegalArgumentException(     "Input  array  too  big,  the  output  array  would  be  bigger  (     "  +    len  +             ")  than  the  specified  maxium  size  of       "  +  len  +       ")  than  the  specified  maxium  size  of       "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  urlSafe,  maxResultSize);	  System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize,    isChunked);    	non-compiled	[CE]  ';'  expected	96	None	replace
