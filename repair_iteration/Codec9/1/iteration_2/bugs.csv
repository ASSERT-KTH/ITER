bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	21	None	replace
2	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	21	None	replace
3	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	21	None	replace
4	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  PEM_CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	21	None	replace
5	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	21	None	replace
6	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  not  a  statement	21	None	replace
7	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  maxResultSize);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LEN);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LEN);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LEN);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
9	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_RESIZE_FACTOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  0);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	8	None	replace
12	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  0);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	8	None	replace
13	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	8	None	replace
14	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  0);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	19	None	replace
16	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	19	None	replace
17	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  not  a  statement	19	None	replace
18	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	12	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")than  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of       "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
25	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of       "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
26	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of       "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
27	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of       "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
28	[BUG]  [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	castException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  len  +   ")to  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of       "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
29	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  not  a  statement	10	None	replace
30	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_8BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  not  a  statement	10	None	replace
31	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  len);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  not  a  statement	10	None	replace
32	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  DEFAULT_BUFFER_RESIZE_FACTOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  not  a  statement	10	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	14	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  not  a  statement	14	None	replace
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")after  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	aughtException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
37	[BUG]  [BUGGY]  allowInput(input,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  allowInput(input,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(input,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
38	[BUG]  [BUGGY]  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
39	[BUG]  [BUGGY]  Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Parchet.IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
40	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    maxResultSize    +       ")    than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
41	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_CHUNK_SEPARATOR);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  DEFAULT_BUFFER_RESIZE);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MIME_CHUNK_SIZE);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
50	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	1	None	replace
54	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BIT);  [CE]  class  or  interface  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BIT);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BIT);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	1	None	replace
55	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
56	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  DEFAULT_BUFFER_RESIZE_FACTOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  len);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
64	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
65	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
66	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  false,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
68	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  class  or  interface  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
69	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
70	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [CE]  class  or  interface  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
71	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  class  or  interface  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
72	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
73	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
74	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
75	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  class  or  interface  expected	9	None	replace
76	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  DEFAULT_BUFFER_RESIZE_FACTOR,  MASK_6BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  not  a  statement	9	None	replace
77	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_8BITS,  MIME_CHUNK_SIZE);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  class  or  interface  expected	9	None	replace
78	[BUG]  [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  class  or  interface  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	short  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  class  or  interface  expected	9	None	replace
79	[BUG]  [BUGGY]  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
80	[BUG]  [BUGGY]  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	allowInput(b64,  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ';'  expected	15	None	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")to  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")to    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	11	None	replace
84	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
85	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
86	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
87	[BUG]  [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
88	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
89	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  buffer);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
90	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
91	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  base64);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	3	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throwables.throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	13	None	replace
93	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	13	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  large,  the  output  array  would  be  bigger  ( "  +  len  + ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	13	None	replace
95	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  maxResultSize);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  0,  maxResultSize);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
96	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  isChunked);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  isChunked);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  len,  maxResultSize);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  urlSafe);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  urlSafe);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  urlSafe);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MIME_CHUNK_SIZE);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  encodeBase64);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  encodeBase64);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  encodeBase64);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_6BITS);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  ';'  expected	17	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe);  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  urlSafe);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  not  a  statement	17	None	replace
103	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  len);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  not  a  statement	5	None	replace
104	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  0,  maxResultSize);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  len);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
106	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(b64,  isChunked,  urlSafe,  maxResultSize);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
107	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  minResultSize);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
108	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize,  isChunked);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	5	None	replace
109	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
110	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	6	None	replace
111	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize));  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize));  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize));	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	6	None	replace
112	[BUG]  [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  len  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize)+  1;	      byte[]    len    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ';'  expected	6	None	replace
113	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  ';'  expected	14	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  binaryData.length);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  binaryData.length);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  maxResultSize,  binaryData.length);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  binaryData,  buffer,  len,  maxResultSize);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
116	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  1);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    0);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
117	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
118	[BUG]  [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  buffer  =  encodeBase64(binaryData,  isChunked,  URL_SAFE_ENCODE_TABLE,  maxResultSize);	      byte[]    buffer    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
119	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
120	[BUG]  [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeBase64(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
121	[BUG]  [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
122	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MASK_6BITS,  CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
123	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
124	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BIT,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
125	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
126	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  0,  maxResultSize);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MASK_6BITS,  MIME_CHUNK_SIZE);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
128	[BUG]  [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
129	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
130	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
131	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  maxResultSize,  MIME_CHUNK_SIZE);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
132	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
133	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  LONG);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
134	[BUG]  [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
135	[BUG]  [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  0,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  0,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	byte[]  binaryData  =  encodeBase64(binaryData,  isChunked,  0,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
136	[BUG]  [BUGGY]  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
137	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  0,  CHUNK_SIZE);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
138	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  maxResultSize,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
139	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  isChunked);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
140	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  maxResultSize  +   ")over  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")over    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  DEFAULT_BUFFER_SIZE);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
142	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  maxResultSize  + ")  than  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
144	[BUG]  [BUGGY]  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
145	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  1);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
146	[BUG]  [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize  +  len);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
147	[BUG]  [BUGGY]  result  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  result  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	result  =  encodeBase64(result,  isChunked,  urlSafe,  maxResultSize);	      result    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
148	[BUG]  [BUGGY]  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	parent!=  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of       "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
149	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
150	[BUG]  [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	BinaryData  binaryData  =  encodeBase64(binaryData,  isChunked,  urlSafe,  maxResultSize);	      byte[]    binaryData    =    encodeBase64(binaryData,    isChunked,    urlSafe,    maxResultSize);    	non-compiled	[CE]  ')'  expected	4	None	replace
151	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS,  isChunked);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  MASK_8BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_8BITS);    	non-compiled	[CE]  ')'  expected	10	None	replace
153	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Thread.currentThread().getContextClassLoader().reportError( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  +   ")  than  the  specified  maxium  size  of "  +  maxResultSize);	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
154	[BUG]  [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MASK_6BIT);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	1	None	replace
155	[BUG]  [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  maxResultSize);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	21	None	replace
156	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  MIN_CHUNK_SEPARATOR);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
157	[BUG]  [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE);  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  HUNTARD_ENCODE_TABLE);	      Len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    maxResultSize);    	non-compiled	[CE]  ')'  expected	21	None	replace
158	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +  [BUGGY]    len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	Throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  bigger  ( "  +  len  + ")before  the  specified  maxium  size  of "  +	  throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    bigger    (   "    +    len    +       ")before    the    specified    maxium    size    of   "    +    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
159	[BUG]  [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeSize(binaryData,  MIME_CHUNK_SIZE,  MASK_6BITS);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    MASK_6BITS);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
160	[BUG]  [BUGGY]  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	parent  ==  null  &&  isChunked)  {  throw  new  IllegalArgumentException( "Input  array  too  big,  the  output  array  would  be  larger  ( "  +  len  + ")  than  the  specified  maxium  size  of "  +  maxResultSize);  }	      if(isChunked)    {    throw    new    IllegalArgumentException(   "Input    array    too    big,    the    output    array    would    be    larger    (   "    +    len    +       ")    than    the    specified    maxium    size    of   "    +    maxResultSize);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
161	[BUG]  [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncode(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
162	[BUG]  [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	int  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR,  urlSafe);	      int    len    =    getEncodeLength(binaryData,    MIME_CHUNK_SIZE,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MASK_CHUNK_SIZE);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    public  static  byte[]  encodeBase64(byte[]  binaryData,  boolean  isChunked,  boolean  urlSafe,  int  maxResultSize)  {  if  (binaryData  ==  null  ||  binaryData.length  ==  0)  {  return  binaryData;  }  long  len  =  getEncodeLength(binaryData,  MIME_CHUNK_SIZE,  CHUNK_SEPARATOR);  if  (len  >  maxResultSize)  {    [BUGGY]  System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE);  [BUGGY]    throw  new  IllegalArgumentException(   "Input  array  too  big,  the  output  array  would  be  bigger  (   "  +    len  +           ")  than  the  specified  maxium  size  of     "  +  len  +     ")  than  the  specified  maxium  size  of     "  +  maxResultSize);  }  Base64  b64  =  isChunked  ?  new  Base64(urlSafe)  :  new  Base64(0,  CHUNK_SEPARATOR,  urlSafe);  return  b64.encode(binaryData);  }  [CLASS]  Base64  [METHOD]  encodeBase64  [RETURN_TYPE]  byte[]  byte[]  binaryData  boolean  isChunked  boolean  urlSafe  int  maxResultSize  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  binaryData  buffer  encodeTable  in  lineSeparator  pArray  result  boolean  eof  isChunked  urlSafe  Base64  b64  byte  PAD  b  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	System.arraycopy(binaryData,  0,  buffer,  len,  MAX_CHUNK_SIZE);	      System.arraycopy(binaryData,    0,    buffer,    len,    maxResultSize);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
