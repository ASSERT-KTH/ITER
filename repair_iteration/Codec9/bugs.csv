bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len +  ") than the specified maxium size of " + [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { [BUGGY] throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +    len +        ") than the specified maxium size of " + [BUGGY] len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	replace	
2	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { [BUGGY] [BUGGY] throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +    len +        ") than the specified maxium size of " + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	829	831	1	add	
3	[BUG] [BUGGY] buffer[pos++] = PAD; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [BUGGY] buffer[pos++] = PAD; [BUGGY] buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	
4	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [BUGGY] [BUGGY] buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	add	
5	[BUG] [BUGGY] buffer[pos++] = PAD; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [BUGGY] buffer[pos++] = PAD; [BUGGY] } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	
6	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [BUGGY] [BUGGY] buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	add	
7	[BUG] [BUGGY] buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : [BUGGY] buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	
8	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : [BUGGY] [BUGGY] buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	add	
9	[BUG] [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS]; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT]   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS]; [BUGGY]  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	
10	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT]   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [BUGGY] [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	add	
11	[BUG] [BUGGY] if (encodeTable == STANDARD_ENCODE_TABLE) { [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  [BUGGY] if (encodeTable == STANDARD_ENCODE_TABLE) { [BUGGY] buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	replace	
12	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  [BUGGY] [BUGGY] if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	453	453	1	add	
13	[BUG] [BUGGY] return encodeBase64(binaryData, false); [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData) { [BUGGY] return encodeBase64(binaryData, false); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos result x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	667	667	1	replace	
14	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData) { [BUGGY] [BUGGY] return encodeBase64(binaryData, false); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator boolean eof urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos result x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	667	667	1	add	
15	[BUG] [BUGGY] len += 4 - mod; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { [BUGGY] len += 4 - mod; [BUGGY] } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	
16	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { [BUGGY] [BUGGY] len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	add	
17	[BUG] [BUGGY] len += chunkSeparator.length; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [BUGGY] len += chunkSeparator.length; [BUGGY] } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	
18	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [BUGGY] [BUGGY] len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	add	
19	[BUG] [BUGGY] Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } [BUGGY] Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [BUGGY] return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.21320071635561041	835	835	1	replace	
20	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } [BUGGY] [BUGGY] Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.21320071635561041	835	835	1	add	
21	[BUG] [BUGGY] return b64.encode(binaryData); [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [BUGGY] return b64.encode(binaryData); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.21320071635561041	836	836	1	replace	
22	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); [BUGGY] [BUGGY] return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.21320071635561041	836	836	1	add	
23	[BUG] [BUGGY] return encodeBase64(binaryData, isChunked, false); [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) { [BUGGY] return encodeBase64(binaryData, isChunked, false); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos result x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	785	785	1	replace	
24	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) { [BUGGY] [BUGGY] return encodeBase64(binaryData, isChunked, false); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos result x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	785	785	1	add	
25	[BUG] [BUGGY] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } [BUGGY] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [BUGGY] if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	827	827	1	replace	
26	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } [BUGGY] [BUGGY] long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	827	827	1	add	
27	[BUG] [BUGGY] if (len > maxResultSize) { [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [BUGGY] if (len > maxResultSize) { [BUGGY] throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	828	828	1	replace	
28	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); [BUGGY] [BUGGY] if (len > maxResultSize) { throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maxium size of " + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe int maxResultSize [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe Base64 b64 byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	828	828	1	add	
29	[BUG] [BUGGY] chunkSize = (chunkSize / 4) * 4; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  [BUGGY] chunkSize = (chunkSize / 4) * 4; [BUGGY]  long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	971	971	1	replace	
30	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  [BUGGY] [BUGGY] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	971	971	1	add	
31	[BUG] [BUGGY] long len = (pArray.length * 4) / 3; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; [BUGGY] long len = (pArray.length * 4) / 3; [BUGGY] long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	973	973	1	replace	
32	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; [BUGGY] [BUGGY] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	973	973	1	add	
33	[BUG] [BUGGY] long mod = len % 4; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; [BUGGY] long mod = len % 4; [BUGGY] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	974	974	1	replace	
34	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; [BUGGY] [BUGGY] long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	974	974	1	add	
35	[BUG] [BUGGY] if (mod != 0) { [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; [BUGGY] if (mod != 0) { [BUGGY] len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	975	975	1	replace	
36	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; [BUGGY] [BUGGY] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	975	975	1	add	
37	[BUG] [BUGGY] if (chunkSize > 0) { [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } [BUGGY] if (chunkSize > 0) { [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	978	978	1	replace	
38	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } [BUGGY] [BUGGY] if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	978	978	1	add	
39	[BUG] [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	979	979	1	replace	
40	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { [BUGGY] [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	979	979	1	add	
41	[BUG] [BUGGY] len += (len / chunkSize) * chunkSeparator.length; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT]  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] len += (len / chunkSize) * chunkSeparator.length; [BUGGY] if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	980	980	1	replace	
42	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT]  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] [BUGGY] len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	980	980	1	add	
43	[BUG] [BUGGY] if (!lenChunksPerfectly) { [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; [BUGGY] if (!lenChunksPerfectly) { [BUGGY] len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	981	981	1	replace	
44	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; [BUGGY] [BUGGY] if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	981	981	1	add	
45	[BUG] [BUGGY] return len; [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [BUGGY] return len; [BUGGY] } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	985	985	1	replace	
46	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [BUGGY] [BUGGY] return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator pArray packedData result boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus pos readPos result x long len mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20851441405707477	985	985	1	add	
47	[BUG] [BUGGY] return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE); [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) { [BUGGY] return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE); [BUGGY] } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos result x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20412414523193154	803	803	1	replace	
48	[BUG] [BUGGY] [FE] java.lang.IllegalArgumentException: Input array too big [CONTEXT] public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) { [BUGGY] [BUGGY] return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE); } [CLASS] Base64 [METHOD] encodeBase64 [RETURN_TYPE] byte[]  byte[] binaryData boolean isChunked boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b binaryData buffer encodeTable in lineSeparator pArray result boolean eof isChunked urlSafe byte PAD b octet int DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS MIME_CHUNK_SIZE PEM_CHUNK_SIZE b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus pos readPos result x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.20412414523193154	803	803	1	add	
