bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  ';'  expected	16	None	add
2	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }		non-compiled	[CE]  ';'  expected	16	None	add
3	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }		non-compiled	[CE]  ';'  expected	16	None	add
4	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }		non-compiled	[CE]  ';'  expected	16	None	add
5	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }		non-compiled	[CE]  ';'  expected	16	None	add
6	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }		non-compiled	[CE]  ';'  expected	16	None	add
7	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }		non-compiled	[CE]  ';'  expected	16	None	add
8	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }		non-compiled	[CE]  ';'  expected	16	None	add
9	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }		non-compiled	[CE]  ';'  expected	16	None	add
10	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }		non-compiled	[CE]  ';'  expected	16	None	add
11	[BUG]  [BUGGY]  len  +=  4  *  mod;  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  4  *  mod;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
12	[BUG]  [BUGGY]  len  +=  4;  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  4;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
13	[BUG]  [BUGGY]  len  +=  mod  -  4;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  mod  -  4;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  4;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
14	[BUG]  [BUGGY]  len  +=  4  /  mod;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  4  /  mod;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  /  mod;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
15	[BUG]  [BUGGY]  len  +=  3  -  mod;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  3  -  mod;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  3  -  mod;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
16	[BUG]  [BUGGY]  len  +=  2  -  mod;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  2  -  mod;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  2  -  mod;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
17	[BUG]  [BUGGY]  len  +=  8  -  mod;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  8  -  mod;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8  -  mod;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
18	[BUG]  [BUGGY]  len  +=  mod  -  1;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  mod  -  1;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  1;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
19	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }		non-compiled	[CE]  ';'  expected	16	None	add
20	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }		non-compiled	[CE]  ';'  expected	16	None	add
21	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }		non-compiled	[CE]  ';'  expected	16	None	add
22	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }		non-compiled	[CE]  ';'  expected	16	None	add
23	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }		non-compiled	[CE]  ';'  expected	16	None	add
24	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }		non-compiled	[CE]  ';'  expected	16	None	add
25	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }		non-compiled	[CE]  ';'  expected	16	None	add
26	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }		non-compiled	[CE]  ';'  expected	16	None	add
27	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }		non-compiled	[CE]  ';'  expected	16	None	add
28	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }		non-compiled	[CE]  ';'  expected	16	None	add
29	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }		non-compiled	[CE]  ';'  expected	16	None	add
30	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }		non-compiled	[CE]  ';'  expected	16	None	add
31	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }		non-compiled	[CE]  ';'  expected	16	None	add
32	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }		non-compiled	[CE]  ';'  expected	16	None	add
33	[BUG]  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	    if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }		non-compiled	[CE]  ';'  expected	16	None	add
34	[BUG]  [BUGGY]  len  +=  mod  -  2;  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  mod  -  2;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  2;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
35	[BUG]  [BUGGY]  len  +=  mod  -  6;  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  mod  -  6;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  6;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
36	[BUG]  [BUGGY]  len  +=  mod  -  3;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  [BUGGY]  len  +=  mod  -  3;  [BUGGY]  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  3;	len  +=  4  -  mod;  	non-compiled	[CE]  ';'  expected	15	None	replace
