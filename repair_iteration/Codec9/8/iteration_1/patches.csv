bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
2	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
3	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
4	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
5	[BUG]  [BUGGY]  if(chunkSize  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
6	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
7	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize[pos];  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
8	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
9	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
10	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
11	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
12	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
13	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
14	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  patchSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  patchSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  patchSize;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
15	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
16	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
17	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
18	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
19	[BUG]  [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
20	[BUG]  [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
21	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
22	[BUG]  [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
23	[BUG]  [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
24	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
25	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
26	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
27	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
28	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
29	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
30	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
31	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
32	[BUG]  [BUGGY]  len  +=  mod  /  3;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  /  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  /  3;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
33	[BUG]  [BUGGY]  len  +=  mod  *  3;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  *  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  *  3;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
34	[BUG]  [BUGGY]  len  +=  mod;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
35	[BUG]  [BUGGY]  Len  +=  mod  /  3;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod  /  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod  /  3;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
36	[BUG]  [BUGGY]  Len  +=  mod  -  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod  -  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod  -  1;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
37	[BUG]  [BUGGY]  len  +=  mod  /  6;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  /  6;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  /  6;	  len    +=    mod    -    6;    	non-compiled	[CE]  ';'  expected	35	None	replace
38	[BUG]  [BUGGY]  Len  +=  mod  /  6;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod  /  6;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod  /  6;	  len    +=    mod    -    6;    	non-compiled	[CE]  ';'  expected	35	None	replace
39	[BUG]  [BUGGY]  len  +=  mod  *  6;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  *  6;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  *  6;	  len    +=    mod    -    6;    	non-compiled	[CE]  ';'  expected	35	None	replace
40	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
41	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
42	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
43	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
44	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
45	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
46	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
47	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
48	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
49	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
50	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
51	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
52	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
53	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
54	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
55	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
56	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
57	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
58	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
59	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
60	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
61	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
62	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
63	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
64	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
65	[BUG]  [BUGGY]  len  +=  2  *  mod;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  2  *  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  2  *  mod;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
66	[BUG]  [BUGGY]  len  +=  2;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  2;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
67	[BUG]  [BUGGY]  len  +=  2  /  mod;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  2  /  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  2  /  mod;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
68	[BUG]  [BUGGY]  len  +=  2L  -  mod;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  2L  -  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  2L  -  mod;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
69	[BUG]  [BUGGY]  Len  +=  2  -  mod;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  2  -  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  2  -  mod;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
70	[BUG]  [BUGGY]  len  +=  2  -  mod.length;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  2  -  mod.length;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  2  -  mod.length;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
71	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
72	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
73	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mode);  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mode);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mode);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
77	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
79	[BUG]  [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
80	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
81	[BUG]  [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
82	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
83	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
84	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
85	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
86	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
87	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
88	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
89	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
90	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
91	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
92	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
93	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
94	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
95	[BUG]  [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
96	[BUG]  [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
97	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
98	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
99	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
100	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
102	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
103	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
104	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
105	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
106	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
107	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSize;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
108	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
109	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
110	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
111	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
112	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
113	[BUG]  [BUGGY]  if(chunkSize  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
114	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
115	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
116	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
117	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
118	[BUG]  [BUGGY]  if(chunkSize  >  4)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  4)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  4)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
119	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
120	[BUG]  [BUGGY]  if(chunkSize  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
121	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
122	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  1,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  1,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  1,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
123	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
124	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
125	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
126	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
127	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
128	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
129	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
130	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
131	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
132	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
133	[BUG]  [BUGGY]  len  +=  4  *  mod  +  1;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  +  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  +  1;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
134	[BUG]  [BUGGY]  len  +=  4  *  mod  -  1;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  -  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  -  1;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
135	[BUG]  [BUGGY]  len  +=  4  *  mod  /  2;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  /  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  /  2;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
136	[BUG]  [BUGGY]  len  +=  4  *  mod  +  chunkSize;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  +  chunkSize;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  +  chunkSize;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
137	[BUG]  [BUGGY]  Len  +=  4  *  mod;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  4  *  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  4  *  mod;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
138	[BUG]  [BUGGY]  len  +=  4  *  mod  -  2;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  -  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  -  2;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
139	[BUG]  [BUGGY]  len  +=  4  *  mod  +  2;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  +  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  +  2;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
140	[BUG]  [BUGGY]  len  -=  4  *  mod;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  -=  4  *  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  -=  4  *  mod;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
141	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
142	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
143	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  ==  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  ==  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  ==  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
144	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >>  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >>  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >>  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
145	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
146	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
147	[BUG]  [BUGGY]  if(chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
148	[BUG]  [BUGGY]  if(chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
149	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
150	[BUG]  [BUGGY]  len  +=  8  *  mod;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  8  *  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8  *  mod;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
151	[BUG]  [BUGGY]  len  +=  8;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  8;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
152	[BUG]  [BUGGY]  len  +=  8  -  mod.length;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  8  -  mod.length;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8  -  mod.length;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
153	[BUG]  [BUGGY]  len  +=  8  /  mod;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  8  /  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8  /  mod;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
154	[BUG]  [BUGGY]  Len  +=  8  -  mod;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  8  -  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  8  -  mod;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
155	[BUG]  [BUGGY]  len  +=  8  -  mod  *  4;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  8  -  mod  *  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8  -  mod  *  4;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
156	[BUG]  [BUGGY]  len  +=  8  -  chunkSize;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  8  -  chunkSize;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  8  -  chunkSize;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
157	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
158	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
159	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
160	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  1,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  1,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  1,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
161	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  bitsPerChunk;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  bitsPerChunk;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  bitsPerChunk;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
162	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
163	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSelector.length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSelector.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSelector.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
164	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  4;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  4;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  4;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
165	[BUG]  [BUGGY]  len  +=  mod  /  4;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  /  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  /  4;	  len    +=    mod    -    4;    	non-compiled	[CE]  ';'  expected	13	None	replace
166	[BUG]  [BUGGY]  len  +=  mod  *  4;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  *  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  *  4;	  len    +=    mod    -    4;    	non-compiled	[CE]  ';'  expected	13	None	replace
167	[BUG]  [BUGGY]  Len  +=  mod  /  4;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod  /  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod  /  4;	  len    +=    mod    -    4;    	non-compiled	[CE]  ';'  expected	13	None	replace
168	[BUG]  [BUGGY]  len  +=  mod  %  4;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  %  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  %  4;	  len    +=    mod    -    4;    	non-compiled	[CE]  ';'  expected	13	None	replace
169	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
170	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
171	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
172	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
173	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
174	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  mod.length;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
175	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  patchSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  patchSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  patchSize;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
176	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
177	[BUG]  [BUGGY]  len  +=  3  *  mod;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  3  *  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  3  *  mod;	  len    +=    3    -    mod;    	non-compiled	[CE]  ';'  expected	15	None	replace
178	[BUG]  [BUGGY]  len  +=  3;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  3;	  len    +=    3    -    mod;    	non-compiled	[CE]  ';'  expected	15	None	replace
179	[BUG]  [BUGGY]  len  +=  3  /  mod;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  3  /  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  3  /  mod;	  len    +=    3    -    mod;    	non-compiled	[CE]  ';'  expected	15	None	replace
180	[BUG]  [BUGGY]  len  +=  mode  -  mod;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mode  -  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mode  -  mod;	  len    +=    3    -    mod;    	non-compiled	[CE]  ';'  expected	15	None	replace
181	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
182	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
183	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
184	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
185	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
186	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
187	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
188	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
189	[BUG]  [BUGGY]  bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
190	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	aughtExceptionHandler.throwAsIOException( " ");	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
191	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
192	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Thread.currentThread().interrupt();	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
193	[BUG]  [BUGGY]  bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
194	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getEncodeClass().getClassLoader());  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(getEncodeClass().getClassLoader());  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Thread.currentThread().setContextClassLoader(getEncodeClass().getClassLoader());	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
195	[BUG]  [BUGGY]  Thread.currentThread().setContext(new  Base64InputStream(pArray,  len,  chunkSize));  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Thread.currentThread().setContext(new  Base64InputStream(pArray,  len,  chunkSize));  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Thread.currentThread().setContext(new  Base64InputStream(pArray,  len,  chunkSize));	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
196	[BUG]  [BUGGY]  bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	bucket  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
197	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(base64Data);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Thread.currentThread().setContextClassLoader(base64Data);  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Thread.currentThread().setContextClassLoader(base64Data);	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
198	[BUG]  [BUGGY]  len  +=  mod  /  2;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  /  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  /  2;	  len    +=    mod    -    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
199	[BUG]  [BUGGY]  len  +=  mod  *  2;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  *  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  *  2;	  len    +=    mod    -    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
200	[BUG]  [BUGGY]  Len  +=  mod  /  2;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod  /  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod  /  2;	  len    +=    mod    -    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
201	[BUG]  [BUGGY]  len  +=  mod  %  2;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  %  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  %  2;	  len    +=    mod    -    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
202	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
203	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
204	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  mod;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
205	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
206	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  size;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
207	[BUG]  [BUGGY]  if(chunkSize  >  4)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  4)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  4)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
208	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
209	[BUG]  [BUGGY]  if(chunkSize  >  4)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  4)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  4)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
210	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  sourceEnd;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  sourceEnd;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  x  =  0;  x  <  sourceEnd;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
211	[BUG]  [BUGGY]  len  +=  4  /  mod.length;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  /  mod.length;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  /  mod.length;	  len    +=    4    /    mod;    	non-compiled	[CE]  ';'  expected	14	None	replace
212	[BUG]  [BUGGY]  len  -=  4;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  -=  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  -=  4;	  len    +=    4;    	non-compiled	[CE]  ';'  expected	12	None	replace
213	[BUG]  [BUGGY]  len  +=  4  *  chunkSize;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  chunkSize;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  chunkSize;	  len    +=    4;    	non-compiled	[CE]  ';'  expected	12	None	replace
214	[BUG]  [BUGGY]  len  +=  6;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  6;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  6;	  len    +=    4;    	non-compiled	[CE]  ';'  expected	12	None	replace
215	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
216	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
217	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
218	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  int  len  =  chunkSize;  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  int  len  =  chunkSize;  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  int  len  =  chunkSize;  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
219	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
220	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  module;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  module;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  module;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
221	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
222	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  modifier;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  modifier;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  modifier;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
223	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
224	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
225	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
226	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
227	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
228	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
229	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  module;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  module;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  module;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
230	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
231	[BUG]  [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  ||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	||  mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
232	[BUG]  [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
233	[BUG]  [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
234	[BUG]  [BUGGY]  if(mod!=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
235	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
236	[BUG]  [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
237	[BUG]  [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
238	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
239	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
240	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
241	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
242	[BUG]  [BUGGY]  len  +=  mod  /  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  /  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  /  1;	  len    +=    mod    -    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
243	[BUG]  [BUGGY]  len  +=  mod  *  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  *  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  *  1;	  len    +=    mod    -    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
244	[BUG]  [BUGGY]  len  +=  mod.length  -  1;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod.length  -  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod.length  -  1;	  len    +=    mod    -    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
245	[BUG]  [BUGGY]  len  +=  mod  -  1L;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  -  1L;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  1L;	  len    +=    mod    -    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
246	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
247	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
248	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
249	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
250	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
251	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
252	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
253	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
254	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
255	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
256	[BUG]  [BUGGY]  parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
257	[BUG]  [BUGGY]  parent!=  null  &&  mod  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
258	[BUG]  [BUGGY]  parent!=  null  &&  mod  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
259	[BUG]  [BUGGY]  parent!=  null  &&  mod  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
260	[BUG]  [BUGGY]  parent!=  null  &&  mod  <  =  LAST_VALID_ENCODE_TABLE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  <  =  LAST_VALID_ENCODE_TABLE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  <  =  LAST_VALID_ENCODE_TABLE)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
261	[BUG]  [BUGGY]  safeGet(pArray,  len,  chunkSize)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  safeGet(pArray,  len,  chunkSize)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	safeGet(pArray,  len,  chunkSize)>  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
262	[BUG]  [BUGGY]  safeTree();  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  safeTree();  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	safeTree();	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
263	[BUG]  [BUGGY]  parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
264	[BUG]  [BUGGY]  parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent!=  null  &&  mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
265	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
266	[BUG]  [BUGGY]  Len  <  0  ||  chunkSize  >  pArray.length)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  <  0  ||  chunkSize  >  pArray.length)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  <  0  ||  chunkSize  >  pArray.length)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
267	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
268	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
269	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  len;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  len;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  len;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
270	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
271	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  array.length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  array.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  array.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
272	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
273	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
274	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
275	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
276	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
277	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
278	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
279	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
280	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
281	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  pArray[x];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  pArray[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  pArray[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
282	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
283	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  len[x];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  len[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  len[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
284	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
285	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
286	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
287	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
288	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  bits.length;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
289	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  pArray.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  pArray.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  pArray.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
290	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  4;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  4;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  4;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
291	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  array.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  array.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  array.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
292	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
293	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
294	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  pos  =  0;  pos  <  len;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
295	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
296	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
297	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
298	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
299	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
300	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
301	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
302	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
303	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
304	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
305	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
306	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
307	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
308	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
309	[BUG]  [BUGGY]  len  +=  mod  -  8;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  -  8;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  -  8;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
310	[BUG]  [BUGGY]  len  +=  6  -  mod;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  6  -  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  6  -  mod;	  len    +=    8    -    mod;    	non-compiled	[CE]  ';'  expected	17	None	replace
311	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
312	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  len[pos];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  len[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  len[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
313	[BUG]  [BUGGY]  len  +=  chunkSize;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  chunkSize;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  chunkSize;	  len    +=    4;    	non-compiled	[CE]  ';'  expected	12	None	replace
314	[BUG]  [BUGGY]  len  +=  pArray.length;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  pArray.length;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  pArray.length;	  len    +=    4;    	non-compiled	[CE]  ';'  expected	12	None	replace
315	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
316	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
317	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
318	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
319	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
320	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
321	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
322	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
323	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
324	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  len;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
325	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  length;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
326	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
327	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
328	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
329	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
330	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
331	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
332	[BUG]  [BUGGY]  if(mod  >  0)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
333	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
334	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
335	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
336	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
337	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
338	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
339	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
340	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
341	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
342	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
343	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
344	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
345	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
346	[BUG]  [BUGGY]  if(mod  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
347	[BUG]  [BUGGY]  len  +=  mod  %  3;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  %  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  %  3;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
348	[BUG]  [BUGGY]  Len  +=  2  *  mod;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  2  *  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  2  *  mod;	  len    +=    2    -    mod;    	non-compiled	[CE]  ';'  expected	16	None	replace
349	[BUG]  [BUGGY]  len  +=  mode  /  4;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mode  /  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mode  /  4;	  len    +=    4    /    mod;    	non-compiled	[CE]  ';'  expected	14	None	replace
350	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
351	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  -1)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  -1)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  -1)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
352	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
353	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
354	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
355	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
356	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
357	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
358	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
359	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
360	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
361	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
362	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  mod  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
363	[BUG]  [BUGGY]  len  +=  4  *  mod  +  pArray.length;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  +  pArray.length;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  +  pArray.length;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
364	[BUG]  [BUGGY]  len  +=  4  *  mod  +  8;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod  +  8;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod  +  8;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
365	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
366	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
367	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
368	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
369	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
370	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].remainder();  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].remainder();  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].remainder();  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
371	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
372	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
373	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
374	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
375	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  array.length;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  array.length;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  array.length;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
376	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
377	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
378	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
379	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
380	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  pArray[i];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
381	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  len[i];  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  len[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  len[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
382	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
383	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
384	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
385	[BUG]  [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod!=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod!=  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
386	[BUG]  [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  ==  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  ==  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
387	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  mod  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
388	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  4;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  4;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  4;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
389	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  8;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  8;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  8;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
390	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
391	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  array.length;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  array.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  array.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
392	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i],  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i],  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
393	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  module);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  module);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  module);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    mod);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
394	[BUG]  [BUGGY]  Len  +=  mod  -  3;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod  -  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod  -  3;	  len    +=    3    -    mod;    	non-compiled	[CE]  ';'  expected	15	None	replace
395	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
396	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
397	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
398	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	5	None	replace
399	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
400	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	2	None	replace
401	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  module;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  module;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  module;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
402	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  modifier;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  modifier;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i]  *  modifier;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
403	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
404	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
405	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  *=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  *=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  *=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
406	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  bits.length;  ++i)  {  mod  +=  chunkSeparator[i];  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator[i];    }    	non-compiled	[CE]  ';'  expected	33	None	replace
407	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
408	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
409	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize  +  1;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize  +  1;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize  +  1;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
410	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  1,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  1,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  1,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
411	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  bits.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  bits.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  bits.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
412	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  *=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  *=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  *=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    chunkSize;    i    <    len;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
413	[BUG]  [BUGGY]  len  +=  mod.length  -  2;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod.length  -  2;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod.length  -  2;	  len    +=    mod    -    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
414	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
415	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  6;  ++x)  {  len  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  6;  ++x)  {  len  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  6;  ++x)  {  len  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
416	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  4  *  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  4  *  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  len  +=  4  *  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    len    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
417	[BUG]  [BUGGY]  len  +=  4  *  mod.length;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  4  *  mod.length;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  4  *  mod.length;	  len    +=    4    *    mod;    	non-compiled	[CE]  ';'  expected	11	None	replace
418	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  mod;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
419	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  module;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  module;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  module;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
420	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  modifier;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  modifier;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  mod  +=  chunkSeparator[i]  *  modifier;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    mod    +=    chunkSeparator[i]    *    mod;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
421	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  4;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  4;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  4;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
422	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  6;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  6;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  6;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
423	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  8;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  8;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  8;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
424	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  System.arraycopy(pArray,  0,  len,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    mod);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
425	[BUG]  [BUGGY]  len  +=  mod.length  -  3;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod.length  -  3;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod.length  -  3;	  len    +=    mod    -    3;    	non-compiled	[CE]  ';'  expected	36	None	replace
426	[BUG]  [BUGGY]  Len  +=  mod;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  Len  +=  mod;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	Len  +=  mod;	  len    +=    4;    	non-compiled	[CE]  ';'  expected	12	None	replace
427	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos].length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  chunkSize;  pos++)  {  mod  +=  chunkSeparator[pos].length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
428	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  4;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  4;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  4;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	32	None	replace
429	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
430	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
431	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
432	[BUG]  [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  mod  +=  chunkSeparator[i].length;  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    mod    +=    chunkSeparator[i].length;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
433	[BUG]  [BUGGY]  if(chunkSize  <  4  ||  chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  4  ||  chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  4  ||  chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
434	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
435	[BUG]  [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
436	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
437	[BUG]  [BUGGY]  if(chunkSize  <  4  ||  chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  4  ||  chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  4  ||  chunkSize  >  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
438	[BUG]  [BUGGY]  if(chunkSize  <  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  4)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
439	[BUG]  [BUGGY]  if(chunkSize  >=  4  &&  mod  <  =  chunkSize)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >=  4  &&  mod  <  =  chunkSize)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >=  4  &&  mod  <  =  chunkSize)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod!=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod!=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
440	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
441	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x].length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x].length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator[x].length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
442	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  mod  +=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  mod  +=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  mod  +=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
443	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  *=  chunkSeparator[x];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  *=  chunkSeparator[x];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  *=  chunkSeparator[x];  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator[x];    }    	non-compiled	[CE]  ';'  expected	29	None	replace
444	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  mod;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
445	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
446	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
447	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  module.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  module.length;  ++i)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  module.length;  ++i)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
448	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  4;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  4;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  mod  +=  4;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
449	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  8;  ++i)  {  mod  +=  8;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  8;  ++i)  {  mod  +=  8;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  8;  ++i)  {  mod  +=  8;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
450	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i]);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i]);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
451	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
452	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  mod;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
453	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    chunkSize;    pos++)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
454	[BUG]  [BUGGY]  len  +=  mod.length  -  6;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod.length  -  6;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod.length  -  6;	  len    +=    mod    -    6;    	non-compiled	[CE]  ';'  expected	35	None	replace
455	[BUG]  [BUGGY]  len  +=  mod  %  6;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod  %  6;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod  %  6;	  len    +=    mod    -    6;    	non-compiled	[CE]  ';'  expected	35	None	replace
456	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
457	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  getEncodeLength(pArray[i],  pArray[i]);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
458	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i].length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i].length);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  getEncodeLength(pArray[i],  pArray[i].length);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    getEncodeLength(pArray[i],    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
459	[BUG]  [BUGGY]  len  -=  mod  -  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  -=  mod  -  1;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  -=  mod  -  1;	  len    +=    mod    -    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
460	[BUG]  [BUGGY]  if(chunkSize  <  4  ||  chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  <  4  ||  chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  <  4  ||  chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
461	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
462	[BUG]  [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
463	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  char[]  mod  =  pArray[i];  if(mod  >=  0)  {  mod  +=  mod;  }  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    char[]    mod    =    pArray[i];    if(mod    >=    0)    {    mod    +=    mod;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
464	[BUG]  [BUGGY]  if(mod  <  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  <  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  <  0)  {  for(int  x  =  0;  x  <  chunkSize;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
465	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  mod  +=  chunkSeparator.length;  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  mod  +=  chunkSeparator.length;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  4;  ++x)  {  mod  +=  chunkSeparator.length;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
466	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  6;  ++x)  {  mod  +=  8;  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  x  =  0;  x  <  6;  ++x)  {  mod  +=  8;  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  x  =  0;  x  <  6;  ++x)  {  mod  +=  8;  }	      if(mod    >    0)    {    for(int    x    =    0;    x    <    chunkSize;    ++x)    {    mod    +=    chunkSeparator.length;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
467	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  4;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  mod);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
468	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  moduleCount;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  moduleCount);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0;  i  <  moduleCount;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  moduleCount);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0;  i  <  moduleCount;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  moduleCount);  }	      if(mod    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    mod);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
469	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
470	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }	      if(mod    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	20	None	replace
471	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  6;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  6;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  6;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
472	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  8;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  8;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  8;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
473	[BUG]  [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  mod  +=  chunkSeparator[pos];  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  mod  +=  chunkSeparator[pos];  }	      if(mod    >    0)    {    for(int    pos    =    0;    pos    <    len;    pos++)    {    mod    +=    chunkSeparator[pos];    }    	non-compiled	[CE]  ';'  expected	31	None	replace
474	[BUG]  [BUGGY]  len  +=  mod.length  -  4;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  len  +=  mod.length  -  4;  [BUGGY]    }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	len  +=  mod.length  -  4;	  len    +=    mod    -    4;    	non-compiled	[CE]  ';'  expected	13	None	replace
475	[BUG]  [BUGGY]  if(mod  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
476	[BUG]  [BUGGY]  parent  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent  ==  null  ||  mod  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
477	[BUG]  [BUGGY]  parent  ==  null  ||  mod  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent  ==  null  ||  mod  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent  ==  null  ||  mod  <  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
478	[BUG]  [BUGGY]  parent  ==  null  ||  mod  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  parent  ==  null  ||  mod  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	parent  ==  null  ||  mod  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
479	[BUG]  [BUGGY]  if(mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  throw  new  IllegalArgumentException( " ".length());  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
480	[BUG]  [BUGGY]  if(mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >  0)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
481	[BUG]  [BUGGY]  if(mod  >=  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  if(mod  >=  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	if(mod  >=  0)  {  throw  new  IllegalArgumentException( " ".);  }	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
482	[BUG]  [BUGGY]  aughtException( " ");  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    private  static  long  getEncodeLength(byte[]  pArray,  int  chunkSize,  byte[]  chunkSeparator)  {  chunkSize  =  (chunkSize  /  4)  *  4;  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {    [BUGGY]  aughtException( " ");  [BUGGY]    len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.22941573387056174	976	976	1	replace	aughtException( " ");	      if(mod    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	1	None	replace
