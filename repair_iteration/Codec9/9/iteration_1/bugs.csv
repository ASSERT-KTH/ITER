bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  pArray.length);  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  pArray.length);  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  pArray.length);		non-compiled	[CE]  ';'  expected	18	None	add
2	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
3	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
4	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }		non-compiled	[CE]  ';'  expected	18	None	add
5	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
6	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
7	[BUG]  [BUGGY]    byte[]  chunkSeparator  =(byte[])pArray.clone();  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    byte[]  chunkSeparator  =(byte[])pArray.clone();  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    byte[]  chunkSeparator  =(byte[])pArray.clone();		non-compiled	[CE]  ';'  expected	18	None	add
8	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }		non-compiled	[CE]  ';'  expected	18	None	add
9	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }		non-compiled	[CE]  ';'  expected	18	None	add
10	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }		non-compiled	[CE]  ';'  expected	18	None	add
11	[BUG]  [BUGGY]  len  +=  chunkSize;  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSize;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
12	[BUG]  [BUGGY]  len  +=  chunkSize.length;  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSize.length;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
13	[BUG]  [BUGGY]  len  -=  chunkSeparator.length;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  -=  chunkSeparator.length;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSeparator.length;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
14	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  -  1;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSeparator.length  -  1;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  -  1;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
15	[BUG]  [BUGGY]  len  +=  pArray.length;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  pArray.length;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  pArray.length;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
16	[BUG]  [BUGGY]  len  +=  chunkSize  *  chunkSeparator.length;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSize  *  chunkSeparator.length;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  chunkSeparator.length;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  chunkSeparator.length;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
18	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  4;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSeparator.length  *  4;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  4;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  2;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSeparator.length  *  2;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  2;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  pArray.length;  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSeparator.length  *  pArray.length;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  pArray.length;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
21	[BUG]  [BUGGY]    System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  chunkSize);  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  chunkSize);		non-compiled	[CE]  ';'  expected	18	None	add
22	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
23	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }		non-compiled	[CE]  ';'  expected	18	None	add
24	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }		non-compiled	[CE]  ';'  expected	18	None	add
25	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }		non-compiled	[CE]  ';'  expected	18	None	add
26	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
27	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
28	[BUG]  [BUGGY]    byte[]  chunkSeparator  =  pArray.get(chunkSize);  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    byte[]  chunkSeparator  =  pArray.get(chunkSize);  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    byte[]  chunkSeparator  =  pArray.get(chunkSize);		non-compiled	[CE]  ';'  expected	18	None	add
29	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
30	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
31	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
32	[BUG]  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }		non-compiled	[CE]  ';'  expected	18	None	add
33	[BUG]  [BUGGY]    Len  =  Math.min(len,  pArray.length);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]    Len  =  Math.min(len,  pArray.length);  [BUGGY]  len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	    Len  =  Math.min(len,  pArray.length);		non-compiled	[CE]  ';'  expected	18	None	add
34	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  2;  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {  [BUGGY]  len  +=  chunkSeparator.length  /  2;  [BUGGY]  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  2;	len  +=  chunkSeparator.length;  	non-compiled	[CE]  ';'  expected	17	None	replace
