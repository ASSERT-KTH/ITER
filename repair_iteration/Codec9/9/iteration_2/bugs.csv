bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  len  +=  chunkSize  *  pArray.length;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  pArray.length;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
2	[BUG]  [BUGGY]  len  +=  pArray.length  *  chunkSeparator.length;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  pArray.length  *  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  pArray.length  *  chunkSeparator.length;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
3	[BUG]  [BUGGY]  Len  +=  pArray.length  *  chunkSeparator.length;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  pArray.length  *  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  pArray.length  *  chunkSeparator.length;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
4	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  pArray.length;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  pArray.length;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  pArray.length  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  pArray.length  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  pArray.length  +  1;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
6	[BUG]  [BUGGY]  Len  +=  chunkSize  *  pArray.length;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSize  *  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSize  *  pArray.length;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
7	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
8	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
9	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
10	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
11	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
12	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
13	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
14	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
15	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
16	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
17	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
18	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
19	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
20	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
21	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
23	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
24	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
25	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
28	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
29	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkS  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkS  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkS	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
30	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  pArray,  0,  chunkSize);  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(chunkSeparator,  0,  pArray,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(chunkSeparator,  0,  pArray,  0,  chunkSize);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  chunkSize);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  0,  chunkSize);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  lenChunksPerfectly);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  lenChunksPerfectly);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  chunkSeparator,  0,  lenChunksPerfectly);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  size);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  size);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  chunkSeparator,  0,  size);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray,  0,  chunkSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray,  0,  chunkSize);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
38	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
40	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
41	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
42	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
43	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  len  +=  chunkSize  -  1;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  1;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
47	[BUG]  [BUGGY]  len  +=  chunkSize  *  4;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  4;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
48	[BUG]  [BUGGY]  len  +=  chunkSize  *  2;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  2;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
49	[BUG]  [BUGGY]  len  -=  chunkSize;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSize;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSize;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
50	[BUG]  [BUGGY]  len  +=  chunkSize  /  2;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  /  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  /  2;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  len  +=  chunkSize.length  -  1;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  -  1;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
52	[BUG]  [BUGGY]  len  +=  chunkSize.length  *  4;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  *  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  *  4;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
53	[BUG]  [BUGGY]  len  +=  chunkSize.length  *  2;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  *  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  *  2;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
54	[BUG]  [BUGGY]  len  +=  chunkSize.length  -  2;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  -  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  -  2;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
55	[BUG]  [BUGGY]  len  +=  chunkSize.length  -  4;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  -  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  -  4;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
56	[BUG]  [BUGGY]  len  +=  chunkSize.length  /  2;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  /  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  /  2;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  len  +=  chunkSize.length  -  3;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  -  3;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  -  3;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  1;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  1;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
59	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  -  2;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  -  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  -  2;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
60	[BUG]  [BUGGY]  Len  +=  chunkSize  -  1;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSize  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSize  -  1;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
61	[BUG]  [BUGGY]  len  -=  chunkSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSeparator.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSeparator.length  -  1;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
62	[BUG]  [BUGGY]  len  +=  chunkSize  *  chunkSeparator.length  -  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  chunkSeparator.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  chunkSeparator.length  -  1;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
63	[BUG]  [BUGGY]  Len  +=  chunkSeparator.length  -  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSeparator.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSeparator.length  -  1;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
64	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  +  1);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  +  1);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  +  1);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
65	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  -  1);  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  -  1);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  -  1);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
66	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize,  len);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize,  len);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize,  len);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
67	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  *  4);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  *  4);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  *  4);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
68	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  -  2);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  -  2);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  -  2);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
69	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  *  2);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  *  2);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  *  2);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
70	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(len);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(len);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(len);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
71	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  +  2);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  +  2);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  +  2);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
72	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
73	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
74	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
75	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
76	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
77	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
78	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
79	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
80	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
81	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
82	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
84	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
85	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
86	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
87	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
88	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
89	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
90	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
91	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
92	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
93	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
94	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  3;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  3;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  3;	  len    +=    chunkSeparator.length    *    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
95	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  2L;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  2L;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  2L;	  len    +=    chunkSeparator.length    *    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
96	[BUG]  [BUGGY]  Len  +=  chunkSeparator.length  /  2;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSeparator.length  /  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSeparator.length  /  2;	  len    +=    chunkSeparator.length    *    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
97	[BUG]  [BUGGY]  len  +=  chunkSize  /  chunkSeparator.length;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  /  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  /  chunkSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
98	[BUG]  [BUGGY]  len  +=  length  -  chunkSeparator.length;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  length  -  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  length  -  chunkSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
99	[BUG]  [BUGGY]  len  +=  pArray.length  -  chunkSeparator.length;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  pArray.length  -  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  pArray.length  -  chunkSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
100	[BUG]  [BUGGY]  Len  +=  chunkSize  /  chunkSeparator.length;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSize  /  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSize  /  chunkSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
101	[BUG]  [BUGGY]  len  +=  chunkSize  %  chunkSeparator.length;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  %  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  %  chunkSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
102	[BUG]  [BUGGY]  Len  +=  chunkSize  -  lenChunksPerfectly.length;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSize  -  lenChunksPerfectly.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSize  -  lenChunksPerfectly.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
103	[BUG]  [BUGGY]  Len  +=  chunkSize  *  chunkSeparator.length;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSize  *  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSize  *  chunkSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
104	[BUG]  [BUGGY]  len  +=  pArray.length  *  4;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  pArray.length  *  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  pArray.length  *  4;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
105	[BUG]  [BUGGY]  len  -=  pArray.length;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  pArray.length;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
106	[BUG]  [BUGGY]  len  +=  chunkSize  -  pArray.length;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  pArray.length;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
107	[BUG]  [BUGGY]  len  +=  pArray.length  *  2;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  pArray.length  *  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  pArray.length  *  2;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
108	[BUG]  [BUGGY]  Len  +=  chunkSize;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSize;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSize;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
109	[BUG]  [BUGGY]  len  +=  pArray.length  -  1;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  pArray.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  pArray.length  -  1;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
110	[BUG]  [BUGGY]  len  +=  length  *  chunkSeparator.length;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  length  *  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  length  *  chunkSeparator.length;	  len    +=    chunkSize    *    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	16	None	replace
111	[BUG]  [BUGGY]  len  +=(chunkSize  -  chunkSize)*  chunkSeparator.length;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=(chunkSize  -  chunkSize)*  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=(chunkSize  -  chunkSize)*  chunkSeparator.length;	  len    +=    chunkSize    *    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	16	None	replace
112	[BUG]  [BUGGY]  len  +=(chunkSize  /  chunkSeparator.length)*  chunkSeparator.length;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=(chunkSize  /  chunkSeparator.length)*  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=(chunkSize  /  chunkSeparator.length)*  chunkSeparator.length;	  len    +=    chunkSize    *    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	16	None	replace
113	[BUG]  [BUGGY]  len  +=  chunkSize  *  LAST_CHUNK_SEPARATOR.length;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  LAST_CHUNK_SEPARATOR.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  LAST_CHUNK_SEPARATOR.length;	  len    +=    chunkSize    *    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	16	None	replace
114	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
115	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
116	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
117	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
118	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
119	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
120	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
121	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
122	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
123	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
124	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
125	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
126	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
127	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
128	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
129	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
130	[BUG]  [BUGGY]  len  -=  chunkSize.length;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSize.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSize.length;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
131	[BUG]  [BUGGY]  len  -=  chunkSeparator.length  +  1;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSeparator.length  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSeparator.length  +  1;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  len  -=  chunkSeparator.length  *  4;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSeparator.length  *  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSeparator.length  *  4;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
133	[BUG]  [BUGGY]  len  -=  chunkSeparator.length  *  2;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSeparator.length  *  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSeparator.length  *  2;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
134	[BUG]  [BUGGY]  Len  -=  chunkSeparator.length  +  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  -=  chunkSeparator.length  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  -=  chunkSeparator.length  +  1;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
135	[BUG]  [BUGGY]  len  -=  chunkSize  *  chunkSeparator.length;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  -=  chunkSize  *  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  -=  chunkSize  *  chunkSeparator.length;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
138	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
139	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  len);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  len);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  len);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
140	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  pArray.length);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  pArray.length);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  pArray.length);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
141	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray.length);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
142	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
143	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
144	[BUG]  [BUGGY]  if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
145	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
146	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
147	[BUG]  [BUGGY]  if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
148	[BUG]  [BUGGY]  if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
149	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
150	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
151	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
152	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
153	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
154	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
155	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  p	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
156	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
157	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
158	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
159	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
160	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
161	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
162	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  0,  pArray.length);  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  len,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  chunkSeparator.length);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  chunkSeparator.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  0,  chunkSeparator.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  pArray,  0,  pArray.length);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(chunkSeparator,  0,  pArray,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(chunkSeparator,  0,  pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  len.length);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  len.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  0,  len.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  pArray.length);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  len,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
170	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
171	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
172	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
173	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
174	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
175	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
176	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  4;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  4;	  len    +=    chunkSeparator.length    *    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
177	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  4  +  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  4  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  4  +  1;	  len    +=    chunkSeparator.length    *    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
178	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  4  +  2;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  4  +  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  4  +  2;	  len    +=    chunkSeparator.length    *    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
179	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  4  +  pArray.length;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  4  +  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  4  +  pArray.length;	  len    +=    chunkSeparator.length    *    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
180	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  8;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  8;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  8;	  len    +=    chunkSeparator.length    *    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
181	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.get(chunkSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.get(chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.get(chunkSize);	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
182	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.toArray(new  byte[pArray.length]);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.toArray(new  byte[pArray.length]);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.toArray(new  byte[pArray.length]);	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
183	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.cloneTree();  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.cloneTree();  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.cloneTree();	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
184	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])p.clone();  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])p.clone();  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])p.clone();	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
185	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.toArray();  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.toArray();  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.toArray();	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
186	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.remove(0);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.remove(0);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.remove(0);	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
187	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
188	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
189	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
190	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
191	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
192	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
193	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
194	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
195	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
196	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
197	[BUG]  [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  <  =  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
198	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
199	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray[i]);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray[i]);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray[i]);	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
201	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
202	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
203	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
204	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
205	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
206	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
207	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
208	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
209	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  array.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
210	[BUG]  [BUGGY]  Len  =  Math.min(len,  chunkSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  chunkSize);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
211	[BUG]  [BUGGY]  Len  =  Math.min(len,  chunkSeparator.length);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  chunkSeparator.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  chunkSeparator.length);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
212	[BUG]  [BUGGY]  Len  =  Math.min(len,  pArray.length  *  4);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  pArray.length  *  4);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  pArray.length  *  4);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
213	[BUG]  [BUGGY]  Len  =  Math.min(len,  pArray.length  +  1);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  pArray.length  +  1);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  pArray.length  +  1);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
214	[BUG]  [BUGGY]  Len  =  Math.min(len,  pArray.length  -  1);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  pArray.length  -  1);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  pArray.length  -  1);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
215	[BUG]  [BUGGY]  Len  =  Math.min(len,  chunkSize  -  pArray.length);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  chunkSize  -  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  chunkSize  -  pArray.length);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
216	[BUG]  [BUGGY]  Len  =  Math.min(len,  pArray.length  *  2);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  pArray.length  *  2);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  pArray.length  *  2);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
217	[BUG]  [BUGGY]  Len  =  Math.min(pArray.length,  len);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(pArray.length,  len);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(pArray.length,  len);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
218	[BUG]  [BUGGY]  Len  =  Math.min(len,  chunkSize  +  pArray.length);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  chunkSize  +  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  chunkSize  +  pArray.length);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
219	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  2  +  1;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  2  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  2  +  1;	  len    +=    chunkSeparator.length    /    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
220	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  2  *  4;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  2  *  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  2  *  4;	  len    +=    chunkSeparator.length    /    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
221	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  3;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  3;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  3;	  len    +=    chunkSeparator.length    /    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  chunkSeparator,  0,  pArray.length);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  chunkSeparator,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  chunkSeparator,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
223	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator,  0,  chunkSize);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
224	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
225	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
226	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
227	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p[i]);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
228	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  -  1L;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  -  1L;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  -  1L;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
229	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  -  3;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  -  3;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  -  3;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
230	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  -  4;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  -  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  -  4;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
231	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
232	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
233	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
234	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
235	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
236	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
237	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
238	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
240	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
241	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
242	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
243	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
244	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
245	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
246	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  array.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  array.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  array.length;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
247	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
248	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
249	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
250	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
251	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
252	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
253	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
254	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  1,  len);  }  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  1,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  1,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
255	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
256	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
257	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
258	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
259	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
260	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
261	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
262	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
263	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
264	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSeparator  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSeparator  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSeparator  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
265	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
266	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
267	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
268	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
269	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
270	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
271	[BUG]  [BUGGY]  len  +=  chunkSize.length  *  pArray.length;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize.length  *  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize.length  *  pArray.length;	  len    +=    chunkSize.length;    	non-compiled	[CE]  ';'  expected	12	None	replace
272	[BUG]  [BUGGY]  Len  +=  chunkSeparator.length  *  pArray.length;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSeparator.length  *  pArray.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSeparator.length  *  pArray.length;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
273	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
274	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
275	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i].length);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i].length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i].length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
276	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
277	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
278	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
279	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
280	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
281	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
282	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
283	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator.length);  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
284	[BUG]  [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  +  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  chunkSeparator.length  +  1;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
285	[BUG]  [BUGGY]  len  +=  chunkSize  -  fileSeparator.length;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  fileSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  fileSeparator.length;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
286	[BUG]  [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  *  4;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  *  4;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  chunkSeparator.length  *  4;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
287	[BUG]  [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  *  2;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  *  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  chunkSeparator.length  *  2;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
288	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
289	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
290	[BUG]  [BUGGY]  Arrays.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Arrays.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Arrays.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
291	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  len);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  len);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSize,  len);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
292	[BUG]  [BUGGY]  pArray  =  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  pArray  =  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	pArray  =  System.arraycopy(pArray,  0,  len,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
293	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
294	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
295	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
296	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  chunkSize  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
297	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
298	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
299	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
300	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
301	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.toArray(chunkSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.toArray(chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.toArray(chunkSize);	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
302	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.remove(chunkSize);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.remove(chunkSize);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.remove(chunkSize);	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
303	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pData.clone();  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pData.clone();  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pData.clone();	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
304	[BUG]  [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.get(chunkSize).clone();  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =(byte[])pArray.get(chunkSize).clone();  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =(byte[])pArray.get(chunkSize).clone();	      byte[]    chunkSeparator    =(byte[])pArray.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
305	[BUG]  [BUGGY]  len  +=  chunkSize  *  LAST_VALID_ENCODE_TABLE.length;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  LAST_VALID_ENCODE_TABLE.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  LAST_VALID_ENCODE_TABLE.length;	  len    +=    chunkSize    *    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	16	None	replace
306	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
307	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
308	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
309	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
310	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
311	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
312	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
313	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
314	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
316	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
317	[BUG]  [BUGGY]  Len  =  Math.min(chunkSize,  pArray.length);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(chunkSize,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(chunkSize,  pArray.length);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
318	[BUG]  [BUGGY]  Len  =  Math.min(0,  pArray.length);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(0,  pArray.length);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
319	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
320	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
321	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
322	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
323	[BUG]  [BUGGY]  Len  +=  chunkSeparator.length;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSeparator.length;	  len    +=    pArray.length;    	non-compiled	[CE]  ';'  expected	15	None	replace
324	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  2  +  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  2  +  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  2  +  1;	  len    +=    chunkSeparator.length    *    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
325	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  6;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  6;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  6;	  len    +=    chunkSeparator.length    *    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
326	[BUG]  [BUGGY]  len  +=  chunkSize  *  base64Data.length;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  base64Data.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  base64Data.length;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
327	[BUG]  [BUGGY]  len  +=  chunkSize  *  sourcePos;  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  sourcePos;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  sourcePos;	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
328	[BUG]  [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
329	[BUG]  [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize!=  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
330	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
331	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
332	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
333	[BUG]  [BUGGY]  Len  -=  chunkSeparator.length;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  -=  chunkSeparator.length;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  -=  chunkSeparator.length;	  len    -=    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	13	None	replace
334	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  /  2L;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  /  2L;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  /  2L;	  len    +=    chunkSeparator.length    /    2;    	non-compiled	[CE]  ';'  expected	34	None	replace
335	[BUG]  [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  -  4);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  byte[]  chunkSeparator  =  pArray.get(chunkSize  -  4);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	byte[]  chunkSeparator  =  pArray.get(chunkSize  -  4);	      byte[]    chunkSeparator    =    pArray.get(chunkSize);    	non-compiled	[CE]  ';'  expected	28	None	replace
336	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
337	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
338	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
339	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  len);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    len);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
340	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
341	[BUG]  [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
342	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
343	[BUG]  [BUGGY]  Len  +=  chunkSeparator.length  /  1;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  +=  chunkSeparator.length  /  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  +=  chunkSeparator.length  /  1;	  len    +=    chunkSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	14	None	replace
344	[BUG]  [BUGGY]  len  +=  chunkSize  *  Arrays.asList(pArray);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  Arrays.asList(pArray);  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  Arrays.asList(pArray);	  len    +=    chunkSize;    	non-compiled	[CE]  ';'  expected	11	None	replace
345	[BUG]  [BUGGY]  len  +=  chunkSize  *  chunkSeparator.length  /  2;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  *  chunkSeparator.length  /  2;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  *  chunkSeparator.length  /  2;	  len    +=    chunkSize    *    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	16	None	replace
346	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
347	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
348	[BUG]  [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  ==  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
349	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  p  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
350	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
351	[BUG]  [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
352	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
353	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  pArray.length;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
354	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
355	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  p[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  p[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  p[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
356	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i].length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i].length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray[i].length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
357	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  p  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  p  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  p	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	24	None	replace
358	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
359	[BUG]  [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
360	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSeparator;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
361	[BUG]  [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  lenChunksPerfectly;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
362	[BUG]  [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(pArray.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    lenChunksPerfectly;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	2	None	replace
363	[BUG]  [BUGGY]  if(lenChunksPerfectly)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(lenChunksPerfectly)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(lenChunksPerfectly)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  System.arraycopy(pArray,  0,  chunkSeparator,  0,  chunkSize);  }	      if(chunkSize    >    0)    {    System.arraycopy(pArray,    0,    len,    chunkSize);    System.arraycopy(pArray,    0,    chunkSeparator,    0,    chunkSize);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
364	[BUG]  [BUGGY]  Len  =  Math.min(len,  pArray.length  -  2);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Len  =  Math.min(len,  pArray.length  -  2);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Len  =  Math.min(len,  pArray.length  -  2);	      Len    =    Math.min(len,    pArray.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
365	[BUG]  [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
366	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	3	None	replace
367	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
368	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
369	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
370	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
371	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
372	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  ++i)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    ++i)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	29	None	replace
373	[BUG]  [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
374	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  LAST_CHUNK_SIZE;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray,  0,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray,    0,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
375	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
376	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
377	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
378	[BUG]  [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator.length  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
379	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i].length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i].length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray[i].length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
380	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p[i]);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p[i]);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  p[i]);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
381	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  4  -  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  4  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  4  -  1;	  len    +=    chunkSeparator.length    *    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
382	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
383	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  pArray[i].length;  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
384	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray.length];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray.length];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  chunkSeparator[i]  =  new  byte[pArray.length];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	4	None	replace
385	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
386	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
387	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSeparator.length;  i  <  len;  ++i)  {  System.arraycopy(pArray,  0,  chunkSeparator,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    ++i)    {    System.arraycopy(pArray,    0,    chunkSeparator,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
388	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator,  0,  pArray.length);  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator,  0,  pArray.length);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	System.arraycopy(pArray,  0,  pArray,  len,  chunkSeparator,  0,  pArray.length);	      System.arraycopy(pArray,    0,    len,    chunkSeparator,    0,    chunkSize);    	non-compiled	[CE]  ';'  expected	21	None	replace
389	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  chunkSize;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i];  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
390	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].length;  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
391	[BUG]  [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator!=  null)  {  for(int  i  =  0,  len  =  pArray.length;  i  <  len;  i++)  {  chunkSeparator[i]  =  pArray[i].getBytes();  }	      if(chunkSize    >    0)    {    for(int    i    =    0,    len    =    pArray.length;    i    <    len;    i++)    {    chunkSeparator[i]    =    pArray[i];    }    	non-compiled	[CE]  ';'  expected	8	None	replace
392	[BUG]  [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSeparator  ==  null)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray.length,  pArray.length,  pArray.length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray.length,    pArray.length,    pArray.length);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
393	[BUG]  [BUGGY]  len  +=  chunkSeparator.length  *  pArray.length  -  1;  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSeparator.length  *  pArray.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSeparator.length  *  pArray.length  -  1;	  len    +=    chunkSeparator.length    *    pArray.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
394	[BUG]  [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  -  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  len  +=  chunkSize  -  chunkSeparator.length  -  1;  [BUGGY]    }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	len  +=  chunkSize  -  chunkSeparator.length  -  1;	  len    +=    chunkSize    -    chunkSeparator.length;    	non-compiled	[CE]  ';'  expected	17	None	replace
395	[BUG]  [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i].length);  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i].length);  }  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	if(chunkSize  >  0)  {  for(int  i  =  0;  i  <  chunkSize;  i++)  {  System.arraycopy(pArray,  0,  len,  pArray[i].length);  }	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
396	[BUG]  [BUGGY]  Arrays.arraycopy(pArray,  0,  len,  pArray[i]);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]    long  len  =  (pArray.length  *  4)  /  3;  long  mod  =  len  %  4;  if  (mod  !=  0)  {  len  +=  4  -  mod;  }  if  (chunkSize  >  0)  {  boolean  lenChunksPerfectly  =  len  %  chunkSize  ==  0;  len  +=  (len  /  chunkSize)  *  chunkSeparator.length;  if  (!lenChunksPerfectly)  {    [BUGGY]  Arrays.arraycopy(pArray,  0,  len,  pArray[i]);  [BUGGY]    len  +=  chunkSeparator.length;  }  }  return  len;  }  [CLASS]  Base64  [METHOD]  getEncodeLength  [RETURN_TYPE]  long  byte[]  pArray  int  chunkSize  byte[]  chunkSeparator  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  chunkSeparator  data  encodeTable  groomedData  in  lineSeparator  pArray  packedData  result  boolean  eof  isChunked  lenChunksPerfectly  urlSafe  byte  PAD  b  byteToCheck  octet  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  bytesCopied  chunkSize  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  pos  readPos  result  x  long  len  mod  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2182178902359924	982	982	1	replace	Arrays.arraycopy(pArray,  0,  len,  pArray[i]);	      if(chunkSize    >    0)    {    for(int    i    =    0;    i    <    chunkSize;    i++)    {    System.arraycopy(pArray,    0,    len,    pArray[i]);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
