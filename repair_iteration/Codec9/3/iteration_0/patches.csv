bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    buffer[pos++]  =  PAD;  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  PAD;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
2	[BUG]  [BUGGY]    buffer[pos++]  =  STANDARD_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  STANDARD_ENCODE_TABLE;  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  STANDARD_ENCODE_TABLE;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
3	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
4	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
5	[BUG]  [BUGGY]    buffer[pos++]  =  DECODE_TABLE;  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  DECODE_TABLE;  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  DECODE_TABLE;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
6	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]    buffer[pos++]  =  b;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  b;  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  b;		non-compiled	[CE]  illegal  start  of  expression	6	None	add
8	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  buffer[pos++]  =  MASK_6BITS;  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  MASK_6BITS;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MASK_6BITS;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  buffer[pos++]  =  x;  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  x;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  buffer[pos++]  =  module;  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  module;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  module;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  buffer[pos++]  =  0;  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  0;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  0;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
16	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
17	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  buffer[pos++]  =  DECEDE_TABLE;  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  DECEDE_TABLE;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECEDE_TABLE;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE;  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  TABLE;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_TABLE;  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_TABLE;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_TABLE;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_8BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_8BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
22	[BUG]  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]    buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_7BITS];  [BUGGY]  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	    buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_7BITS];		non-compiled	[CE]  illegal  start  of  expression	6	None	add
23	[BUG]  [BUGGY]  buffer[pos++]  =  VISIBILITY;  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  VISIBILITY;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  VISIBILITY;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Input  array  too  big  [CONTEXT]  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE;  [BUGGY]  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE;	buffer[pos++]  =  PAD;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
