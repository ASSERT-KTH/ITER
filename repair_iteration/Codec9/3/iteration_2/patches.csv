bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    32)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	30	None	replace
2	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  32)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  32)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >=  32)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    32)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
3	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PAD  |  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PAD  |  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
4	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  &  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  &  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR  &  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
5	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE  |  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE  |  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PEM_CHUNK_SIZE  |  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
6	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR  |  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
7	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
8	[BUG]  [BUGGY]  buffer[pos++]  =  MASK_8BITS  |  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MASK_8BITS  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MASK_8BITS  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
9	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
10	[BUG]  [BUGGY]  buffer[pos++]  =  x  |  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
11	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  |  PEM_CHUNK_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  |  PEM_CHUNK_SIZE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR  |  PEM_CHUNK_SIZE  +  1;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
12	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
13	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
14	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  CHUNK_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  CHUNK_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  +  CHUNK_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
15	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
16	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
17	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
18	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
19	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
20	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    24)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
21	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  PEM_CHUNK_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PAD;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PAD;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PAD;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SEPARATOR;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
26	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
27	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
28	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
29	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
30	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
31	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
32	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
33	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_TABLE;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_TABLE;	  buffer[pos++]    =    BYTE_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
34	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >=    3)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
35	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE_SEPARATOR;	  buffer[pos++]    =    TABLE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
36	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE_ENCODE_TABLE;	  buffer[pos++]    =    TABLE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
37	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  +  1;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PAD  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PAD  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
38	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  1;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  2;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  2;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  2;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
40	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  3;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  3;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  3;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
41	[BUG]  [BUGGY]  buffer[pos++]  =  MASK_6BITS  +  1;  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MASK_6BITS  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MASK_6BITS  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ')'  expected	19	None	replace
42	[BUG]  [BUGGY]  buffer[pos++]  =  x  +  1;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
43	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  +  4;  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PAD  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PAD  +  4;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    4;    	non-compiled	[CE]  ')'  expected	18	None	replace
44	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  4;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  +  4;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    4;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
45	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  1;	  buffer[pos++]    =    DEFAULT_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  2;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  2;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  2;	  buffer[pos++]    =    DEFAULT_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  4;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  4;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_SIZE  +  4;	  buffer[pos++]    =    DEFAULT_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  PEM_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  |  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
49	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_TABLE  &  PEM_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_TABLE  &  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_TABLE  &  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
50	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_TABLE  :  PEM_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_TABLE  :  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_TABLE  :  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
51	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  MIME_CHUNK_TABLE;  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
52	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  MIME_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  |  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
53	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  PEM_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  &  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
54	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_TABLE;  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
55	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  MIME_CHUNK_TABLE;  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  |  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	12	None	replace
56	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)    &    MASK_8BITS];    	non-compiled	[CE]  ')'  expected	60	None	replace
57	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_8BITS];  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)    &    MASK_8BITS];    	non-compiled	[CE]  ')'  expected	60	None	replace
58	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ')'  expected	8	None	replace
59	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  4;  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  4;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  4;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ')'  expected	8	None	replace
60	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  1;  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  1;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ')'  expected	8	None	replace
61	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR  +  1;  [CE]  ')'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR  +  1;	  buffer[pos++]    =    DEFAULT_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  ')'  expected	10	None	replace
62	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_ENCODE_TABLE  ||  DETECTED_ENCODE_TABLE;  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DETECTED_ENCODE_TABLE  ||  DETECTED_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DETECTED_ENCODE_TABLE  ||  DETECTED_ENCODE_TABLE;	  buffer[pos++]    =    DETECTED_ENCODE_TABLE;    	non-compiled	[CE]  ')'  expected	47	None	replace
63	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_CODE_TABLE;  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DETECTED_CODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DETECTED_CODE_TABLE;	  buffer[pos++]    =    DETECTED_ENCODE_TABLE;    	non-compiled	[CE]  ')'  expected	47	None	replace
64	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_STANDARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DETECTED_STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DETECTED_STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    DETECTED_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	47	None	replace
65	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_ENCODE_TABLE  ||  DECODE_TABLE;  [CE]  ')'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DETECTED_ENCODE_TABLE  ||  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DETECTED_ENCODE_TABLE  ||  DECODE_TABLE;	  buffer[pos++]    =    DETECTED_ENCODE_TABLE;    	non-compiled	[CE]  ')'  expected	47	None	replace
66	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DETECTED_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DETECTED_CHUNK_SEPARATOR;	  buffer[pos++]    =    DETECTED_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	47	None	replace
67	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
68	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
69	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
70	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
71	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
72	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
73	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  CHUNK_SIZE;  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ')'  expected	67	None	replace
74	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
75	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  DEFAULT_BUFFER_SIZE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  DEFAULT_BUFFER_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  DEFAULT_BUFFER_SIZE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
76	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_ENCODE_TABLE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  not  a  statement	59	None	replace
77	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  STANDARD_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  STANDARD_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  not  a  statement	59	None	replace
78	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SAFE_TABLE;  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_SAFE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_SAFE_TABLE;	  buffer[pos++]    =    BYTE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ')'  expected	62	None	replace
79	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  PEM_CHUNK_SEPARATOR;  [CE]  ')'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ')'  expected	13	None	replace
80	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  MIME_CHUNK_TABLE;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  +  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
81	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  +  MIME_CHUNK_TABLE;  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PAD  +  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PAD  +  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  not  a  statement	13	None	replace
82	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  +  MIME_CHUNK_TABLE;  [CE]  'else'  without  'if'  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  +  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR  +  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
83	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  +  MIME_CHUNK_SEPARATOR;  [CE]  'else'  without  'if'  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PAD  +  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PAD  +  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
84	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  MIME_CHUNK_SEPARATOR;  [CE]  'else'  without  'if'  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  +  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
85	[BUG]  [BUGGY]  buffer[pos++]  =  x  +  PEM_CHUNK_SEPARATOR;  [CE]  'else'  without  'if'  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
86	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  PEM_CHUNK_SEPARATOR;  [CE]  'else'  without  'if'  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
87	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
88	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
89	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
90	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  'else'  without  'if'  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
91	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_8BITS];  [CE]  'else'  without  'if'  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    MASK_7BITS];    	non-compiled	[CE]  'else'  without  'if'	41	None	replace
92	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  'else'  without  'if'  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
93	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [CE]  'else'  without  'if'  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
94	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  'else'  without  'if'  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
95	[BUG]  [BUGGY]  buffer[pos++]  =  DECEIVER_TABLE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECEIVER_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECEIVER_TABLE;	  buffer[pos++]    =    DECEIVER_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
96	[BUG]  [BUGGY]  buffer[pos++]  =  DECEIVER_TYPE;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECEIVER_TYPE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECEIVER_TYPE;	  buffer[pos++]    =    DECEIVER_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
97	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
98	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
99	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
100	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
101	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
102	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
103	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
104	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MASK_8BITS  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MASK_8BITS  :  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MASK_8BITS  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
105	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
106	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
107	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
108	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  2;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  2;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  2;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
109	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  4;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  4;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  4;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
110	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
111	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  3;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  3;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  3;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
112	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
113	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  6;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  6;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  6;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
114	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  PEM_CHUNK_TABLE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  PEM_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  PEM_CHUNK_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  ';'  expected	11	None	replace
115	[BUG]  [BUGGY]  buffer[pos++]  =  dECODE_TABLE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  dECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  dECODE_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  ';'  expected	11	None	replace
116	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PEM_CHUNK_TABLE;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PEM_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PEM_CHUNK_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
117	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  PAD  :  PEM_CHUNK_TABLE;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  PAD  :  PEM_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  PAD  :  PEM_CHUNK_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  ';'  expected	11	None	replace
118	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
119	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
120	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
121	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
122	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MASK_6BITS;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MASK_6BITS;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MASK_6BITS;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
123	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MIME_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MIME_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MIME_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
124	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
125	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
126	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	66	None	replace
127	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	66	None	replace
128	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	66	None	replace
129	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	66	None	replace
130	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	66	None	replace
131	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  4;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  +  4;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
132	[BUG]  [BUGGY]  buffer[pos++]  =  x  +  4;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  +  4;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
133	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	12	None	replace
134	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  MIME_CHUNK_TABLE;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  PAD  |  MIME_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  PAD  |  MIME_CHUNK_TABLE;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	12	None	replace
135	[BUG]  [BUGGY]  buffer[pos++]  =  x  |  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  |  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  |  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	12	None	replace
136	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE  |  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE  |  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE  |  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	12	None	replace
137	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
138	[BUG]  [BUGGY]  buffer[pos++]  =  DECEDE_TABLE  +  1;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECEDE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECEDE_TABLE  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
139	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  +  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
140	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
141	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  HEAD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  HEAD_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  HEAD_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
142	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  MASK_8BITS;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  MASK_8BITS;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  MASK_8BITS;	  buffer[pos++]    =    MASK_8BITS;    	non-compiled	[CE]  ';'  expected	6	None	replace
143	[BUG]  [BUGGY]  buffer[pos++]  =  MASK_8BITS  &  MIME_CHUNK_SIZE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MASK_8BITS  &  MIME_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MASK_8BITS  &  MIME_CHUNK_SIZE;	  buffer[pos++]    =    MASK_8BITS;    	non-compiled	[CE]  ';'  expected	6	None	replace
144	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
145	[BUG]  [BUGGY]  buffer[pos++]  =  bAvail  |  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  bAvail  |  MIME_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  bAvail  |  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
146	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  8;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  8;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  8;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
147	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  *  1;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  *  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  *  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
148	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_9BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_9BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_9BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	60	None	replace
149	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MIME_CHUNK_SIZE];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MIME_CHUNK_SIZE];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MIME_CHUNK_SIZE];	  buffer[pos++]    =    encodeTable[(x    >>    18)    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	60	None	replace
150	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  0];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  0];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  0];	  buffer[pos++]    =    encodeTable[(x    >>    18)    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	60	None	replace
151	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_TABLE;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DETECTED_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DETECTED_TABLE;	  buffer[pos++]    =    DETECTED_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	47	None	replace
152	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  &  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  &  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  &  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	8	None	replace
153	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  3;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  3;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  3;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	8	None	replace
154	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  2;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  2;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  2;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	8	None	replace
155	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR;    	non-compiled	[CE]  ';'  expected	52	None	replace
156	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE_CHUNK_SEPARATOR;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	14	None	replace
157	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BACKSLASH;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DEFAULT_BACKSLASH;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DEFAULT_BACKSLASH;	  buffer[pos++]    =    DEFAULT_BUFFER_RESIZE;    	non-compiled	[CE]  ';'  expected	9	None	replace
158	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_SIZE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_BUFFER_SIZE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  ';'  expected	59	None	replace
159	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  1;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  ';'  expected	59	None	replace
160	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	13	None	replace
161	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
162	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
163	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	67	None	replace
164	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_TABLE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_CHUNK_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  ';'  expected	11	None	replace
165	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	12	None	replace
166	[BUG]  [BUGGY]  buffer[pos++]  =  bAvail  |  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  bAvail  |  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  bAvail  |  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    |    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	12	None	replace
167	[BUG]  [BUGGY]  buffer[pos++]  =  VISIBILITY_SEPARATOR;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  VISIBILITY_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  VISIBILITY_SEPARATOR;	  buffer[pos++]    =    CACHE_SEPARATOR;    	non-compiled	[CE]  ';'  expected	24	None	replace
168	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CACHE_SEPARATOR;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CACHE_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  CACHE_SEPARATOR;	  buffer[pos++]    =    CACHE_SEPARATOR;    	non-compiled	[CE]  ';'  expected	24	None	replace
169	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CACHE_SEPARATOR  :  PAD;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CACHE_SEPARATOR  :  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  CACHE_SEPARATOR  :  PAD;	  buffer[pos++]    =    CACHE_SEPARATOR;    	non-compiled	[CE]  ';'  expected	24	None	replace
170	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SEPARATOR;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	55	None	replace
171	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	55	None	replace
172	[BUG]  [BUGGY]  buffer[pos++]  =  DECEIVER;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECEIVER;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECEIVER;	  buffer[pos++]    =    CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	50	None	replace
173	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE  +  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_TABLE    +    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	13	None	replace
174	[BUG]  [BUGGY]  buffer[pos++]  =  module  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  module  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  module  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
175	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SEPARATOR;	  buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	22	None	replace
176	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  CHUNK_SEPARATOR;	  buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	22	None	replace
177	[BUG]  [BUGGY]  buffer[pos++]  =  bAvail  |  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  bAvail  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  bAvail  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
178	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
179	[BUG]  [BUGGY]  buffer[pos++]  =  x  <  <  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  <  <  PEM_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  <  <  PEM_CHUNK_SIZE;	  buffer[pos++]    =    MIME_CHUNK_SEPARATOR    |    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	68	None	replace
180	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_SIZE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	23	None	replace
181	[BUG]  [BUGGY]  buffer[pos++]  =  DECEIVER_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECEIVER_CHUNK_SIZE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECEIVER_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	23	None	replace
182	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_SCALE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  TABLE_SCALE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  TABLE_SCALE_ENCODE_TABLE;	  buffer[pos++]    =    TABLE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	63	None	replace
183	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SECOND;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SECOND;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SECOND;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	66	None	replace
184	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SCALE_TABLE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_SCALE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_SCALE_TABLE;	  buffer[pos++]    =    BYTE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	62	None	replace
185	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DECODE_TABLE  :  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DECODE_TABLE  :  PEM_CHUNK_SEPARATOR;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  DECODE_TABLE  :  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	14	None	replace
186	[BUG]  [BUGGY]  buffer[pos++]  =  x  |  BYTE_ENCODE_TABLE  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  x  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  x  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
187	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
188	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE  +  1;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE  +  1;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE  +  1;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	65	None	replace
189	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE?  STANDARD_ENCODE_TABLE  :  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE?  STANDARD_ENCODE_TABLE  :  BYTE_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE?  STANDARD_ENCODE_TABLE  :  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
190	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE;  [BUGGY]      }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	455	455	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	20	None	replace
