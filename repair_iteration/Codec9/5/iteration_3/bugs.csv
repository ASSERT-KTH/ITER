bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	68	None	replace
2	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  	68	None	replace
3	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  	68	None	replace
4	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  	68	None	replace
5	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  	68	None	replace
6	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  	68	None	replace
7	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  	68	None	replace
8	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  8)&  MASK_8BITS];  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  8)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  8)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  	47	None	replace
9	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    6)&    MASK_6BITS];    	non-compiled	[CE]  	28	None	replace
10	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_8BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  	59	None	replace
11	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  	59	None	replace
12	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  	59	None	replace
13	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  20)&  MASK_6BITS];  [CE]  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  20)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  20)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  	59	None	replace
14	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	67	None	replace
15	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	67	None	replace
16	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	67	None	replace
17	[BUG]  [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	67	None	replace
18	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	67	None	replace
19	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	67	None	replace
20	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];  [CE]  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_8BITS];    	non-compiled	[CE]  	23	None	replace
21	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_8BITS];  [CE]  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_8BITS];    	non-compiled	[CE]  	23	None	replace
22	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_8BITS];  [CE]  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    1)&    MASK_6BITS];    	non-compiled	[CE]  	40	None	replace
23	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_8BITS];  [CE]  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    1)&    MASK_6BITS];    	non-compiled	[CE]  	40	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  5)&  MASK_8BITS];  [CE]  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  5)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    5)&    MASK_6BITS];    	non-compiled	[CE]  	51	None	replace
25	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	63	None	replace
26	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	63	None	replace
27	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	69	None	replace
28	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	69	None	replace
29	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	69	None	replace
30	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  [CE]  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	69	None	replace
31	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	69	None	replace
32	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [CE]  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	69	None	replace
33	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  2)&  MASK_8BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  2)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  2)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    2)&    MASK_6BITS];    	non-compiled	[CE]  	46	None	replace
34	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS];  [CE]  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    8)&    MASK_8BITS];    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];  [CE]  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    8)&    MASK_8BITS];    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_8BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    8)&    MASK_8BITS];    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	60	None	replace
38	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  [CE]  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	60	None	replace
39	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	60	None	replace
40	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	60	None	replace
41	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	60	None	replace
42	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	60	None	replace
43	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	57	None	replace
44	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	57	None	replace
45	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	57	None	replace
46	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	57	None	replace
47	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  [CE]  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	57	None	replace
48	[BUG]  [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  [CE]  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  	57	None	replace
49	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];  [CE]  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  	50	None	replace
50	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_8BITS];  [CE]  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  	50	None	replace
51	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  32)&  MASK_6BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  32)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  32)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  	50	None	replace
52	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_8BITS];  [CE]  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_8BITS];    	non-compiled	[CE]  	25	None	replace
53	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  6)&  MASK_8BITS];  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  6)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  6)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  	43	None	replace
54	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_8BITS];  [CE]  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_8BITS];    	non-compiled	[CE]  	10	None	replace
55	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	10	None	replace
56	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	10	None	replace
57	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    5)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
58	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  3)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  3)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	45	None	replace
59	[BUG]  [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	64	None	replace
60	[BUG]  [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	64	None	replace
61	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
63	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
64	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
65	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	52	None	replace
66	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
67	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
68	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
69	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
70	[BUG]  [BUGGY]  bucket[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  bucket[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	bucket[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
71	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
72	[BUG]  [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  2)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
73	[BUG]  [BUGGY]  if(inPos  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inPos  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inPos  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
74	[BUG]  [BUGGY]  if(inAvail  <  1)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  1)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  1)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
75	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
76	[BUG]  [BUGGY]  if(inAvail  <  1)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  1)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  1)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
77	[BUG]  [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	66	None	replace
78	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    7)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	13	None	replace
79	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
80	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
81	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
84	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
85	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
86	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    12)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	49	None	replace
87	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  12)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  12)&  MASK_8BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  12)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    12)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	49	None	replace
88	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  64)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  64)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  64)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    32)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
89	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
90	[BUG]  [BUGGY]  if(encodeSize)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeSize)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeSize)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
91	[BUG]  [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
92	[BUG]  [BUGGY]  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
93	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  18)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  18)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  18)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	50	None	replace
94	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  10)  &  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  10)  &  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  10)  &  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	46	None	replace
95	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	68	None	replace
96	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
97	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
98	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
99	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
100	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
101	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
102	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
103	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
104	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	52	None	replace
105	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
106	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	67	None	replace
107	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	53	None	replace
108	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  7)&  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  7)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	47	None	replace
109	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	63	None	replace
110	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	63	None	replace
111	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
112	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
113	[BUG]  [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
114	[BUG]  [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
115	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
116	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	69	None	replace
117	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	69	None	replace
118	[BUG]  [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  >  0)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	69	None	replace
119	[BUG]  [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(eof)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	66	None	replace
120	[BUG]  [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail  <  0)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
121	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    7)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	13	None	replace
122	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6  &  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6  &  MASK_6BITS];  [BUGGY]        if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6  &  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	43	None	replace
123	[BUG]  [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	70	None	replace
124	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
125	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
126	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	62	None	replace
127	[BUG]  [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	63	None	replace
128	[BUG]  [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	63	None	replace
129	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	36	None	replace
130	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
131	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
132	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
133	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	56	None	replace
134	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
135	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
136	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
137	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	66	None	replace
138	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
139	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
140	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
141	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	55	None	replace
142	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)|  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >=    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	29	None	replace
143	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	54	None	replace
144	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	68	None	replace
145	[BUG]  [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	67	None	replace
146	[BUG]  [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	67	None	replace
147	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	53	None	replace
148	[BUG]  [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	69	None	replace
149	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
150	[BUG]  [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(encodeTable!=  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    DECODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	65	None	replace
151	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
152	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(inAvail)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
153	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	60	None	replace
154	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  }	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
155	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  }	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
156	[BUG]  [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]        if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];      [BUGGY]  if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(inAvail)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	52	None	replace
