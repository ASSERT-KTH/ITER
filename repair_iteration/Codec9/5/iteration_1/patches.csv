bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    ==    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	18	None	replace
2	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    ==    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	18	None	replace
3	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    ==    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	18	None	replace
4	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    ==    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	18	None	replace
5	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	20	None	replace
6	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
7	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
8	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
9	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
10	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
11	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
12	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
13	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	24	None	replace
14	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  7)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    7)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
17	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
18	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
19	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	15	None	replace
20	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
23	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	13	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
27	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
28	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	1	None	replace
29	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
30	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
31	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
32	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  2)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  ==  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
33	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  2)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x!=  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
34	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
35	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	21	None	replace
37	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
38	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
40	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    1)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	10	None	replace
41	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    1)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	10	None	replace
42	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  1)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  1)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  1)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    1)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	10	None	replace
43	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  6)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  6)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
44	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  4)&  MASK_8BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
45	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  3)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  3)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
46	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  2)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  2)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
47	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  8)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  8)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
48	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	16	None	replace
49	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  12)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  12)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
50	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  16)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
51	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  5)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(y  >>  5)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(y    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	26	None	replace
52	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  	23	None	replace
53	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
54	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
55	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
56	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
57	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
58	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	1	None	replace
59	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_6BITS];  [BUGGY]      if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    [Delete]    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	14	None	replace
60	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	21	None	replace
61	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_6BITS];  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    7)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
62	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
63	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	21	None	replace
64	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	21	None	replace
65	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [CE]  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  6)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  	21	None	replace
66	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [CE]  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  	25	None	replace
67	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	25	None	replace
68	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
69	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	23	None	replace
70	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Input  array  too  big    [CONTEXT]      if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];    [BUGGY]  if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }  [BUGGY]    buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	451	451	1	replace	if(inAvail)  {  if(encodeTable  ==  DECODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  8)&  MASK_6BITS];  }	      if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
