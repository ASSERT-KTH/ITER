bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  inAvail  =  System.currentTimeMillis();  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  Integer  inAvail  =  System.currentTimeMillis();  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	Integer  inAvail  =  System.currentTimeMillis();	  inAvail    =    System.currentTimeMillis()    -    3;    	non-compiled	[CE]  ';'  expected	72	None	replace
2	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  16)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  16)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  16)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    16)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	38	None	replace
3	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    16)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	38	None	replace
4	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	54	None	replace
5	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  ==  10)&  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	54	None	replace
6	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x!=  10)&  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	54	None	replace
7	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)|  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	54	None	replace
8	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  12)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  12)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  12)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >=    12)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	35	None	replace
9	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)|  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    8)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	55	None	replace
10	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  8)|  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    8)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	55	None	replace
11	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)|  MASK_8BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)|  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)|  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    8)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	55	None	replace
12	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  8)|  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    8)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	55	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  inAvail  +  1);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  2,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  2,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  2,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  1,  inAvail);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(in,  0,  buffer,  1,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(in,  0,  buffer,  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  x);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  x);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  x);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  encodeSize);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  1,  inAvail);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  1,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(inAvail,  0,  buffer,  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  pos);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  pos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  pos);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
20	[BUG]  [BUGGY]  inAvail  =  System.currentTimeMillis()  /  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  inAvail  =  System.currentTimeMillis()  /  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	inAvail  =  System.currentTimeMillis()  /  1;	  inAvail    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  ';'  expected	65	None	replace
21	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
22	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
23	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
26	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
27	[BUG]  [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bucket[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
28	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	80	None	replace
29	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >=    2)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	83	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  1,  inAvail);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  1,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2,  inAvail);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  2,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  1,  inAvail  +  1);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  1,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  1,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  0,  inAvail);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  0,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  0,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  1,  encodeSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  1,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  1,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  encodeSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	42	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  x);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  x);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  x);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	42	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	42	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  pos);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  pos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  pos);	  System.arraycopy(buffer,    0,    buffer,    pos,    3);    	non-compiled	[CE]  ';'  expected	49	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  module.length);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  module.length);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  module.length);	  System.arraycopy(buffer,    0,    buffer,    pos,    3);    	non-compiled	[CE]  ';'  expected	49	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  size);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  size);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  size);	  System.arraycopy(buffer,    0,    buffer,    pos,    3);    	non-compiled	[CE]  ';'  expected	49	None	replace
42	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    3)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    1)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	28	None	replace
44	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  1)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    1)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	28	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	84	None	replace
46	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
47	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
49	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	6	None	replace
50	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    2)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	56	None	replace
51	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
52	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  }	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	57	None	replace
53	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  18)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  18)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  18)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	37	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  1);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  -  inPos);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  -  inPos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  inAvail  -  inPos);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  0,  inAvail);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(in,  0,  buffer,  0,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(in,  0,  buffer,  0,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  2);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  2);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  2);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  -  1);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  -  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  inAvail  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  0,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  0,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(inAvail,  0,  buffer,  0,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  3);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  3);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  3);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  4);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  4);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  inAvail  +  4);	  System.arraycopy(buffer,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  ';'  expected	41	None	replace
62	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	18	None	replace
63	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_7BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x!=    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	34	None	replace
64	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10  &  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10  &  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10  &  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    2    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	79	None	replace
65	[BUG]  [BUGGY]  eof  =  false;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  false;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  false;	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
66	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  inAvail,  0,  buffer.length);  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  inAvail,  0,  buffer.length);  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  inAvail,  0,  buffer.length);  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
67	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  0,  buffer.length  -  pos);  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  0,  buffer.length  -  pos);  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  0,  buffer.length  -  pos);  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
68	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  0,  buffer.length);  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  0,  buffer.length);  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  0,  buffer.length);  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
69	[BUG]  [BUGGY]  if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  null;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  null;  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  null;  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
70	[BUG]  [BUGGY]  if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
71	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  null;  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  null;  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  null;  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
72	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  inAvail,  inAvail);  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  inAvail,  inAvail);  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  buffer[pos++]  =  System.arraycopy(x,  inAvail,  inAvail);  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
73	[BUG]  [BUGGY]  if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail  >=  0)  {  eof  =  true;  }  else  {  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_8BITS];  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(in,  0,  buffer,  inPos,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(in,  0,  buffer,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(inAvail,  0,  buffer,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(inPos,  0,  buffer,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  pos);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  pos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  pos);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
78	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  5)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
79	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
80	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
81	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x!=  5)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
82	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  10];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  10];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  10];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
83	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  4];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  4];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  4];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
84	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  16];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  12)&  16];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  12)&  16];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
85	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  16];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  16];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  16];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  32);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  32);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  32);	  System.arraycopy(buffer,    0,    buffer,    pos,    4);    	non-compiled	[CE]  ';'  expected	87	None	replace
87	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  +  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  +  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  +  1;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
88	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  +  2;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  +  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  +  2;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
89	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  +  3;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  +  3;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  +  3;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
90	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  +  4;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  +  4;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  +  4;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
91	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  -  1;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  -  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  -  1;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
92	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  +  1000;  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  +  1000;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  +  1000;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
93	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  *  2;  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  *  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  *  2;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
94	[BUG]  [BUGGY]  inAvail  =  System.currentTimeMillis()  /  2;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  inAvail  =  System.currentTimeMillis()  /  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	inAvail  =  System.currentTimeMillis()  /  2;	  inAvail    =    System.currentTimeMillis()    -    2;    	non-compiled	[CE]  ';'  expected	67	None	replace
95	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	40	None	replace
96	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
97	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  encodeSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  module);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  module);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  1,  module);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  2);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
102	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	12	None	replace
103	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  ==  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	12	None	replace
104	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  5)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x!=  5)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    5)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	12	None	replace
105	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
106	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
107	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)|  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	53	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  encodeSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeSize,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inAvail);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  encodeSize);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
112	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  0];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  0];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  0];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    0];    	non-compiled	[CE]  ';'  expected	76	None	replace
113	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  0];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  0];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  0];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    0];    	non-compiled	[CE]  ';'  expected	76	None	replace
114	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  3];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  3];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  3];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    0];    	non-compiled	[CE]  ';'  expected	76	None	replace
115	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  0];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  0];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  0];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    0];    	non-compiled	[CE]  ';'  expected	76	None	replace
116	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  10)|  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	52	None	replace
117	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  10)|  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  10)|  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  ==  10)|  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	52	None	replace
118	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  -  1;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  -  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  -  1;	  inAvail    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
119	[BUG]  [BUGGY]  inAvail  =  System.currentTimeMillis()  *  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  inAvail  =  System.currentTimeMillis()  *  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	inAvail  =  System.currentTimeMillis()  *  1;	  inAvail    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
120	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
121	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
122	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
123	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  +  1;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
124	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  1;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  -  1;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
125	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  /  2;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  /  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  /  2;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
126	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  2;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  -  2;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
127	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  2;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  +  2;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
128	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  3;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  3;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  +  3;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
129	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  4;  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  4;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  -  4;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
130	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  3;  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  -  3;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  -  3;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inPos);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inPos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	44	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos  +  1);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inPos  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	44	None	replace
133	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  7)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    7)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	58	None	replace
134	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    7)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	58	None	replace
135	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
136	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  ==  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
137	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x!=  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
138	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)|  MASK_8BITS];  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10)|  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10)|  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
139	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  <  <  10)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(y  <  <  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(y  <  <  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    10)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
140	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  +  1;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  +  1;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  +  1;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
141	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  +  2;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  +  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  +  2;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
142	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  +  3;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  +  3;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  +  3;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
143	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  +  4;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  +  4;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  +  4;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
144	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  -  2;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  -  2;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  -  2;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
145	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  -  4;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  -  4;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  -  4;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
146	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  9)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	63	None	replace
147	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  9)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    9)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	63	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2,  encodeSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  2,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    2);    	non-compiled	[CE]  ';'  expected	47	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  6);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  6);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  6);	  System.arraycopy(buffer,    0,    buffer,    pos,    2);    	non-compiled	[CE]  ';'  expected	47	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2  +  1);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  2  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    2);    	non-compiled	[CE]  ';'  expected	47	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  encodeSize,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  encodeSize,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  encodeSize,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail,  pos);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail,  pos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  inAvail,  pos);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
153	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_9BITS];  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_9BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_9BITS];	  buffer[pos++]    =    encodeTable[(x!=    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
154	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
155	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eof)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
156	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
157	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
158	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
159	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[x  <  <  4)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
160	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8  &  MASK_8BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8  &  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8  &  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    2    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	79	None	replace
161	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_8BITS;	  buffer[pos++]    =    encodeTable[(x    >>    2    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	79	None	replace
162	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	40	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR  +  1);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inAvail  +  1);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  inAvail  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  encodeSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  1,  inAvail);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  1,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable,  1,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
167	[BUG]  [BUGGY]  inAvail  =  System.currentTimeMillis()  +  4;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  inAvail  =  System.currentTimeMillis()  +  4;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	inAvail  =  System.currentTimeMillis()  +  4;	  inAvail    =    System.currentTimeMillis()    -    4;    	non-compiled	[CE]  ';'  expected	71	None	replace
168	[BUG]  [BUGGY]  buffer[pos]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    10)|    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	53	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  DECODE_TABLE);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  DECODE_TABLE);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  DECODE_TABLE);	  System.arraycopy(buffer,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	84	None	replace
170	[BUG]  [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  4;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  InputStream  inAvail  =  System.currentTimeMillis()  +  4;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	InputStream  inAvail  =  System.currentTimeMillis()  +  4;	  InputStream    inAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	68	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  16);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  16);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  16);	  System.arraycopy(buffer,    0,    buffer,    pos,    3);    	non-compiled	[CE]  ';'  expected	49	None	replace
172	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >=    16)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	38	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTable);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	42	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTableSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  encodeTableSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  encodeTableSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	42	None	replace
175	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  8];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  8];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  8];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
176	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  32];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  32];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  32];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
177	[BUG]  [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	81	None	replace
178	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  +  1000;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  +  1000;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  +  1000;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
179	[BUG]  [BUGGY]  bAvail  =  System.currentTimeMillis()  +  inAvail;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  bAvail  =  System.currentTimeMillis()  +  inAvail;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	bAvail  =  System.currentTimeMillis()  +  inAvail;	  bAvail    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	69	None	replace
180	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  24)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  24)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  24)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    16)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	37	None	replace
181	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
182	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)  ||  isEnabled(Feature.QUOTE_FIELD_NAMES));  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)  ||  isEnabled(Feature.QUOTE_FIELD_NAMES));  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)  ||  isEnabled(Feature.QUOTE_FIELD_NAMES));	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
183	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)  ||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)  ||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES)  ||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
184	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NU  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NU  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NU	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
185	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES));  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES));  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES));	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
186	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NUMB  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NUMB  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NUMB	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
187	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
188	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  inAvail  -  1);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  inAvail  -  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  inAvail  -  1);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  inAvail  +  2);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  inAvail  +  2);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  inAvail  +  2);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	44	None	replace
192	[BUG]  [BUGGY]  buffer[pos]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	  buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	50	None	replace
193	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  4,  encodeSize);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  4,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  4,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  32,  encodeSize);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  32,  encodeSize);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  32,  encodeSize);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    encodeSize);    	non-compiled	[CE]  ';'  expected	85	None	replace
195	[BUG]  [BUGGY]  this.inAvail  =  System.currentTimeMillis();  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  this.inAvail  =  System.currentTimeMillis();  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	this.inAvail  =  System.currentTimeMillis();	  inAvail    =    System.currentTimeMillis()    -    3;    	non-compiled	[CE]  ';'  expected	72	None	replace
196	[BUG]  [BUGGY]  Integer  x  =  System.currentTimeMillis();  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  Integer  x  =  System.currentTimeMillis();  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	Integer  x  =  System.currentTimeMillis();	  inAvail    =    System.currentTimeMillis()    -    3;    	non-compiled	[CE]  ';'  expected	72	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  32,  inPos);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  32,  inPos);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  32,  inPos);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail,    inPos);    	non-compiled	[CE]  ';'  expected	44	None	replace
198	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  3,  inAvail);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  3,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  3,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
199	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  4,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  4,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  4,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	45	None	replace
200	[BUG]  [BUGGY]  System.arraycopy(buffer,  pos,  buffer,  inPos,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  pos,  buffer,  inPos,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  pos,  buffer,  inPos,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  x,  inAvail);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  inPos,  x,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  inPos,  x,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  ';'  expected	46	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  4,  inAvail);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  4,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  4,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  3,  inAvail);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  3,  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  3,  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    1,    inAvail);    	non-compiled	[CE]  ';'  expected	88	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize  +  1);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  decodeSize  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  3  +  1);  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  3  +  1);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  3  +  1);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  inAvail  +  3);	  System.arraycopy(buffer,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  ';'  expected	43	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2  -  x);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2  -  x);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  2  -  x);	  System.arraycopy(buffer,    0,    buffer,    pos,    2);    	non-compiled	[CE]  ';'  expected	47	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2  +  inAvail);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  2  +  inAvail);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	System.arraycopy(buffer,  0,  buffer,  pos,  2  +  inAvail);	  System.arraycopy(buffer,    0,    buffer,    pos,    2);    	non-compiled	[CE]  ';'  expected	47	None	replace
209	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MIME_CHUNK_SIZE];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MIME_CHUNK_SIZE];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MIME_CHUNK_SIZE];	  buffer[pos++]    =    encodeTable[(x    [Delete]    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	32	None	replace
210	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR);	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
211	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  inAvail;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  inAvail;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  inAvail;	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
212	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  true  :  inAvail;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  true  :  inAvail;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  true  :  inAvail;	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
213	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
214	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  inAvail,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  inAvail,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  inAvail,  inAvail);  return;  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
215	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  false;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  false;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  false;	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
216	[BUG]  [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  null;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  null;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFAULT_BUFFER_RESIZE_FACTOR)?  true  :  null;	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
217	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(x,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(x,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  eof  =  true;  }  else  {  System.arraycopy(x,  0,  buffer,  pos,  inAvail);  return;  }	  eof    =    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
218	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10);  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  10);  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  10);	  buffer[pos++]    =    encodeTable[(x    >>    2    &    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	79	None	replace
219	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  16];  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  16];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  16];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    16];    	non-compiled	[CE]  ';'  expected	77	None	replace
220	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MIME_CHUNK_SIZE];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MIME_CHUNK_SIZE];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MIME_CHUNK_SIZE];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    0];    	non-compiled	[CE]  ';'  expected	76	None	replace
221	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MIME_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    encodeTable[(x    >>    12)&    0];    	non-compiled	[CE]  ';'  expected	76	None	replace
222	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  +  inAvail;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  +  inAvail;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  +  inAvail;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
223	[BUG]  [BUGGY]  eof  =  System.currentTimeMillis()  -  inAvail;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  eof  =  System.currentTimeMillis()  -  inAvail;  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	eof  =  System.currentTimeMillis()  -  inAvail;	  eof    =    System.currentTimeMillis();    	non-compiled	[CE]  ';'  expected	64	None	replace
224	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(eof)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
225	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  4)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
226	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
227	[BUG]  [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	if(inAvail)  {  if(encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_6BITS];  }	  if(eof)    {    if(encodeTable    ==    STANDARD_ENCODE_TABLE)    {    buffer[pos++]    =    PAD;    buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    }    	non-compiled	[CE]  ';'  expected	82	None	replace
228	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)  &  MASK_6BITS];  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      }    if  (inAvail  <  0)  {  eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)  &  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.2886751345948129	450	450	1	replace	buffer[pos++]  =  encodeTable[(x  >=  18)  &  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	40	None	replace
