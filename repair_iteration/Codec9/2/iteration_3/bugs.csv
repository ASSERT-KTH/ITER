bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
2	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  class  or  interface  expected	40	None	replace
3	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  class  or  interface  expected	40	None	replace
4	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  class  or  interface  expected	40	None	replace
5	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  class  or  interface  expected	40	None	replace
6	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];  [CE]  class  or  interface  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  class  or  interface  expected	40	None	replace
7	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];  [CE]  class  or  interface  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  class  or  interface  expected	40	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  1);  [CE]  class  or  interface  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  -  1);  [CE]  class  or  interface  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  -  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  2);  [CE]  class  or  interface  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  -  inPos);  [CE]  class  or  interface  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  -  inPos);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  -  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  x);  [CE]  class  or  interface  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  x);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  x);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inPos);  [CE]  class  or  interface  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inPos);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  3);  [CE]  class  or  interface  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  3);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  4);  [CE]  class  or  interface  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  4);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  inAvail  +  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    0,    inAvail);    	non-compiled	[CE]  class  or  interface  expected	53	None	replace
16	[BUG]  [BUGGY]  eof  =  false;  buffer[pos++]  =  PAD;  [CE]  class  or  interface  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  false;  buffer[pos++]  =  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  false;  buffer[pos++]  =  PAD;	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
17	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  class  or  interface  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
18	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  class  or  interface  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
19	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  class  or  interface  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
20	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  class  or  interface  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
21	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  class  or  interface  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
22	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  false;  buffer[pos++]  =  PAD;  }  [CE]  class  or  interface  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  false;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  false;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
23	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  else  {  buffer[pos++]  =  null;  }  [CE]  class  or  interface  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  else  {  buffer[pos++]  =  null;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  else  {  buffer[pos++]  =  null;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
24	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  else  {  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR;  }  [CE]  class  or  interface  expected  [FE]                                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  else  {  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  else  {  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  class  or  interface  expected	12	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_SCALE_ENCODE_TABLE  |  PAD;  [CE]  <identifier>  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_SCALE_ENCODE_TABLE  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_SCALE_ENCODE_TABLE  |  PAD;	  buffer[pos++]    =    PEM_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [CE]  <identifier>  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
27	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [CE]  class  or  interface  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  class  or  interface  expected	13	None	replace
28	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  <identifier>  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  <identifier>  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  <identifier>  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
31	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];  [CE]  <identifier>  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
32	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  <identifier>  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  <identifier>  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
34	[BUG]  [BUGGY]  buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  <identifier>  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
35	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  <identifier>  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
36	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [CE]  <identifier>  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
37	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PAD;  [CE]  <identifier>  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PAD;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
38	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [CE]  <identifier>  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  PAD);  [CE]  <identifier>  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  PAD);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  PAD);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  CHUNK_SEPARATOR);  [CE]  <identifier>  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  CHUNK_SEPARATOR);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  CHUNK_SEPARATOR);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  STANDARD_ENCODE_TABLE);  [CE]  <identifier>  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  STANDARD_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  STANDARD_ENCODE_TABLE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  CHUNK_SIZE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  CHUNK_SIZE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
43	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
44	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DEFAULT_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DEFAULT_CHUNK_SIZE;	  buffer[pos++]    =    CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
45	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  STANDARD_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
46	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  PAD;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  |  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
47	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  &  PAD;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  &  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  &  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
48	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  PAD;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
49	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  STANDARD_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PAD  :  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  PAD  :  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
50	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  x;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  x;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  x;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
51	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  PAD;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  &  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
52	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BASE64_SEPARATOR;  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BASE64_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BASE64_SEPARATOR;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  ')'  expected	44	None	replace
53	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR  [CE]  ')'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR	  eof    =    true;    	non-compiled	[CE]  ')'  expected	11	None	replace
54	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  STANDARD_ENCODE_TABLE  [CE]  ')'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  STANDARD_ENCODE_TABLE  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  STANDARD_ENCODE_TABLE	  eof    =    true;    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  STANDARD_ENCODE_TABLE  [CE]  ')'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  STANDARD_ENCODE_TABLE  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  STANDARD_ENCODE_TABLE	  eof    =    true;    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR  [CE]  ')'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR	  eof    =    true;    	non-compiled	[CE]  ')'  expected	11	None	replace
57	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR.equals(DEFAULT_BUFFER_RESIZE_FACTOR)  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR.equals(DEFAULT_BUFFER_RESIZE_FACTOR)  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR.equals(DEFAULT_BUFFER_RESIZE_FACTOR)	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR)  {  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR)  {  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR)  {	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  DEFAULT_BUFFER_RESIZE_FACTOR);	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||  NO_IMPLEMENTS  ||	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  |  PAD;  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  |  PAD;	  buffer[pos++]    =    HIDE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
62	[BUG]  [BUGGY]  buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  &  PAD;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  &  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  &  PAD;	  buffer[pos++]    =    HIDE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  16);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  16);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  16);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    8);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  5);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  5);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  5);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    8);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
65	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
71	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
72	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
73	[BUG]  [BUGGY]  buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
74	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
75	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  MIME_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos  +  2);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos  +  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  3);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  3);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  2);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  4);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  4);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  5);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  5);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  5);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  *  2);  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  *  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  *  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  6);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  6);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  6);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
83	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  9)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    7)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
84	[BUG]  [BUGGY]  buffer[pos++]  =  HEAD_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  HEAD_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  HEAD_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    HEAD_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inAvail,  inPos);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inAvail,  inPos);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inAvail,  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inAvail,  inPos);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inAvail,  inPos);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inAvail,  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inAvail  +  1);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inAvail  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  ';'  expected	60	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inPos);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inPos);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  inPos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  1,  inAvail);  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  1,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  1,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  off,  inAvail);  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  off,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  off,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
91	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_7BITS];  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  10)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    5)&    MASK_7BITS];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
92	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_ENCODE_TABLE;	  buffer[pos++]    =    PEM_CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
93	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
94	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
95	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inPos));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inPos));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inPos));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
96	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
97	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos  +  1);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  1);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1,  encodeTable.length);  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1,  encodeTable.length);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1,  encodeTable.length);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3  +  1);  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4  +  1);  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
103	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
104	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  16)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
106	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
107	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  32)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  32)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  32)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    32)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
108	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
109	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
110	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
111	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  4;  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  4;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
112	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  2;  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  2;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  2;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
113	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
114	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  3;  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  3;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  +  3;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
115	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
116	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_ENCODE_TABLE  &  PAD;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE_ENCODE_TABLE  &  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE_ENCODE_TABLE  &  PAD;	  buffer[pos++]    =    TABLE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	81	None	replace
117	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DETECTED_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DETECTED_ENCODE_TABLE;	  buffer[pos++]    =    HIDE_SEPARATOR;    	non-compiled	[CE]  ';'  expected	68	None	replace
118	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  throw  new  IllegalArgumentException( " ");  }	  eof    =    false;    	non-compiled	[CE]  ';'  expected	88	None	replace
119	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }	  eof    =    false;    	non-compiled	[CE]  ';'  expected	88	None	replace
120	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  2:  buffer[pos++]  =  PAD;  break;  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  2:  buffer[pos++]  =  PAD;  break;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  2:  buffer[pos++]  =  PAD;  break;	  eof    =    false;    	non-compiled	[CE]  ';'  expected	88	None	replace
121	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  2:  buffer[pos++]  =  PAD;  [CE]  illegal  start  of  type  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  2:  buffer[pos++]  =  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  2:  buffer[pos++]  =  PAD;	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
122	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  1:  buffer[pos++]  =  PAD;  break;  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  1:  buffer[pos++]  =  PAD;  break;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  1:  buffer[pos++]  =  PAD;  break;	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
123	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  3:  buffer[pos++]  =  PAD;  break;  [CE]  illegal  start  of  type  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  3:  buffer[pos++]  =  PAD;  break;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  3:  buffer[pos++]  =  PAD;  break;	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
124	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
125	[BUG]  [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  3:  buffer[pos++]  =  PAD;  [CE]  ';'  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  3:  buffer[pos++]  =  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  switch(modulus)  {  case  3:  buffer[pos++]  =  PAD;	  eof    =    false;    	non-compiled	[CE]  ';'  expected	88	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2  +  1);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    2);    	non-compiled	[CE]  ';'  expected	59	None	replace
127	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DEFAULT_BUFFER_RESIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DEFAULT_BUFFER_RESIZE;	  buffer[pos++]    =    MASK_6BITS;    	non-compiled	[CE]  ';'  expected	51	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  1);  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    1);    	non-compiled	[CE]  ';'  expected	72	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  pos);  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  pos);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  0,  pos);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    1);    	non-compiled	[CE]  ';'  expected	72	None	replace
130	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_7BITS];  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_7BITS];    	non-compiled	[CE]  ';'  expected	32	None	replace
131	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_7BITS];  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  32)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_7BITS];    	non-compiled	[CE]  ';'  expected	32	None	replace
132	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_7BITS];  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  24)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_7BITS];    	non-compiled	[CE]  ';'  expected	32	None	replace
133	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  +  STANDARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  +  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  +  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
134	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  PAD;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  +  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  +  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
135	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  4;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  4;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
136	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  1;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
137	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  2;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  2;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  2;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
138	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  x;  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  x;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  x;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
139	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  3;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  3;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  +  3;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
140	[BUG]  [BUGGY]  buffer[pos++]  =  MASK_6BITS  +  PAD;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MASK_6BITS  +  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MASK_6BITS  +  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  ';'  expected	43	None	replace
141	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE  +  1;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SIZE  +  1;	  buffer[pos++]    =    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	3	None	replace
142	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
143	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
144	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
145	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
146	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
147	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
148	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MASK_6BITS);  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MASK_6BITS);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MASK_6BITS);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
149	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
150	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD_SEPARATOR);  [CE]  ';'  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD_SEPARATOR);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD_SEPARATOR);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	20	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  inAvail);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    32);    	non-compiled	[CE]  ';'  expected	58	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  encodeSize);  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  encodeSize);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  encodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    32);    	non-compiled	[CE]  ';'  expected	58	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  32);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  32);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  32);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    32);    	non-compiled	[CE]  ';'  expected	58	None	replace
154	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	17	None	replace
155	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	17	None	replace
156	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	15	None	replace
157	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	15	None	replace
158	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	15	None	replace
159	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail)+  1);  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail)+  1);  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail)+  1);  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	15	None	replace
160	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	15	None	replace
161	[BUG]  [BUGGY]  buffer[pos++]  =  ':';  [CE]  ';'  expected  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  ':';  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  ':';	  buffer[pos++]    =    ';';    	non-compiled	[CE]  ';'  expected	7	None	replace
162	[BUG]  [BUGGY]  buffer[pos++]  =  'n';  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  'n';  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  'n';	  buffer[pos++]    =    ';';    	non-compiled	[CE]  ';'  expected	7	None	replace
163	[BUG]  [BUGGY]  buffer[pos++]  =  ';'  +  PAD;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  ';'  +  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  ';'  +  PAD;	  buffer[pos++]    =    ';';    	non-compiled	[CE]  ';'  expected	7	None	replace
164	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
165	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
166	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  PAD;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  PAD;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
167	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
168	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
169	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD;  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  PAD;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
170	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
171	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
172	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    MIME_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	74	None	replace
173	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  |  NO_SCALE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  |  NO_SCALE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  |  NO_SCALE_ENCODE_TABLE;	  buffer[pos++]    =    MIME_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	74	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail,  eof);  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail,  eof);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail,  eof);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  x);  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  x);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  x);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  1);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail  -  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
177	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
178	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
179	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
180	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail)+  1);  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail)+  1);  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail)+  1);  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
181	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  not  a  statement  [FE]                                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	16	None	replace
182	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  12)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	16	None	replace
183	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	6	None	replace
184	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	6	None	replace
185	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	6	None	replace
186	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	6	None	replace
187	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
188	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  ==  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
189	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x!=  4)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
190	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_SEPARATOR;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE_SEPARATOR;	  buffer[pos++]    =    CACHE_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
191	[BUG]  [BUGGY]  buffer[pos++]  =  CACHE_SAFE_TABLE;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CACHE_SAFE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CACHE_SAFE_TABLE;	  buffer[pos++]    =    CACHE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
192	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  &  BYTE_SIZE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  &  BYTE_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  &  BYTE_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	42	None	replace
193	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_SIZE;  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  BYTE_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  not  a  statement	42	None	replace
194	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  PAD;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  PAD;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	42	None	replace
195	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
196	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  STANDARD_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
197	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  MIME_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  MIME_CHUNK_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	42	None	replace
198	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  +  BYTE_SIZE;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  +  BYTE_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  +  BYTE_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	42	None	replace
199	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  BYTE_8BITS;  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  BYTE_8BITS;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  BYTE_8BITS;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	42	None	replace
200	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  MASK_8BITS;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  MASK_8BITS;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  MASK_8BITS;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	42	None	replace
201	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE_SAFE_ENCODE_TABLE  &  PAD;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE_SAFE_ENCODE_TABLE  &  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE_SAFE_ENCODE_TABLE  &  PAD;	  buffer[pos++]    =    TABLE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	80	None	replace
202	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  18)&  MASK_8BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
203	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  19)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
204	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	2	None	replace
205	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  |  PEM_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  |  PEM_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  |  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	2	None	replace
206	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR.length;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR.length;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  PEM_CHUNK_SEPARATOR.length;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	2	None	replace
207	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SAFE_TABLE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CHUNK_SAFE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CHUNK_SAFE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	85	None	replace
208	[BUG]  [BUGGY]  eof  =  false;  buffer[pos++]  =  DECODE_TABLE;  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  false;  buffer[pos++]  =  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  false;  buffer[pos++]  =  DECODE_TABLE;	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
209	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
210	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
211	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
212	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
213	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
214	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  ';'  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
215	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  ';'  expected  [FE]                                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  ';'  expected	89	None	replace
216	[BUG]  [BUGGY]  buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	77	None	replace
217	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SIZE  :  MIME_CHUNK_SEPARATOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	77	None	replace
218	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	77	None	replace
219	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  PEM_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  PEM_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  DEFAULT_BUFFER_RESIZE_FACTOR  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	77	None	replace
220	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE  +  1;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE  +  1;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	77	None	replace
221	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  ';'  expected	10	None	replace
222	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  STANDARD_ENCODE_TABLE;  [CE]  ';'  expected  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  |  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  ';'  expected	10	None	replace
223	[BUG]  [BUGGY]  buffer[pos++]  =  DEFAULT_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DEFAULT_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DEFAULT_ENCODE_TABLE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
224	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  DEFAULT_BUFFER_SIZE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  DEFAULT_BUFFER_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  DEFAULT_BUFFER_SIZE;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  ';'  expected	10	None	replace
225	[BUG]  [BUGGY]  buffer[pos++]  =  DETECTED;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DETECTED;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DETECTED;	  buffer[pos++]    =    CACHED;    	non-compiled	[CE]  ';'  expected	69	None	replace
226	[BUG]  [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PAD  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	63	None	replace
227	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  PAD);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  PAD);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  PAD);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
228	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
229	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  STANDARD_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
230	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE);  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	63	None	replace
231	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  &  PAD);  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  &  PAD);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  &  PAD);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  ';'  expected	63	None	replace
232	[BUG]  [BUGGY]  eof  =  false;  buffer[pos++]  =  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  false;  buffer[pos++]  =  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  false;  buffer[pos++]  =  CHUNK_SEPARATOR;	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
233	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
234	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
235	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
236	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
237	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
238	[BUG]  [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  ';'  expected  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(modulus  ==  STANDARD_ENCODE_TABLE)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
239	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  [CE]  ';'  expected  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
240	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_7BITS];  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_7BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_7BITS];	  buffer[pos++]    =    encodeTable[(x    >>    4)&    MASK_7BITS];    	non-compiled	[CE]  ';'  expected	27	None	replace
241	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  20)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  20)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  20)&  MASK_6BITS];	  buffer[pos++]    =    encodeTable[(x    >>    24)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	70	None	replace
242	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  0];  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  18)&  0];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  18)&  0];	  buffer[pos++]    =    encodeTable[(x    >>    18)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
243	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_TABLE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_TABLE;	  buffer[pos++]    =    CACHED;    	non-compiled	[CE]  ';'  expected	69	None	replace
244	[BUG]  [BUGGY]  buffer[pos++]  =  HIDE_ENCODE_TABLE;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  HIDE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  HIDE_ENCODE_TABLE;	  buffer[pos++]    =    HIDE_SEPARATOR;    	non-compiled	[CE]  ';'  expected	68	None	replace
245	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE?  MIME_CHUNK_SIZE  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	78	None	replace
246	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  MIME_CHUNK_SIZE  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [CE]  ';'  expected  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  MIME_CHUNK_SIZE  :  DEFAULT_BUFFER_RESIZE_FACTOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  MIME_CHUNK_SIZE  :  DEFAULT_BUFFER_RESIZE_FACTOR;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	78	None	replace
247	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	78	None	replace
248	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  ';'  expected	78	None	replace
249	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
250	[BUG]  [BUGGY]  if(!modulus)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
251	[BUG]  [BUGGY]  if(buffer!=  null)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(buffer!=  null)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(buffer!=  null)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
252	[BUG]  [BUGGY]  if(b  ==  null)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  ';'  expected  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(b  ==  null)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(b  ==  null)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
253	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  }  [CE]  ';'  expected  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  else  {  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	87	None	replace
254	[BUG]  [BUGGY]  if(inAvail)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(inAvail)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(inAvail)  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
255	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SIZE  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
256	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SIZE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
257	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
258	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
259	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [CE]  illegal  start  of  type  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32;  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32;  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32;	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    32);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  MIME_CHUNK_SIZE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  MIME_CHUNK_SIZE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  DECODE_TABLE);  [CE]  ';'  expected  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  DECODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  DECODE_TABLE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  MASK_6BITS);  [CE]  ';'  expected  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  MASK_6BITS);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  MASK_6BITS);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  ';'  expected	61	None	replace
264	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  *  1  +  1;  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  *  1  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  *  1  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  ';'  expected	64	None	replace
265	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  ';'  expected	19	None	replace
266	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
267	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  +  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
268	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  CHUNK_SEPARATOR;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  CHUNK_SEPARATOR;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
269	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  4;  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  4;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
270	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  PAD;  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  |  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  |  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
271	[BUG]  [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  1;  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  STANDARD_ENCODE_TABLE  |  1;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(chunk_SEPARATOR,  0,  buffer,  pos,  inAvail);  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(chunk_SEPARATOR,  0,  buffer,  pos,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(chunk_SEPARATOR,  0,  buffer,  pos,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  3);  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  3);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  3);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  p,  inAvail);  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  p,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  p,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  not  a  statement	60	None	replace
275	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  not  a  statement	12	None	replace
276	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  not  a  statement	12	None	replace
277	[BUG]  [BUGGY]  if(!modulus)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus)  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus)  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  not  a  statement	12	None	replace
278	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  not  a  statement	12	None	replace
279	[BUG]  [BUGGY]  eof  =  false;  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  false;  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  false;  buffer[pos++]  =  STANDARD_ENCODE_TABLE;	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  not  a  statement	12	None	replace
280	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  not  a  statement	12	None	replace
281	[BUG]  [BUGGY]  buffer[pos++]  =  DECEIVER_CHUNK_SIZE;  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECEIVER_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECEIVER_CHUNK_SIZE;	  buffer[pos++]    =    CHUNK_SIZE;    	non-compiled	[CE]  not  a  statement	47	None	replace
282	[BUG]  [BUGGY]  buffer[pos++]  =  LEAD_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  LEAD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  LEAD_ENCODE_TABLE;	  buffer[pos++]    =    HEAD_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
283	[BUG]  [BUGGY]  if(!modulus)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
284	[BUG]  [BUGGY]  if(buffer!=  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(buffer!=  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(buffer!=  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
285	[BUG]  [BUGGY]  if(buffer  ==  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(buffer  ==  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(buffer  ==  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  not  a  statement	89	None	replace
286	[BUG]  [BUGGY]  if(b  ==  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(b  ==  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(b  ==  null)  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  not  a  statement	89	None	replace
287	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  not  a  statement  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  else  {  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  not  a  statement	89	None	replace
288	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_9BITS];  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_9BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  MASK_9BITS];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  not  a  statement	37	None	replace
289	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  1;  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_BUFFER_RESIZE_FACTOR  +  1;	  buffer[pos++]    =    MIME_BUFFER_RESIZE_FACTOR;    	non-compiled	[CE]  not  a  statement	10	None	replace
290	[BUG]  [BUGGY]  buffer[pos++]  =  ';'  +  STANDARD_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  ';'  +  STANDARD_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  ';'  +  STANDARD_ENCODE_TABLE;	  buffer[pos++]    =    ';';    	non-compiled	[CE]  not  a  statement	7	None	replace
291	[BUG]  [BUGGY]  buffer[pos++]  =  ';'  +  System.identityHashCode(System.identityHashCode(buffer));  [CE]  ')'  expected  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  ';'  +  System.identityHashCode(System.identityHashCode(buffer));  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  ';'  +  System.identityHashCode(System.identityHashCode(buffer));	  buffer[pos++]    =    ';';    	non-compiled	[CE]  ')'  expected	7	None	replace
292	[BUG]  [BUGGY]  buffer[pos++]  =  ';'  +  System.identityHashCode(System.identityHashCode(array));  [CE]  ';'  expected  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  ';'  +  System.identityHashCode(System.identityHashCode(array));  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  ';'  +  System.identityHashCode(System.identityHashCode(array));	  buffer[pos++]    =    ';';    	non-compiled	[CE]  ';'  expected	7	None	replace
293	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_9BITS];  [CE]  ';'  expected  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_9BITS];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)&  MASK_9BITS];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	33	None	replace
294	[BUG]  [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  PAD;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CHUNK_SEPARATOR  +  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CHUNK_SEPARATOR  +  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
295	[BUG]  [BUGGY]  buffer[pos++]  =  x  +  PAD;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  x  +  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  x  +  PAD;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    +    PAD;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
296	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  &  PEM_CHUNK_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  &  PEM_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  &  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
297	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  4;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  4;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
298	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  1;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
299	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  CHUNK_SEPARATOR);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
300	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  &  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
301	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  HEAD_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  HEAD_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  HEAD_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
302	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MIME_ENCODE_TABLE);  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MIME_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  MIME_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
303	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_ENCODE_TABLE  |  BYTE_ENCODE_TABLE  |  DEFAULT_BUFFER_RESIZE_FACTOR);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
304	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  PEM_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  PEM_CHUNK_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
305	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  DEFAULT_BUFFER_SIZE;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR  |  DEFAULT_BUFFER_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR  |  DEFAULT_BUFFER_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
306	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  32));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  32));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  32));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
307	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  PAD));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  PAD));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  PAD));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
308	[BUG]  [BUGGY]  buffer[pos++]  =  HARD_ENCODE_TABLE  &  PAD;  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  HARD_ENCODE_TABLE  &  PAD;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  HARD_ENCODE_TABLE  &  PAD;	  buffer[pos++]    =    HARD_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
309	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_SCALE_TABLE;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_SCALE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_SCALE_TABLE;	  buffer[pos++]    =    MIME_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
310	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
311	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR);  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR);  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR);  buffer[pos++]  =  PAD;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
312	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    	non-compiled	[CE]  not  a  statement	11	None	replace
313	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_ENCODE_TABLE))  {  eof  =  true;  }  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_ENCODE_TABLE))  {  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_ENCODE_TABLE))  {  eof  =  true;  }	  eof    =    true;    	non-compiled	[CE]  not  a  statement	11	None	replace
314	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR);  return;  }  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR);  return;  }	  eof    =    true;    	non-compiled	[CE]  not  a  statement	11	None	replace
315	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  }  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  }	  eof    =    true;    	non-compiled	[CE]  not  a  statement	11	None	replace
316	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  not  a  statement  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    	non-compiled	[CE]  not  a  statement	11	None	replace
317	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos);  }  [CE]  not  a  statement  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos);  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos);  }	  eof    =    true;    	non-compiled	[CE]  not  a  statement	11	None	replace
318	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  inAvail);  eof  =  true;  }  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  inAvail);  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  inAvail);  eof  =  true;  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
319	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  not  a  statement  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  return;  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
320	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
321	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  eof  =  true;  }  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  eof  =  true;  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
322	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  eof  =  true;  }  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  eof  =  true;  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
323	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  eof  =  true;  }  [CE]  not  a  statement  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  eof  =  true;  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
324	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  }  [CE]  not  a  statement  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  buffer[pos++]  =  PAD;  System.arraycopy(chunks,  0,  buffer,  pos,  inAvail);  }	  eof    =    false;    	non-compiled	[CE]  not  a  statement	88	None	replace
325	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  inAvail);  return;  }  [CE]  ';'  expected  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  CHUNK_SEPARATOR,  inAvail);  return;  }	  eof    =    false;    	non-compiled	[CE]  ';'  expected	88	None	replace
326	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail,  encodeSize);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail,  encodeSize);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  inPos,  inAvail,  encodeSize);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	56	None	replace
327	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	14	None	replace
328	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	14	None	replace
329	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	14	None	replace
330	[BUG]  [BUGGY]  buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  +  4;  [CE]  not  a  statement  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  HIDE_SAFE_ENCODE_TABLE  +  4;	  buffer[pos++]    =    HIDE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  not  a  statement	65	None	replace
331	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE?  MIME_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  not  a  statement	79	None	replace
332	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  MASK_8BITS;  [CE]  ';'  expected  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  MASK_8BITS;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  MASK_8BITS;	  buffer[pos++]    =    MASK_8BITS;    	non-compiled	[CE]  ';'  expected	50	None	replace
333	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  &  MASK_8BITS;  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  &  MASK_8BITS;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  &  MASK_8BITS;	  buffer[pos++]    =    MASK_8BITS;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
334	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	15	None	replace
335	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [CE]  not  a  statement  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	15	None	replace
336	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	15	None	replace
337	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  0,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
338	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  STANDARD_ENCODE_TABLE  +  1);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  STANDARD_ENCODE_TABLE  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  STANDARD_ENCODE_TABLE  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  not  a  statement	52	None	replace
339	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32  +  1);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  not  a  statement	52	None	replace
340	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  HIDE_SEPARATOR  :  CHUNK_SEPARATOR;  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  HIDE_SEPARATOR  :  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  HIDE_SEPARATOR  :  CHUNK_SEPARATOR;	  buffer[pos++]    =    HIDE_SEPARATOR;    	non-compiled	[CE]  not  a  statement	68	None	replace
341	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  HIDE_SEPARATOR  :  DECODE_TABLE;  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  HIDE_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  HIDE_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    HIDE_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
342	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)  &  MIME_CHUNK_SIZE];  [CE]  not  a  statement  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  12)  &  MIME_CHUNK_SIZE];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  12)  &  MIME_CHUNK_SIZE];	  buffer[pos++]    =    encodeTable[(x    >>    12)&    MASK_7BITS];    	non-compiled	[CE]  not  a  statement	29	None	replace
343	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_TABLE;  [CE]  not  a  statement  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_CHUNK_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  not  a  statement	9	None	replace
344	[BUG]  [BUGGY]  buffer[pos++]  =  DESC_TABLE;  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DESC_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DESC_TABLE;	  buffer[pos++]    =    PEM_CHUNK_TABLE;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
345	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
346	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE  |  BYTE_ENCODE_TABLE);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE  |  BYTE_ENCODE_TABLE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE  |  BYTE_ENCODE_TABLE);	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
347	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_SIZE;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
348	[BUG]  [BUGGY]  System.arraycopy(chunk_SEPARATOR,  0,  buffer,  pos,  2);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(chunk_SEPARATOR,  0,  buffer,  pos,  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(chunk_SEPARATOR,  0,  buffer,  pos,  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
349	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
350	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.AUTO_CLOSE_ENCODE))  {  eof  =  true;  buffer[pos++]  =  DECODE_TABLE;  }	  eof    =    true;    buffer[pos++]    =    DECODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
351	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SEPARATOR;  [CE]  illegal  start  of  type  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SEPARATOR;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
352	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  STANDARD_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
353	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SEPARATOR  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
354	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  CHUNK_SAFE_ENCODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
355	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SEPARATOR?  DECODE_TABLE  :  CHUNK_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    CHUNK_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
356	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  4);  [CE]  not  a  statement  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  4);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  4);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  not  a  statement	60	None	replace
357	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  2);  [CE]  illegal  start  of  expression  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  x,  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    x,    inAvail);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
358	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MIME_CHUNK_SIZE];  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  MIME_CHUNK_SIZE];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  MIME_CHUNK_SIZE];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
359	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  0];  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  16)&  0];  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  encodeTable[(x  >>  16)&  0];	  buffer[pos++]    =    encodeTable[(x    >>    16)&    MASK_8BITS];    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
360	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  HIDE_SAFE_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  HIDE_SAFE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  HIDE_SAFE_ENCODE_TABLE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    DECODE_TABLE;    	non-compiled	[CE]  not  a  statement	79	None	replace
361	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_CHUNK_SEPARATOR;	  buffer[pos++]    =    PEM_CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
362	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  DEFAULT_BUFFER_RESIZE_FACTOR);  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  DEFAULT_BUFFER_RESIZE_FACTOR);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  DEFAULT_BUFFER_RESIZE_FACTOR);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    32);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
363	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  MIME_CHUNK_SIZE);  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  MIME_CHUNK_SIZE);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32,  MIME_CHUNK_SIZE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    32);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
364	[BUG]  [BUGGY]  if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  }  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
365	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    8)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
366	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  4));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  4));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  4));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
367	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  10));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  10));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  10));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
368	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  4096));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  not  a  statement  [FE]                                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  4096));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  4096));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(x,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  not  a  statement	18	None	replace
369	[BUG]  [BUGGY]  buffer[pos++]  =  VISIBILITY;  [CE]  not  a  statement  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  VISIBILITY;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  VISIBILITY;	  buffer[pos++]    =    CACHED;    	non-compiled	[CE]  not  a  statement	69	None	replace
370	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  prev,  inAvail);  [CE]  not  a  statement  [FE]                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  prev,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  prev,  inAvail);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    inPos,    inAvail);    	non-compiled	[CE]  not  a  statement	56	None	replace
371	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  not  a  statement	19	None	replace
372	[BUG]  [BUGGY]  buffer[pos++]  =  TABLE  |  BYTE_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  TABLE  |  BYTE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  TABLE  |  BYTE_ENCODE_TABLE;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
373	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  HEAD_CHUNK_SIZE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  HEAD_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  HEAD_CHUNK_SIZE;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
374	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  MIME_CHUNK_SEPARATOR  :  MIME_CHUNK_SIZE  +  1;	  buffer[pos++]    =    DECODE_TABLE?    MIME_CHUNK_SEPARATOR    :    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
375	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize  +  1);  [CE]  illegal  start  of  expression  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
376	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64  +  1);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64  +  1);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64  +  1);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
377	[BUG]  [BUGGY]  buffer[pos++]  =  CACHE_SCALE_ENCODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CACHE_SCALE_ENCODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CACHE_SCALE_ENCODE_TABLE;	  buffer[pos++]    =    PEM_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64  +  2);  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64  +  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize  +  2);  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize  +  2);  [BUGGY]      buffer[pos++]  =  PAD;  buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  decodeSize  +  2);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail    +    2);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
380	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  STANDARD_ENCODE_TABLE  :  DECODE_TABLE;	  buffer[pos++]    =    STANDARD_ENCODE_TABLE    |    PAD;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
381	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
382	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAME))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
383	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
384	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
385	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_ENCODE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_ENCODE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_ENCODE))  {  eof  =  true;  buffer[pos++]  =  PAD;  }	  eof    =    true;    buffer[pos++]    =    PAD;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
386	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE  &  BYTE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    BYTE_ENCODE_TABLE    |    BYTE_ENCODE_TABLE    +    1;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
387	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  CHUNK_SEPARATOR;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  +  CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  +  CHUNK_SEPARATOR;	  buffer[pos++]    =    CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
388	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  DECAULT_CHUNK_SIZE);  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  DECAULT_CHUNK_SIZE);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  DECAULT_CHUNK_SIZE);	  System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    CHUNK_SEPARATOR);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
389	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  -  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  -  1;	  buffer[pos++]    =    MIME_CHUNK_SIZE;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
390	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  +  1;  [CE]  illegal  start  of  type  [FE]                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  +  1;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  +  1;	  buffer[pos++]    =    MIME_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
391	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  +  4;  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  +  4;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_SCALE_ENCODE_TABLE  +  4;	  buffer[pos++]    =    MIME_SCALE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
392	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
393	[BUG]  [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  illegal  start  of  expression  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!modulus.isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!modulus.isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
394	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_ENCODE_TABLE)||  isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_ENCODE_TABLE)||  isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(isEnabled(Feature.QUOTE_ENCODE_TABLE)||  isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  buffer[pos++]  =  CHUNK_SEPARATOR;  }	  eof    =    true;    buffer[pos++]    =    CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
395	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  }  [CE]  illegal  start  of  type  [FE]                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
396	[BUG]  [BUGGY]  if(!isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  }  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
397	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
398	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eof  =  true;  }  else  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  return;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
399	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  eof  =  true;  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  eof  =  true;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT))  {  eof  =  true;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
400	[BUG]  [BUGGY]  if(!isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(!isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(!isEnabled(Feature.AUTO_CLOSE_ENCODE_TABLE))  {  eof  =  true;  }  else  {  buffer[pos++]  =  PAD;  }	  eof    =    true;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
401	[BUG]  [BUGGY]  buffer[pos++]  =  DECEIVER;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECEIVER;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECEIVER;	  buffer[pos++]    =    CHUNK_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
402	[BUG]  [BUGGY]  buffer[pos++]  =  ');';  [CE]  illegal  start  of  expression  [FE]                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  ');';  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  ');';	  buffer[pos++]    =    ';';    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
403	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(inPos  >=  inAvail)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(inPos  >=  inAvail)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
404	[BUG]  [BUGGY]  if(inPos  >  0)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(inPos  >  0)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(inPos  >  0)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
405	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
406	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [CE]  illegal  start  of  expression  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(x,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
407	[BUG]  [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE  |  BYTE_SEPARATOR;  [CE]  illegal  start  of  expression  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  PEM_CHUNK_SIZE  |  BYTE_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  PEM_CHUNK_SIZE  |  BYTE_SEPARATOR;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
408	[BUG]  [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR?  BYTE_SIZE  :  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  BYTE_SEPARATOR?  BYTE_SIZE  :  BYTE_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  BYTE_SEPARATOR?  BYTE_SIZE  :  BYTE_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
409	[BUG]  [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  |  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  MIME_CHUNK_SIZE  |  BYTE_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  MIME_CHUNK_SIZE  |  BYTE_SIZE;	  buffer[pos++]    =    BYTE_SEPARATOR    |    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
410	[BUG]  [BUGGY]  if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
411	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    6)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
412	[BUG]  [BUGGY]  if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [CE]  illegal  start  of  type  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(buffer!=  null)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
413	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(buffer,  pos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(buffer,    inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
414	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  PEM_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
415	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SIZE;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SIZE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  CHUNK_CHUNK_SIZE;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
416	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  DECODE_TABLE;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  DECODE_TABLE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  PEM_CHUNK_SEPARATOR  :  DECODE_TABLE;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
417	[BUG]  [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DECODE_TABLE  :  PEM_CHUNK_SEPARATOR;  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  DECODE_TABLE?  DECODE_TABLE  :  PEM_CHUNK_SEPARATOR;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  DECODE_TABLE?  DECODE_TABLE  :  PEM_CHUNK_SEPARATOR;	  buffer[pos++]    =    PEM_CHUNK_SEPARATOR;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
418	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  type  [FE]                              java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
419	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  }  [CE]  illegal  start  of  type  [FE]                                java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
420	[BUG]  [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }  [CE]  illegal  start  of  expression  [FE]                                  java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
421	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  return;  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  STANDARD_ENCODE_TABLE;  return;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
422	[BUG]  [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  return;  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(eof  ==  PAD)  {  eof  =  false;  }  else  {  System.arraycopy(buffer,  pos,  CHUNK_SEPARATOR,  inAvail,  inAvail);  buffer[pos++]  =  PAD;  return;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
423	[BUG]  [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  return;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
424	[BUG]  [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  [CE]  illegal  start  of  expression  [FE]                                          java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail,  inAvail);	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
425	[BUG]  [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  return;  }  [CE]  illegal  start  of  expression  [FE]                                            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  return;  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	eof  =  true;  }  else  if(encodeTable)  {  System.arraycopy(buffer,  0,  buffer,  pos,  inAvail);  System.arraycopy(x,  0,  buffer,  pos,  inAvail,  inAvail);  return;  }	  eof    =    false;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
426	[BUG]  [BUGGY]  if(inPos  >=  inAvail)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [CE]  illegal  start  of  expression  [FE]                                    java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(inPos  >=  inAvail)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(inPos  >=  inAvail)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
427	[BUG]  [BUGGY]  if(inPos  >  0)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [CE]  illegal  start  of  expression  [FE]                                      java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  if(inPos  >  0)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	if(inPos  >  0)  {  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_6BITS];  }	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
428	[BUG]  [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [CE]  illegal  start  of  expression  [FE]                                        java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	BufferedReader  reader  =  new  BufferedReader(new  InputStreamReader(inPos,  inAvail  +  1));  buffer[pos++]  =  encodeTable[(x  >>  10)&  MASK_8BITS];	  BufferedReader    reader    =    new    BufferedReader(new    InputStreamReader(inPos,    inAvail));    buffer[pos++]    =    encodeTable[(x    >>    10)&    MASK_6BITS];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
429	[BUG]  [BUGGY]  buffer[pos++]  =  CACHE_SAFE_ENCODE;  [CE]  illegal  start  of  expression  [FE]            java.lang.IllegalArgumentException:  Input  array  too  big      [CONTEXT]      eof  =  true;  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  switch  (modulus)  {  case  1  :  buffer[pos++]  =  encodeTable[(x  >>  2)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  4)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {      [BUGGY]  buffer[pos++]  =  CACHE_SAFE_ENCODE;  [BUGGY]      buffer[pos++]  =  PAD;  }  break;  case  2  :  buffer[pos++]  =  encodeTable[(x  >>  10)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  boolean  eof  urlSafe  byte  PAD  b  int  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  MIME_CHUNK_SIZE  PEM_CHUNK_SIZE  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  pos  readPos  x  	projects/Codec9/src/java/org/apache/commons/codec/binary/Base64.java	0.30151134457776363	454	454	1	replace	buffer[pos++]  =  CACHE_SAFE_ENCODE;	  buffer[pos++]    =    CACHE_SAFE_ENCODE_TABLE;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
