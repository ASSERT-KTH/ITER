bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  decPos  =  exp.length();  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  int  decPos  =  exp.length();  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	int  decPos  =  exp.length();	      int    decPos    =    str.length();    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  int  decPos  =  str.length()  -  1;  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  int  decPos  =  str.length()  -  1;  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	int  decPos  =  str.length()  -  1;	      int    decPos    =    str.length();    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  int  decPos  =  str.length()  +  1;  [CE]  [FE]              NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  int  decPos  =  str.length()  +  1;  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	int  decPos  =  str.length()  +  1;	      int    decPos    =    str.length();    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  int  decPos  =  allZeros.length();  [CE]  [FE]                NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  int  decPos  =  allZeros.length();  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	int  decPos  =  allZeros.length();	      int    decPos    =    str.length();    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(dec)&&  isAllZeros(exp);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(dec)&&  isAllZeros(exp);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(dec)&&  isAllZeros(exp);	      boolean    allZeros    =    isAllZeros(mant)||    isAllZeros(exp);    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  switch(numeric.substring(2))  {  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.substring(2))  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.substring(2))  {	  switch(numeric.substring(1))    {    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  switch(numeric.substring(1),  allZeros)  {  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.substring(1),  allZeros)  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.substring(1),  allZeros)  {	  switch(numeric.substring(1))    {    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  switch(str)  {  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(str)  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(str)  {	  switch(allZeros)    {    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  switch(numeric.toCharArray())  {  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.toCharArray())  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.toCharArray())  {	  switch(numeric)    {    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(numeric)&&  isAllZeros(exp);  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(numeric)&&  isAllZeros(exp);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(numeric)&&  isAllZeros(exp);	      boolean    allZeros    =    isAllZeros(mant)&&    isAllZeros(numeric);    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(lastChar)&&  isAllZeros(numeric);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(lastChar)&&  isAllZeros(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(lastChar)&&  isAllZeros(numeric);	      boolean    allZeros    =    isAllZeros(mant)&&    isAllZeros(numeric);    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  str.length());  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  str.length());  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  str.length());	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  exp);  [CE]  [FE]              NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  exp);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  exp);	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  Integer  dec  =  str.substring(1,  allZeros);  [CE]  [FE]                NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(1,  allZeros);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(1,  allZeros);	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  Integer  dec  =  createInteger(numeric,  allZeros);  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  createInteger(numeric,  allZeros);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  createInteger(numeric,  allZeros);	      Integer    dec    =    createInteger(numeric);    	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]  Integer  dec  =  createInteger(0);  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  createInteger(0);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  createInteger(0);	      Integer    dec    =    createInteger(numeric);    	non-compiled	[CE]  	11	None	replace
17	[BUG]  [BUGGY]  Integer  dec  =  createInteger(numeric.substring(1));  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  createInteger(numeric.substring(1));  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  createInteger(numeric.substring(1));	      Integer    dec    =    createInteger(numeric);    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  str.length()  +  1);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  str.length()  +  1);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  str.length()  +  1);	      Integer    dec    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  str.length();  [CE]  [FE]              NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  str.length();  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  str.length();	      Integer    dec    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length());  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length());  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(decPos  +  1,  str.length());	      Integer    dec    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  	17	None	replace
21	[BUG]  [BUGGY]  Integer  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(expPos  +  1,  str.length()  -  1);	      Integer    dec    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  	17	None	replace
22	[BUG]  [BUGGY]  switch(numeric.charAt(1))  {  [CE]  [FE]              NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.charAt(1))  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.charAt(1))  {	  switch(str.charAt(0))    {    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  Character  dec  =  Character.isDigit(numeric)||  Character.isDigit(numeric);  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.isDigit(numeric)||  Character.isDigit(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.isDigit(numeric)||  Character.isDigit(numeric);	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
24	[BUG]  [BUGGY]  String  dec  =  Character.isDigit(numeric);  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  String  dec  =  Character.isDigit(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	String  dec  =  Character.isDigit(numeric);	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
25	[BUG]  [BUGGY]  Character  dec  =  Character.isDigit(numeric.charAt(0));  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.isDigit(numeric.charAt(0));  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.isDigit(numeric.charAt(0));	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
26	[BUG]  [BUGGY]  switch(numeric.length())  {  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.length())  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.length())  {	  switch(numeric.charAt(0))    {    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  str.length()  -  1  +  1);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  str.length()  -  1  +  1);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  str.length()  -  1  +  1);	      Integer    dec    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  switch(numeric.substring(3))  {  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.substring(3))  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.substring(3))  {	  switch(numeric.substring(1))    {    	non-compiled	[CE]  	10	None	replace
29	[BUG]  [BUGGY]  switch(numeric.trim())  {  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.trim())  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.trim())  {	  switch(numeric)    {    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(all)&&  isAllZeros(numeric);  [CE]  [FE]                NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(all)&&  isAllZeros(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(all)&&  isAllZeros(numeric);	      boolean    allZeros    =    isAllZeros(allZeros)&&    isAllZeros(numeric);    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(numeric)&&  isAllZeros(allZeros);  [CE]  [FE]                  NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(numeric)&&  isAllZeros(allZeros);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(numeric)&&  isAllZeros(allZeros);	      boolean    allZeros    =    isAllZeros(allZeros)&&    isAllZeros(numeric);    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(mant)||  isAllZeros(numeric);  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(mant)||  isAllZeros(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(mant)||  isAllZeros(numeric);	      boolean    allZeros    =    isAllZeros(mant)&&    isAllZeros(numeric);    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  Character  dec  =  Character.getDigits(numeric);  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.getDigits(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.getDigits(numeric);	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
34	[BUG]  [BUGGY]  Character  dec  =  Character.getDigit(numeric);  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.getDigit(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.getDigit(numeric);	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
35	[BUG]  [BUGGY]  Character  dec  =  Character.isDigit(numeric)&&  isDigits(numeric);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.isDigit(numeric)&&  isDigits(numeric);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.isDigit(numeric)&&  isDigits(numeric);	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
36	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  expPos);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  expPos);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  expPos);	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  DEC_ZERO);  [CE]  [FE]              NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(0,  DEC_ZERO);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(0,  DEC_ZERO);	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
38	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length()  -  2);  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  str.length()  -  2);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(decPos  +  1,  str.length()  -  2);	      Integer    dec    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  	17	None	replace
39	[BUG]  [BUGGY]  Integer  dec  =  createInteger(numeric,  exp);  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  createInteger(numeric,  exp);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  createInteger(numeric,  exp);	      Integer    dec    =    createInteger(numeric);    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  boolean  allZeros  =  isAllZeros(mant)  &&  exp  ==  null;  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  boolean  allZeros  =  isAllZeros(mant)  &&  exp  ==  null;  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	boolean  allZeros  =  isAllZeros(mant)  &&  exp  ==  null;	      boolean    allZeros    =    isAllZeros(mant)&&    isAllZeros(numeric);    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  switch(numeric.toString())  {  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  switch(numeric.toString())  {  [BUGGY]    case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	switch(numeric.toString())  {	  switch(numeric.substring(1))    {    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  Character  dec  =  Character.isDigit(numeric.toCharArray());  [CE]  [FE]        NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.isDigit(numeric.toCharArray());  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.isDigit(numeric.toCharArray());	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
43	[BUG]  [BUGGY]  Character  dec  =  Character.isDigit(numeric.substring(1));  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Character  dec  =  Character.isDigit(numeric.substring(1));  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Character  dec  =  Character.isDigit(numeric.substring(1));	      Character    dec    =    Character.isDigit(numeric);    	non-compiled	[CE]  	16	None	replace
44	[BUG]  [BUGGY]  Integer  dec  =  exp.substring(0,  allZeros);  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  exp.substring(0,  allZeros);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  exp.substring(0,  allZeros);	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
45	[BUG]  [BUGGY]  Integer  dec  =  numeric.substring(0,  allZeros);  [CE]  [FE]              NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  numeric.substring(0,  allZeros);  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  numeric.substring(0,  allZeros);	      Integer    dec    =    str.substring(0,    allZeros);    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.');  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  int  decPos  =  str.lastIndexOf('.');  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	int  decPos  =  str.lastIndexOf('.');	      int    decPos    =    str.length();    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [CE]  [FE]            NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	int  decPos  =  str.lastIndexOf('.')+  1;	      int    decPos    =    str.length();    	non-compiled	[CE]  	12	None	replace
48	[BUG]  [BUGGY]  Integer  dec  =  str.substring(expPos  +  1,  str.length());  [CE]  [FE]          NumberFormatException    [CONTEXT]    }  if  (!Character.isDigit(lastChar))  {  if  (expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  else  {  exp  =  null;  }  String  numeric  =  str.substring(0,  str.length()  -  1);  boolean  allZeros  =  isAllZeros(mant)  &&  isAllZeros(exp);    [BUGGY]  Integer  dec  =  str.substring(expPos  +  1,  str.length());  [BUGGY]    switch  (lastChar)  {  case  'l'  :  case  'L'  :  if  (dec  ==  null  &&  exp  ==  null  &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	Integer  dec  =  str.substring(expPos  +  1,  str.length());	      Integer    dec    =    str.substring(decPos    +    1,    str.length()    -    1);    	non-compiled	[CE]  	17	None	replace
