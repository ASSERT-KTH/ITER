bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    less    than    1    character.   ");    	non-compiled	[CE]  not  a  statement	70	None	replace
2	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    less    than    1    character.   ");    	non-compiled	[CE]  not  a  statement	70	None	replace
3	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0)))  {  throw  new  NumberFormatException( " ");  }  [CE]  unclosed  string  literal  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0)))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0)))  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
4	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [CE]  unclosed  string  literal  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
5	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(1)))  {  throw  new  NumberFormatException( " ");  }  [CE]  unclosed  string  literal  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(1)))  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(1)))  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
6	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  2);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  2);	  Number    number    =    str.substring(0,    str.length());    	non-compiled	[CE]  not  a  statement	41	None	replace
7	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  4);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  4);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  4);	  Number    number    =    str.substring(0,    str.length());    	non-compiled	[CE]  not  a  statement	41	None	replace
8	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  /  1);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  /  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  /  1);	  Number    number    =    str.substring(0,    str.length()    *    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
9	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  *  2);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  *  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  *  2);	  Number    number    =    str.substring(0,    str.length()    *    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
10	[BUG]  [BUGGY]  number  =  str.substring(0,  str.length()  -  1);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  number  =  str.substring(0,  str.length()  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	number  =  str.substring(0,  str.length()  -  1);	  Number    number    =    str.substring(0,    str.length()    *    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
11	[BUG]  [BUGGY]  NumberShort.createInteger(numeric);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.createInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.createInteger(numeric);	  NumberShort.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	74	None	replace
12	[BUG]  [BUGGY]  NumberShort.parseFloat(numeric);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseFloat(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseFloat(numeric);	  NumberShort.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	74	None	replace
13	[BUG]  [BUGGY]  NumberShort.parseLong(numeric);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseLong(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseLong(numeric);	  NumberShort.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	74	None	replace
14	[BUG]  [BUGGY]  Integer  s  =  Integer.parseInt(numeric.substring(1));  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  s  =  Integer.parseInt(numeric.substring(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  s  =  Integer.parseInt(numeric.substring(1));	  Integer    s    =    Integer.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	65	None	replace
15	[BUG]  [BUGGY]  Integer  s  =  Integer.parseInt(numeric.substring(2));  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  s  =  Integer.parseInt(numeric.substring(2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  s  =  Integer.parseInt(numeric.substring(2));	  Integer    s    =    Integer.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	65	None	replace
16	[BUG]  [BUGGY]  Integer  s  =  Integer.parseInt(numeric)+  1;  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  s  =  Integer.parseInt(numeric)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  s  =  Integer.parseInt(numeric)+  1;	  Integer    s    =    Integer.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	65	None	replace
17	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  }  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createLong(numeric);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
18	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  }  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createLong(numeric);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
19	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createLong(numeric);  }  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createLong(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createLong(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createLong(numeric);    }    	non-compiled	[CE]  not  a  statement	5	None	replace
20	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(0,  2));  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(0,  2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(0,  2));	  Integer    str    =    Integer.parseInt(numeric.substring(2));    	non-compiled	[CE]  not  a  statement	23	None	replace
21	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(2),  str.length());  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(2),  str.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(2),  str.length());	  Integer    str    =    Integer.parseInt(numeric.substring(2));    	non-compiled	[CE]  not  a  statement	23	None	replace
22	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(0,  1));  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(0,  1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(0,  1));	  Integer    str    =    Integer.parseInt(numeric.substring(2));    	non-compiled	[CE]  not  a  statement	23	None	replace
23	[BUG]  [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric,  str);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric,  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toUpperCase(numeric,  str);	  Character    numeric    =    Character.toUpperCase(numeric);    	non-compiled	[CE]  not  a  statement	39	None	replace
24	[BUG]  [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric.charAt(0));  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric.charAt(0));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toUpperCase(numeric.charAt(0));	  Character    numeric    =    Character.toUpperCase(numeric);    	non-compiled	[CE]  not  a  statement	39	None	replace
25	[BUG]  [BUGGY]  String  str  =  str.substring(1,  str.length()  -  2);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(1,  str.length()  -  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(1,  str.length()  -  2);	  String    str    =    str.substring(1,    str.length());    	non-compiled	[CE]  not  a  statement	9	None	replace
26	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createInteger(numeric);    	non-compiled	[CE]  not  a  statement	64	None	replace
27	[BUG]  [BUGGY]  Throwables.wrap(numeric  + ",  is  not  a  valid  number: ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + ",  is  not  a  valid  number: ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + ",  is  not  a  valid  number: ");	  Throwables.wrap(numeric    +   "    is    not    a    valid    number:   ");    	non-compiled	[CE]  not  a  statement	51	None	replace
28	[BUG]  [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number: ",  str);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number: ",  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + "  is  not  a  valid  number: ",  str);	  Throwables.wrap(numeric    +   "    is    not    a    valid    number:   ");    	non-compiled	[CE]  not  a  statement	51	None	replace
29	[BUG]  [BUGGY]  Throwables.wrap(numeric  + ".  is  not  a  valid  number: ");  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + ".  is  not  a  valid  number: ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + ".  is  not  a  valid  number: ");	  Throwables.wrap(numeric    +   "    is    not    a    valid    number:   ");    	non-compiled	[CE]  not  a  statement	51	None	replace
30	[BUG]  [BUGGY]  throw  new  NumberFormatException( " ",  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [CE]  unclosed  string  literal  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( " ",  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( " ",  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));	  throw    new    NumberFormatException(   "   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-'    ||    Character.isDigit(numeric.charAt(0))));    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
31	[BUG]  [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str  + "'  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [CE]  unclosed  string  literal  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "The  number  ' "  +  str  + "'  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "The  number  ' "  +  str  + "'  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));	  throw    new    NumberFormatException(   "   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-'    ||    Character.isDigit(numeric.charAt(0))));    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
32	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(0)))  {  return  createInteger(numeric);  }  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(0)))  {  return  createInteger(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(0)))  {  return  createInteger(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(0)))    {    return    createInteger(numeric);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
33	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  }  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(0)))    {    return    createInteger(numeric);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
34	[BUG]  [BUGGY]  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	66	None	replace
35	[BUG]  [BUGGY]  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	66	None	replace
36	[BUG]  [BUGGY]  new  NumberFormatException(numeric  + "  does  not  exist.   ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  new  NumberFormatException(numeric  + "  does  not  exist.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	new  NumberFormatException(numeric  + "  does  not  exist.   ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	66	None	replace
37	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);	  Character.isDigit(numeric.charAt(1))    &&    isDigits(numeric.charAt(1)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  not  a  statement	55	None	replace
38	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }	  Character.isDigit(numeric.charAt(1))    &&    isDigits(numeric.charAt(1)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  not  a  statement	55	None	replace
39	[BUG]  [BUGGY]  String  str  =  str.substring(0,  number.length());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  number.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  number.length());	  String    str    =    str.substring(1,    number.length());    	non-compiled	[CE]  not  a  statement	76	None	replace
40	[BUG]  [BUGGY]  String  str  =  str.substring(0,  str.length()  -  4);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  str.length()  -  4);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  str.length()  -  4);	  String    str    =    str.substring(0,    str.length());    	non-compiled	[CE]  not  a  statement	17	None	replace
41	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.charAt(0),  str);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.charAt(0),  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric.charAt(0),  str);	  Character    numeric    =    Character.toLowerCase(numeric.charAt(0));    	non-compiled	[CE]  not  a  statement	38	None	replace
42	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.substring(1));  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.substring(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric.substring(1));	  Character    numeric    =    Character.toLowerCase(numeric.charAt(0));    	non-compiled	[CE]  not  a  statement	38	None	replace
43	[BUG]  [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric,  dec);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric,  dec);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toUpperCase(numeric,  dec);	  Character    numeric    =    Character.toLowerCase(numeric,    dec);    	non-compiled	[CE]  not  a  statement	68	None	replace
44	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  dec);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  dec);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  str,  dec);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  not  a  statement	37	None	replace
45	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  ex);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  ex);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  str,  ex);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  not  a  statement	37	None	replace
46	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(mant,  str);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(mant,  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(mant,  str);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  not  a  statement	37	None	replace
47	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  exp);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  str,  exp);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  not  a  statement	37	None	replace
48	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createLong(numeric);    	non-compiled	[CE]  not  a  statement	43	None	replace
49	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createLong(numeric);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createLong(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createLong(numeric);	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createLong(numeric);    	non-compiled	[CE]  not  a  statement	43	None	replace
50	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.n "  +  str);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.n "  +  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.n "  +  str);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.       "    +    str);    	non-compiled	[CE]  not  a  statement	52	None	replace
51	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(2));  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(2));	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	72	None	replace
52	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1),  str);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1),  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1),  str);	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	72	None	replace
53	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(0,  str.length()  -  1));  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(0,  str.length()  -  1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(0,  str.length()  -  1));	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	72	None	replace
54	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  numeric.length()  -  1);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  numeric.length()  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  1,  numeric.length()  -  1);	  Number    number    =    str.substring(0,    str.length()    -    1,    numeric.length());    	non-compiled	[CE]  not  a  statement	56	None	replace
55	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  str.length()  -  1);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  str.length()  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  1,  str.length()  -  1);	  Number    number    =    str.substring(0,    str.length()    -    1,    numeric.length());    	non-compiled	[CE]  not  a  statement	56	None	replace
56	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  numeric.length()  -  2);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  numeric.length()  -  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  1,  numeric.length()  -  2);	  Number    number    =    str.substring(0,    str.length()    -    1,    numeric.length());    	non-compiled	[CE]  not  a  statement	56	None	replace
57	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns  numeric. ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns  numeric. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns  numeric. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    numeric    value    returns    numeric.   ");    	non-compiled	[CE]  not  a  statement	48	None	replace
58	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns. ");  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    numeric    value    returns    numeric.   ");    	non-compiled	[CE]  not  a  statement	48	None	replace
59	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  mant  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  mant  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  mant  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(   "Invalid    number:   "    +    str    +   "    is    not    a    valid    number.   ");    	non-compiled	[CE]  not  a  statement	33	None	replace
60	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str  + ",  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str  + ",  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str  + ",  valid  number.   ");	  throw    new    NumberFormatException(   "Invalid    number:   "    +    str    +   "    is    not    a    valid    number.   ");    	non-compiled	[CE]  not  a  statement	33	None	replace
61	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(2))&&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))  [CE]  ')'  expected  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(2))&&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(2))&&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1))    &&(numeric.charAt(1)    ==    '-'    ||    Character.isDigit(numeric.charAt(1))    	non-compiled	[CE]  ')'  expected	49	None	replace
62	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1))&&(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))  [CE]  ')'  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1))&&(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1))&&(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1))    &&(numeric.charAt(1)    ==    '-'    ||    Character.isDigit(numeric.charAt(1))    	non-compiled	[CE]  ')'  expected	49	None	replace
63	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant,  str);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant,  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant,  str);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	30	None	replace
64	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number. ",  str,  nfe);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number. ",  str,  nfe);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number. ",  str,  nfe);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	30	None	replace
65	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric)/  1;  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric)/  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric)/  1;	  Integer    str    =    Integer.parseInt(numeric)+    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
66	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric)+  2;  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric)+  2;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric)+  2;	  Integer    str    =    Integer.parseInt(numeric)+    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
67	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric)+  1L;  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric)+  1L;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric)+  1L;	  Integer    str    =    Integer.parseInt(numeric)+    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
68	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(2)));  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(2)));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(2)));	  Character.isDigit(numeric.charAt(1)));    	non-compiled	[CE]  ';'  expected	15	None	replace
69	[BUG]  [BUGGY]  Integer  str  =  0;  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  0;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  0;	  Integer    str    =    null;    	non-compiled	[CE]  not  a  statement	46	None	replace
70	[BUG]  [BUGGY]  Integer  str  =  new  Integer(numeric.length());  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  new  Integer(numeric.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  new  Integer(numeric.length());	  Integer    str    =    null;    	non-compiled	[CE]  not  a  statement	46	None	replace
71	[BUG]  [BUGGY]  Integer  str  =  new  Integer(numeric.substring(1));  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  new  Integer(numeric.substring(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  new  Integer(numeric.substring(1));	  Integer    str    =    null;    	non-compiled	[CE]  not  a  statement	46	None	replace
72	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric).intValue()  +  1;  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric).intValue()  +  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric).intValue()  +  1;	  Integer    str    =    Integer.parseInt(numeric).intValue();    	non-compiled	[CE]  not  a  statement	75	None	replace
73	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric).doubleValue();  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric).doubleValue();  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric).doubleValue();	  Integer    str    =    Integer.parseInt(numeric).intValue();    	non-compiled	[CE]  not  a  statement	75	None	replace
74	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1)).intValue();  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1)).intValue();  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(1)).intValue();	  Integer    str    =    Integer.parseInt(numeric).intValue();    	non-compiled	[CE]  not  a  statement	75	None	replace
75	[BUG]  [BUGGY]  String  str  =  str.substring(0,  str.length()  -  1));  [CE]  ';'  expected  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  str.length()  -  1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  str.length()  -  1));	  String    str    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ';'  expected	47	None	replace
76	[BUG]  [BUGGY]  String  str  =  str.substring(0,  str.length()  -  2));  [CE]  ';'  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  str.length()  -  2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  str.length()  -  2));	  String    str    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ';'  expected	47	None	replace
77	[BUG]  [BUGGY]  String  str  =  str.substring(0,  str.length()  +  1));  [CE]  ';'  expected  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  str.length()  +  1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  str.length()  +  1));	  String    str    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ';'  expected	47	None	replace
78	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number. ");	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.n   ");    	non-compiled	[CE]  not  a  statement	28	None	replace
79	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric)+  str.substring(1);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric)+  str.substring(1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric)+  str.substring(1);	  NumberShort.parseNumber(numeric)+    str;    	non-compiled	[CE]  not  a  statement	62	None	replace
80	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric)+  str.substring(0,  str.length()  -  1);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric)+  str.substring(0,  str.length()  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric)+  str.substring(0,  str.length()  -  1);	  NumberShort.parseNumber(numeric)+    str;    	non-compiled	[CE]  not  a  statement	62	None	replace
81	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric)+  str.trim();  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric)+  str.trim();  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric)+  str.trim();	  NumberShort.parseNumber(numeric)+    str;    	non-compiled	[CE]  not  a  statement	62	None	replace
82	[BUG]  [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number.   ",  mant);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number.   ",  mant);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + "  is  not  a  valid  number.   ",  mant);	  Throwables.wrap(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	26	None	replace
83	[BUG]  [BUGGY]  Throwables.wrap(mant  + "  is  not  a  valid  number.   ",  str);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(mant  + "  is  not  a  valid  number.   ",  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(mant  + "  is  not  a  valid  number.   ",  str);	  Throwables.wrap(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	26	None	replace
84	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  1);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  1,  1);	  Number    number    =    str.substring(0,    str.length()    -    1,    null);    	non-compiled	[CE]  not  a  statement	67	None	replace
85	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  new  int[]  {  0  }  );  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  new  int[]  {  0  }  );  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  1,  new  int[]  {  0  }  );	  Number    number    =    str.substring(0,    str.length()    -    1,    null);    	non-compiled	[CE]  not  a  statement	67	None	replace
86	[BUG]  [BUGGY]  Throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	8	None	replace
87	[BUG]  [BUGGY]  Throw  new  NumberFormatException( " ",  str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( " ",  str  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( " ",  str  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	8	None	replace
88	[BUG]  [BUGGY]  NumberShort.parseNumber(mant,  str);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(mant,  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(mant,  str);	  NumberShort.parseNumber(numeric,    str);    	non-compiled	[CE]  not  a  statement	19	None	replace
89	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric,  mant);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric,  mant);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric,  mant);	  NumberShort.parseNumber(numeric,    str);    	non-compiled	[CE]  not  a  statement	19	None	replace
90	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric,  str.substring(1));  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric,  str.substring(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric,  str.substring(1));	  NumberShort.parseNumber(numeric,    str);    	non-compiled	[CE]  not  a  statement	19	None	replace
91	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    less    than    1    character.   ");    	non-compiled	[CE]  not  a  statement	50	None	replace
92	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    less    than    1    character.   ");    	non-compiled	[CE]  not  a  statement	50	None	replace
93	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1),  str.length());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1),  str.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(1),  str.length());	  Integer    str    =    Integer.parseInt(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	22	None	replace
94	[BUG]  [BUGGY]  throw  new  NumberFormatException( " "  +  mant  + "  is  not  a  valid  number.. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( " "  +  mant  + "  is  not  a  valid  number.. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( " "  +  mant  + "  is  not  a  valid  number.. ");	  throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	7	None	replace
95	[BUG]  [BUGGY]  Throwables.throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number. ");  [CE]  <identifier>  expected  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number. ");	  throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
96	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0),  str);  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0),  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0),  str);	  Character.isDigit(numeric.charAt(0));    	non-compiled	[CE]  not  a  statement	14	None	replace
97	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createLong(numeric);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createLong(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createLong(numeric);	  Character.isDigit(numeric.substring(1))    &&    isDigits(numeric.charAt(0)))    {    return    createLong(numeric);    	non-compiled	[CE]  not  a  statement	44	None	replace
98	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createLong(numeric);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createLong(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createLong(numeric);	  Character.isDigit(numeric.substring(1))    &&    isDigits(numeric.charAt(0)))    {    return    createLong(numeric);    	non-compiled	[CE]  not  a  statement	44	None	replace
99	[BUG]  [BUGGY]  String  str  =  str.substring(0,  string.length());  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  string.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  string.length());	  String    str    =    str.substring(1,    string.length());    	non-compiled	[CE]  not  a  statement	60	None	replace
100	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createLong(numeric);  }  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createLong(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createLong(numeric);  }	  Character.isDigit(numeric.substring(1))    &&    isDigits(numeric.charAt(0)))    {    return    createLong(numeric);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
101	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createLong(numeric);  }  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createLong(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createLong(numeric);  }	  Character.isDigit(numeric.substring(1))    &&    isDigits(numeric.charAt(0)))    {    return    createLong(numeric);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
102	[BUG]  [BUGGY]  NumberShort.parseNumber(mant);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(mant);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(mant);	  NumberShort.parseNumber(str);    	non-compiled	[CE]  not  a  statement	20	None	replace
103	[BUG]  [BUGGY]  NumberShort.createNumber(numeric);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.createNumber(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.createNumber(numeric);	  NumberShort.parseNumber(str);    	non-compiled	[CE]  not  a  statement	20	None	replace
104	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  }  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createInteger(numeric);    }    	non-compiled	[CE]  not  a  statement	58	None	replace
105	[BUG]  [BUGGY]  Throwables.wrap(numeric  + ",  is  not  a  valid  number. ",  str);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + ",  is  not  a  valid  number. ",  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + ",  is  not  a  valid  number. ",  str);	  Throwables.wrap(numeric    +   ",    is    not    a    valid    number.   ");    	non-compiled	[CE]  not  a  statement	27	None	replace
106	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric.substring(1),  str);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric.substring(1),  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric.substring(1),  str);	  NumberShort.parseNumber(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	21	None	replace
107	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric.substring(2));  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric.substring(2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric.substring(2));	  NumberShort.parseNumber(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	21	None	replace
108	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric.substring(0,  str.length()  -  1));  [CE]  not  a  statement  [FE]                      NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric.substring(0,  str.length()  -  1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric.substring(0,  str.length()  -  1));	  NumberShort.parseNumber(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	21	None	replace
109	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric.substring(0,  str.length()));  [CE]  not  a  statement  [FE]                        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric.substring(0,  str.length()));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric.substring(0,  str.length()));	  NumberShort.parseNumber(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	21	None	replace
110	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  numeric. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  numeric. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  is  numeric. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    numeric.   ");    	non-compiled	[CE]  not  a  statement	40	None	replace
111	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number,  please  check  that  the  number  is  numeric. ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number,  please  check  that  the  number  is  numeric. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number,  please  check  that  the  number  is  numeric. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    numeric.   ");    	non-compiled	[CE]  not  a  statement	40	None	replace
112	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0)))  {  return  createBigInteger(numeric);  }  [CE]  unclosed  string  literal  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0)))  {  return  createBigInteger(numeric);  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0)))  {  return  createBigInteger(numeric);  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    return    createBigInteger(numeric);    }    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
113	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  return  createBigInteger(numeric);  }  [CE]  unclosed  string  literal  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  return  createBigInteger(numeric);  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  return  createBigInteger(numeric);  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    return    createBigInteger(numeric);    }    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
114	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }  [CE]  unclosed  string  literal  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    return    createBigInteger(numeric);    }    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
115	[BUG]  [BUGGY]  Throwables.throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number. ");  [CE]  <identifier>  expected  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number. ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
116	[BUG]  [BUGGY]  Throwables.newNumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.newNumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.newNumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number. ");	  throw    new    NumberFormatException(       "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    throw    new    NumberFormatException(   "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	35	None	replace
117	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  Character.isDigit(numeric.charAt(0));  [CE]  <identifier>  expected  [FE]    NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  Character.isDigit(numeric.charAt(0));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    Character.isDigit(numeric.charAt(0));	  	non-compiled	[CE]  <identifier>  expected	13	None	add
118	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  Character.isDigit(numeric.charAt(1));  [CE]  <identifier>  expected  [FE]      NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  Character.isDigit(numeric.charAt(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    Character.isDigit(numeric.charAt(1));	  	non-compiled	[CE]  <identifier>  expected	13	None	add
119	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  String  str  =  str.substring(0,  str.length()  -  1);  [CE]  <identifier>  expected  [FE]        NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  String  str  =  str.substring(0,  str.length()  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    String  str  =  str.substring(0,  str.length()  -  1);	  	non-compiled	[CE]  <identifier>  expected	13	None	add
120	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  Character.isDigit(numeric.charAt(2));  [CE]  <identifier>  expected  [FE]          NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  Character.isDigit(numeric.charAt(2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    Character.isDigit(numeric.charAt(2));	  	non-compiled	[CE]  <identifier>  expected	13	None	add
121	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  Number.isDigit(numeric.charAt(0));  [CE]  <identifier>  expected  [FE]            NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  Number.isDigit(numeric.charAt(0));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    Number.isDigit(numeric.charAt(0));	  	non-compiled	[CE]  <identifier>  expected	13	None	add
122	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant);	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	1	None	replace
123	[BUG]  [BUGGY]  Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));	  Throw    new    NumberFormatException(String.format(   "Number    format    exception:    %s    is    not    a    valid    number.   ",    str));    	non-compiled	[CE]  not  a  statement	71	None	replace
124	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    does    not    exist.   ");    	non-compiled	[CE]  not  a  statement	2	None	replace
125	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    does    not    exist.   ");    	non-compiled	[CE]  not  a  statement	2	None	replace
126	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric.substring(1));  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric.substring(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric.substring(1));	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
127	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric.substring(2));  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric.substring(2));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric.substring(2));	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
128	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric.intValue());  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric.intValue());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric.intValue());	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
129	[BUG]  [BUGGY]  Pattern.matcher(numeric.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  str));  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Pattern.matcher(numeric.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  str));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Pattern.matcher(numeric.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  str));	  throw    new    NumberFormatException(String.format(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    mant));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
130	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1)),  str);  [CE]  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1)),  str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1)),  str);	  Character.isDigit(numeric.charAt(0)),    str);    	non-compiled	[CE]  	16	None	replace
131	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0)),  lastChar);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0)),  lastChar);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0)),  lastChar);	  Character.isDigit(numeric.charAt(0)),    str);    	non-compiled	[CE]  	16	None	replace
132	[BUG]  [BUGGY]  String.format( "Number  format  exception:  %s  is  not  a  valid  number.n ",  str));  [CE]  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String.format( "Number  format  exception:  %s  is  not  a  valid  number.n ",  str));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String.format( "Number  format  exception:  %s  is  not  a  valid  number.n ",  str));	  String.format(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    str));    	non-compiled	[CE]  	11	None	replace
133	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createBigInteger(numeric);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createBigInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.substring(1)))  {  return  createBigInteger(numeric);	  Character.isDigit(numeric.substring(1))    &&    isDigits(numeric.charAt(0)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  not  a  statement	4	None	replace
134	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number. ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number. ");	  throw    new    NumberFormatException(       "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(   "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	36	None	replace
135	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  does  not  exist.   ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  does  not  exist.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  does  not  exist.   ");	  throw    new    NumberFormatException(       "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(   "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	36	None	replace
136	[BUG]  [BUGGY]  Integer  str  =  numeric.intValue()  +  1;  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  numeric.intValue()  +  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  numeric.intValue()  +  1;	  Integer    str    =    numeric.intValue();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
137	[BUG]  [BUGGY]  Integer  str  =  numeric.intValue()  -  1;  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  numeric.intValue()  -  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  numeric.intValue()  -  1;	  Integer    str    =    numeric.intValue();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
138	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createBigInteger(numeric);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createBigInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))  &&  isDigits(numeric.charAt(2)))  {  return  createBigInteger(numeric);	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  not  a  statement	3	None	replace
139	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  mant  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  mant  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( "Number  format  exception: "  +  mant  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(       "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(   "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	36	None	replace
140	[BUG]  [BUGGY]  Throw  new  NumberFormatException( " ",  +  str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( " ",  +  str  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( " ",  +  str  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	8	None	replace
141	[BUG]  [BUGGY]  Throw  new  NumberFormatException( " "  +  mant  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( " "  +  mant  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( " "  +  mant  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(       "       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	8	None	replace
142	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  mant  + "  is  not  a  valid  number.n ");  [CE]  <identifier>  expected  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  mant  + "  is  not  a  valid  number.n ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  mant  + "  is  not  a  valid  number.n ");	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.n   ");    	non-compiled	[CE]  <identifier>  expected	28	None	replace
143	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric,  str  +  1);  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric,  str  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric,  str  +  1);	  NumberShort.parseNumber(numeric,    str);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
144	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  must  be  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [CE]  <identifier>  expected  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  must  be  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  must  be  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    less    than    1    character.   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
145	[BUG]  [BUGGY]  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [CE]  <identifier>  expected  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1  character. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    less    than    1    character.   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
146	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [CE]  unclosed  string  literal  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "Invalid    number:   "    +    str    +   "    is    not    a    valid    number.   ");    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
147	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.substring(2))  &&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))  [CE]  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.substring(2))  &&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.substring(2))  &&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))	  Character.isDigit(numeric.charAt(1)));    	non-compiled	[CE]  	15	None	replace
148	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.charAt(0)  +  1);  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.charAt(0)  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric.charAt(0)  +  1);	  Character    numeric    =    Character.toLowerCase(numeric.charAt(0));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
149	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.n ");  [CE]  <identifier>  expected  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.n ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.n ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
150	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");  [CE]  <identifier>  expected  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist. ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  <identifier>  expected	31	None	replace
151	[BUG]  [BUGGY]  String.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [CE]  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));	  String.format(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    str));    	non-compiled	[CE]  	11	None	replace
152	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(2),  numeric.length());  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(2),  numeric.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(2),  numeric.length());	  Integer    str    =    Integer.parseInt(numeric.substring(2));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
153	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(2),  1);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(2),  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(2),  1);	  Integer    str    =    Integer.parseInt(numeric.substring(2));    	non-compiled	[CE]  <identifier>  expected	23	None	replace
154	[BUG]  [BUGGY]  String  str  =  NUMBER_FORMAT.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [CE]  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  NUMBER_FORMAT.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  NUMBER_FORMAT.format( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));	  throw    new    NumberFormatException(String.format(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    mant));    	non-compiled	[CE]  	12	None	replace
155	[BUG]  [BUGGY]  throw  new  NumberFormatException( " ",  numeric  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [CE]  unclosed  string  literal  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( " ",  numeric  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( " ",  numeric  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));	  throw    new    NumberFormatException(   "   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-'    ||    Character.isDigit(numeric.charAt(0))));    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
156	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns  numeric. ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns  numeric. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  numeric  value  returns  numeric. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    numeric    value    returns    numeric.   ");    	non-compiled	[CE]  not  a  statement	48	None	replace
157	[BUG]  [BUGGY]  String  msg( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [CE]  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  msg( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  msg( "Number  format  exception:  %s  is  not  a  valid  number.   ",  mant));	  String    msg(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    str));    	non-compiled	[CE]  	61	None	replace
158	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createLong(numeric);	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createLong(numeric);    	non-compiled	[CE]  not  a  statement	43	None	replace
159	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric,  numeric  + "  is  not  a  valid  number.   ",  str);  [CE]  <identifier>  expected  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric,  numeric  + "  is  not  a  valid  number.   ",  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric,  numeric  + "  is  not  a  valid  number.   ",  str);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
160	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec,  str);  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec,  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec,  str);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
161	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  mant);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
162	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + "  does  not  support  valid  number. ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + "  does  not  support  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + "  does  not  support  valid  number. ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	32	None	replace
163	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  nfe);  [CE]  <identifier>  expected  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str,  nfe);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  str,  nfe);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
164	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  mant);  [CE]  <identifier>  expected  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  mant);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  mant);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
165	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric)+  mant;  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric)+  mant;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric)+  mant;	  NumberShort.parseNumber(numeric)+    str;    	non-compiled	[CE]  not  a  statement	62	None	replace
166	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric)/  str;  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric)/  str;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric)/  str;	  NumberShort.parseNumber(numeric)+    str;    	non-compiled	[CE]  not  a  statement	62	None	replace
167	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   "  +  mant);  [CE]  <identifier>  expected  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   "  +  mant);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   "  +  mant);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.       "    +    str);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
168	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   "  +  str,  nfe);  [CE]  <identifier>  expected  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   "  +  str,  nfe);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   "  +  str,  nfe);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.       "    +    str);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
169	[BUG]  [BUGGY]  String  str  =  str.substring(1,  number.length()  -  2);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(1,  number.length()  -  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(1,  number.length()  -  2);	  String    str    =    str.substring(1,    number.length());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
170	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(1)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [CE]  unclosed  string  literal  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(1)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(1)  ==  '-')  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
171	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric,  0);  [CE]  <identifier>  expected  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric,  0);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric,  0);	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
172	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric,  1);  [CE]  <identifier>  expected  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric,  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric,  1);	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
173	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric,  4);  [CE]  <identifier>  expected  [FE]                      NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric,  4);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric,  4);	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
174	[BUG]  [BUGGY]  new  NumberFormatException(numeric  + "  does  not  support  valid  number. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  new  NumberFormatException(numeric  + "  does  not  support  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	new  NumberFormatException(numeric  + "  does  not  support  valid  number. ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	66	None	replace
175	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  NumberUtils.isDigit(numeric.charAt(0));  [CE]  not  a  statement  [FE]    NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  NumberUtils.isDigit(numeric.charAt(0));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    NumberUtils.isDigit(numeric.charAt(0));	  	non-compiled	[CE]  not  a  statement	13	None	add
176	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  NumberFormatException  e  =  new  NumberFormatException(str);  [CE]  not  a  statement  [FE]      NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  NumberFormatException  e  =  new  NumberFormatException(str);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    NumberFormatException  e  =  new  NumberFormatException(str);	  	non-compiled	[CE]  not  a  statement	13	None	add
177	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0));  NumberUtils.isDigit(numeric.charAt(1));  [CE]  not  a  statement  [FE]        NumberFormatException    [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0));  NumberUtils.isDigit(numeric.charAt(1));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0));    NumberUtils.isDigit(numeric.charAt(1));	  	non-compiled	[CE]  not  a  statement	13	None	add
178	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createInteger(numeric);    	non-compiled	[CE]  not  a  statement	64	None	replace
179	[BUG]  [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number.   ",  dec);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number.   ",  dec);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + "  is  not  a  valid  number.   ",  dec);	  Throwables.wrap(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	26	None	replace
180	[BUG]  [BUGGY]  &&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  [CE]  illegal  start  of  expression  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  &&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	&&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);	  Character.isDigit(numeric.charAt(1))    &&    isDigits(numeric.charAt(1)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
181	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(1)  ==  '-')  {  return  createBigInteger(numeric);  }  [CE]  unclosed  string  literal  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(1)  ==  '-')  {  return  createBigInteger(numeric);  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(1)  ==  '-')  {  return  createBigInteger(numeric);  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    return    createBigInteger(numeric);    }    	non-compiled	[CE]  unclosed  string  literal	54	None	replace
182	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  +  str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  +  str  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  +  str  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(   "   "    +    mant    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	34	None	replace
183	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  3);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  3);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  3);	  Number    number    =    str.substring(0,    str.length());    	non-compiled	[CE]  not  a  statement	41	None	replace
184	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0)),  dec);  [CE]  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0)),  dec);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0)),  dec);	  Character.isDigit(numeric.charAt(0)),    str);    	non-compiled	[CE]  	16	None	replace
185	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1)),  dec);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1)),  dec);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1)),  dec);	  Character.isDigit(numeric.charAt(0)),    str);    	non-compiled	[CE]  	16	None	replace
186	[BUG]  [BUGGY]  String  str  =  str.substring(1,  str.length()));  [CE]  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(1,  str.length()));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(1,  str.length()));	  String    str    =    str.substring(0,    str.length()));    	non-compiled	[CE]  	47	None	replace
187	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist: ");  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist: ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  does  not  exist: ");	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    does    not    exist.   ");    	non-compiled	[CE]  not  a  statement	2	None	replace
188	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.  Please  check  that  the  number  is  less  than  1. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    numeric.   ");    	non-compiled	[CE]  not  a  statement	40	None	replace
189	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  }  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))  &&  isDigits(numeric.charAt(1)))  {  return  createInteger(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(0)))    {    return    createInteger(numeric);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
190	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec);	  Throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	1	None	replace
191	[BUG]  [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number: ",  numeric);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throwables.wrap(numeric  + "  is  not  a  valid  number: ",  numeric);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throwables.wrap(numeric  + "  is  not  a  valid  number: ",  numeric);	  Throwables.wrap(numeric    +   "    is    not    a    valid    number:   ");    	non-compiled	[CE]  not  a  statement	51	None	replace
192	[BUG]  [BUGGY]  Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  str),  nfe);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  str),  nfe);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  str),  nfe);	  Throw    new    NumberFormatException(String.format(   "Number    format    exception:    %s    is    not    a    valid    number.   ",    str));    	non-compiled	[CE]  not  a  statement	71	None	replace
193	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1),  numeric.length());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1),  numeric.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(1),  numeric.length());	  Integer    str    =    Integer.parseInt(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	22	None	replace
194	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1),  1);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric.substring(1),  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric.substring(1),  1);	  Integer    str    =    Integer.parseInt(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	22	None	replace
195	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  numeric  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  numeric  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  numeric  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    mant    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	53	None	replace
196	[BUG]  [BUGGY]  String  str  =  str.substring(1,  node.length());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(1,  node.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(1,  node.length());	  String    str    =    str.substring(1,    number.length()    -    1);    	non-compiled	[CE]  not  a  statement	59	None	replace
197	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(1))&&  isDigits(numeric.charAt(0)))  {  return  createBigInteger(numeric);	  Character.isDigit(numeric.substring(1))    &&    isDigits(numeric.charAt(0)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  not  a  statement	4	None	replace
198	[BUG]  [BUGGY]  Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(numeric,  str  + "  is  not  a  valid  number.   ");	  Throw    new    NumberFormatException(numeric    +   ",    is    not    a    valid    number.   ");    	non-compiled	[CE]  not  a  statement	69	None	replace
199	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(0));  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(0));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(0));	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1));    	non-compiled	[CE]  not  a  statement	72	None	replace
200	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   "  +  str);  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   "  +  str);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   "  +  str);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.       "    +    str);    	non-compiled	[CE]  not  a  statement	52	None	replace
201	[BUG]  [BUGGY]  Integer  str  =  Integer.parseInt(numeric)+  4;  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  Integer.parseInt(numeric)+  4;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  Integer.parseInt(numeric)+  4;	  Integer    str    =    Integer.parseInt(numeric)+    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
202	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec);  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number.   ",  dec);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	30	None	replace
203	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   ",  dec);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   ",  dec);  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + ",  is  not  a  valid  number.   ",  dec);	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.   ",    str);    	non-compiled	[CE]  not  a  statement	30	None	replace
204	[BUG]  [BUGGY]  NumberShort.parse(numeric);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parse(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parse(numeric);	  NumberShort.parseNumber(str);    	non-compiled	[CE]  not  a  statement	20	None	replace
205	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  str.length());  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  -  1,  str.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  -  1,  str.length());	  Number    number    =    str.substring(0,    str.length());    	non-compiled	[CE]  not  a  statement	41	None	replace
206	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [CE]  unclosed  string  literal  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Invalid  number: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Invalid  number: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));	  throw    new    NumberFormatException(   "   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-'    ||    Character.isDigit(numeric.charAt(0))));    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
207	[BUG]  [BUGGY]  throw  new  NumberFormatException( " "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [CE]  unclosed  string  literal  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( " "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( " "  +  str  + ",  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))));	  throw    new    NumberFormatException(   "   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-'    ||    Character.isDigit(numeric.charAt(0))));    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
208	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  return  createBigInteger(numeric);  }  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  return  createBigInteger(numeric);  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  return  createBigInteger(numeric);  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    return    createBigInteger(numeric);    }    	non-compiled	[CE]  not  a  statement	54	None	replace
209	[BUG]  [BUGGY]  NumberShort.parseDouble(numeric);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseDouble(numeric);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseDouble(numeric);	  NumberShort.parseInt(numeric);    	non-compiled	[CE]  not  a  statement	74	None	replace
210	[BUG]  [BUGGY]  Integer  str  =  this.numeric.intValue();  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  this.numeric.intValue();  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  this.numeric.intValue();	  Integer    str    =    numeric.intValue();    	non-compiled	[CE]  not  a  statement	45	None	replace
211	[BUG]  [BUGGY]  throw  new  NumberFormatException( " "  +  dec  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( " "  +  dec  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( " "  +  dec  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(   "   "    +    mant    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	34	None	replace
212	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric,  dec  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric,  dec  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric,  dec  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(   "   "    +    mant    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	34	None	replace
213	[BUG]  [BUGGY]  String  msg( "Number  format  exception:  %s  is  not  a  valid  number. ",  dec));  [CE]  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  msg( "Number  format  exception:  %s  is  not  a  valid  number. ",  dec));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  msg( "Number  format  exception:  %s  is  not  a  valid  number. ",  dec));	  String    msg(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    str));    	non-compiled	[CE]  	61	None	replace
214	[BUG]  [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric).charAt(0);  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toUpperCase(numeric).charAt(0);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toUpperCase(numeric).charAt(0);	  Character    numeric    =    Character.toUpperCase(numeric);    	non-compiled	[CE]  not  a  statement	39	None	replace
215	[BUG]  [BUGGY]  Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  string));  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  string));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  string));	  Throw    new    NumberFormatException(String.format(   "Number    format    exception:    %s    is    not    a    valid    number.   ",    str));    	non-compiled	[CE]  not  a  statement	71	None	replace
216	[BUG]  [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number,  Please  check  that  the  number  is  numeric. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number,  Please  check  that  the  number  is  numeric. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(numeric  + "  is  not  a  valid  number,  Please  check  that  the  number  is  numeric. ");	  throw    new    NumberFormatException(numeric    +   "    is    not    a    valid    number.    Please    check    that    the    number    is    numeric.   ");    	non-compiled	[CE]  not  a  statement	40	None	replace
217	[BUG]  [BUGGY]  NumberShort.parseNumber(numeric,  str));  [CE]  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  NumberShort.parseNumber(numeric,  str));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	NumberShort.parseNumber(numeric,  str));	  NumberShort.parseNumber(numeric,    str);    	non-compiled	[CE]  	19	None	replace
218	[BUG]  [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.substring(1))  &&  isDigits(numeric.charAt(1)))  {  return  createBigInteger(numeric);  }	  Character.isDigit(numeric.charAt(0))&&    isDigits(numeric.charAt(1)))    {    return    createBigInteger(numeric);    	non-compiled	[CE]  not  a  statement	3	None	replace
219	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str.charAt(0));  [CE]  not  a  statement  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  str.charAt(0));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  str.charAt(0));	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  not  a  statement	37	None	replace
220	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  desc);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric,  desc);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric,  desc);	  Character    numeric    =    Character.toLowerCase(numeric,    str);    	non-compiled	[CE]  not  a  statement	37	None	replace
221	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric).intValue();  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric).intValue();  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric).intValue();	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  not  a  statement	77	None	replace
222	[BUG]  [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric)+  1;  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  NumberUtils.createInteger(numeric)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  NumberUtils.createInteger(numeric)+  1;	  Integer    str    =    NumberUtils.createInteger(numeric);    	non-compiled	[CE]  not  a  statement	77	None	replace
223	[BUG]  [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  dec  + "  is  not  a  valid  number.   ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException( "Number  format  exception: "  +  dec  + "  is  not  a  valid  number.   ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException( "Number  format  exception: "  +  dec  + "  is  not  a  valid  number.   ");	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    mant    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	53	None	replace
224	[BUG]  [BUGGY]  String  str  =  str.substring(1,  null.length());  [CE]  not  a  statement  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(1,  null.length());  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(1,  null.length());	  String    str    =    str.substring(1,    number.length()    -    1);    	non-compiled	[CE]  not  a  statement	59	None	replace
225	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  valid  number. ");  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  valid  number. ");	  throw    new    NumberFormatException(       "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    Throw    new    NumberFormatException(   "Number    format    exception:       "    +    str    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	36	None	replace
226	[BUG]  [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.charAt(0),  dec);  [CE]  not  a  statement  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character  numeric  =  Character.toLowerCase(numeric.charAt(0),  dec);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character  numeric  =  Character.toLowerCase(numeric.charAt(0),  dec);	  Character    numeric    =    Character.toLowerCase(numeric.charAt(0));    	non-compiled	[CE]  not  a  statement	38	None	replace
227	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()  1,  null);  [CE]  [FE]              NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()  1,  null);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()  1,  null);	  Number    number    =    str.substring(0,    str.length()    -    1,    null);    	non-compiled	[CE]  	67	None	replace
228	[BUG]  [BUGGY]  Number  number  =  str.substring(0,  str.length()),  null);  [CE]  <identifier>  expected  [FE]                NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Number  number  =  str.substring(0,  str.length()),  null);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Number  number  =  str.substring(0,  str.length()),  null);	  Number    number    =    str.substring(0,    str.length()    -    1,    null);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
229	[BUG]  [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(0))&&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))  [CE]  [FE]            NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(0))&&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Character.isDigit(numeric.charAt(0))&&  isDigits(numeric.charAt(0))&&(numeric.charAt(1)  ==  '-'  ||  Character.isDigit(numeric.charAt(1))	  Character.isDigit(numeric.charAt(0))    &&    isDigits(numeric.substring(1))    &&(numeric.charAt(1)    ==    '-'    ||    Character.isDigit(numeric.charAt(1))    	non-compiled	[CE]  	49	None	replace
230	[BUG]  [BUGGY]  new  NumberFormatException(numeric  + "  does  not  valid  number. ");  [CE]  not  a  statement  [FE]        NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  new  NumberFormatException(numeric  + "  does  not  valid  number. ");  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	new  NumberFormatException(numeric  + "  does  not  valid  number. ");	  throw    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    new    NumberFormatException(numeric    +       "    is    not    a    valid    number.       ");    	non-compiled	[CE]  not  a  statement	66	None	replace
231	[BUG]  [BUGGY]  Integer  str  =  new  Integer(0);  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Integer  str  =  new  Integer(0);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Integer  str  =  new  Integer(0);	  Integer    str    =    null;    	non-compiled	[CE]  not  a  statement	46	None	replace
232	[BUG]  [BUGGY]  String  str  =  str.substring(0,  str.length()  -  3);  [CE]  not  a  statement  [FE]                  NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  String  str  =  str.substring(0,  str.length()  -  3);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	String  str  =  str.substring(0,  str.length()  -  3);	  String    str    =    str.substring(0,    str.length());    	non-compiled	[CE]  not  a  statement	17	None	replace
233	[BUG]  [BUGGY]  throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  string));  [CE]  not  a  statement  [FE]                    NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  string));  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	throw  new  NumberFormatException(String.format( "Number  format  exception:  %s  is  not  a  valid  number. ",  string));	  throw    new    NumberFormatException(String.format(   "Number    format    exception:    %s    is    not    a    valid    number.       ",    mant));    	non-compiled	[CE]  not  a  statement	12	None	replace
234	[BUG]  [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [CE]  not  a  statement  [FE]          NumberFormatException      [CONTEXT]      &&  isDigits(numeric.substring(1))  &&  (numeric.charAt(0)  ==  '-'  ||  Character.isDigit(numeric.charAt(0))))  {  try  {  return  createLong(numeric);  }  catch  (NumberFormatException  nfe)  {  }  return  createBigInteger(numeric);  }      [BUGGY]  Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      case  'f'  :  case  'F'  :  try  {  Float  f  =  NumberUtils.createFloat(numeric);  if  (!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&  !allZeros)))  {    return  f;  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	Throw  new  NumberFormatException( "Number  format  exception: "  +  str  + "  is  not  a  valid  number.  If(numeric.charAt(0)  ==  '-')  {  throw  new  NumberFormatException( " ");  }	  throw    new    NumberFormatException(   "Number    format    exception:   "    +    str    +   "    is    not    a    valid    number.    If(numeric.charAt(0)    ==    '-')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  not  a  statement	29	None	replace
