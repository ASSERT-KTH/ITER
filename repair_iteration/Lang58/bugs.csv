bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [FE] NumberFormatException [CONTEXT] && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [BUGGY] case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {   return f; }  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	replace	
2	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [BUGGY] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {   return f; }  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	464	464	1	add	
3	[BUG] [BUGGY] return false; [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { [BUGGY] return false; [BUGGY] } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	1508	1508	1	replace	
4	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { [BUGGY] [BUGGY] return false; } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.7071067811865475	1508	1508	1	add	
5	[BUG] [BUGGY] if (str == null) { [FE] NumberFormatException [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { [BUGGY] if (str == null) { [BUGGY] return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	398	398	1	replace	
6	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { [BUGGY] [BUGGY] if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	398	398	1	add	
7	[BUG] [BUGGY] if (StringUtils.isBlank(str)) { [FE] NumberFormatException [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } [BUGGY] if (StringUtils.isBlank(str)) { [BUGGY] throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	401	401	1	replace	
8	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } [BUGGY] [BUGGY] if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	401	401	1	add	
9	[BUG] [BUGGY] if (str.startsWith("--")) { [FE] NumberFormatException [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } [BUGGY] if (str.startsWith("--")) { [BUGGY]     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	404	404	1	replace	
10	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } [BUGGY] [BUGGY] if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	404	404	1	add	
11	[BUG] [BUGGY] if (str.startsWith("0x") || str.startsWith("-0x")) { [FE] NumberFormatException [CONTEXT] if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     return null; } [BUGGY] if (str.startsWith("0x") || str.startsWith("-0x")) { [BUGGY] return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	411	411	1	replace	
12	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     return null; } [BUGGY] [BUGGY] if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	411	411	1	add	
13	[BUG] [BUGGY] char lastChar = str.charAt(str.length() - 1); [FE] NumberFormatException [CONTEXT] if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } [BUGGY] char lastChar = str.charAt(str.length() - 1); [BUGGY] String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	414	414	1	replace	
14	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } [BUGGY] [BUGGY] char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	414	414	1	add	
15	[BUG] [BUGGY] int decPos = str.indexOf('.'); [FE] NumberFormatException [CONTEXT]  return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; [BUGGY] int decPos = str.indexOf('.'); [BUGGY] int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	418	418	1	replace	
16	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT]  return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; [BUGGY] [BUGGY] int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	418	418	1	add	
17	[BUG] [BUGGY] int expPos = str.indexOf('e') + str.indexOf('E') + 1; [FE] NumberFormatException [CONTEXT] return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); [BUGGY] int expPos = str.indexOf('e') + str.indexOf('E') + 1; [BUGGY]  if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	419	419	1	replace	
18	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); [BUGGY] [BUGGY] int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	419	419	1	add	
19	[BUG] [BUGGY] if (decPos > -1) { [FE] NumberFormatException [CONTEXT] if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; [BUGGY] if (decPos > -1) { [BUGGY]  if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	421	421	1	replace	
20	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; [BUGGY] [BUGGY] if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	421	421	1	add	
21	[BUG] [BUGGY] if (expPos > -1) { [FE] NumberFormatException [CONTEXT] if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { [BUGGY] if (expPos > -1) { [BUGGY] mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	433	433	1	replace	
22	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] if (expPos > -1) { if (expPos < decPos) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { [BUGGY] [BUGGY] if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	433	433	1	add	
23	[BUG] [BUGGY] mant = str; [FE] NumberFormatException [CONTEXT] } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { [BUGGY] mant = str; [BUGGY] } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	436	436	1	replace	
24	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { [BUGGY] [BUGGY] mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	436	436	1	add	
25	[BUG] [BUGGY] dec = null; [FE] NumberFormatException [CONTEXT] } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } [BUGGY] dec = null; [BUGGY] } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	438	438	1	replace	
26	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } [BUGGY] [BUGGY] dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	438	438	1	add	
27	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	440	440	1	replace	
28	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] } mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	440	440	1	add	
29	[BUG] [BUGGY] if (expPos > -1 && expPos < str.length() - 1) { [FE] NumberFormatException [CONTEXT] mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar)) { [BUGGY] if (expPos > -1 && expPos < str.length() - 1) { [BUGGY] exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	441	441	1	replace	
30	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] mant = str.substring(0, decPos); } else { if (expPos > -1) { mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar)) { [BUGGY] [BUGGY] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	441	441	1	add	
31	[BUG] [BUGGY] exp = null; [FE] NumberFormatException [CONTEXT] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { [BUGGY] exp = null; [BUGGY] } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	444	444	1	replace	
32	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { [BUGGY] [BUGGY] exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	444	444	1	add	
33	[BUG] [BUGGY] String numeric = str.substring(0, str.length() - 1); [FE] NumberFormatException [CONTEXT] } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  [BUGGY] String numeric = str.substring(0, str.length() - 1); [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	447	447	1	replace	
34	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  [BUGGY] [BUGGY] String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	447	447	1	add	
35	[BUG] [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [FE] NumberFormatException [CONTEXT] dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	448	448	1	replace	
36	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); [BUGGY] [BUGGY] boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	448	448	1	add	
37	[BUG] [BUGGY] switch (lastChar) { [FE] NumberFormatException [CONTEXT] } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] switch (lastChar) { [BUGGY] case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	replace	
38	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] [BUGGY] switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	449	449	1	add	
39	[BUG] [BUGGY] if (dec == null  && exp == null   && isDigits(numeric.substring(1)) [FE] NumberFormatException [CONTEXT] exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [BUGGY] if (dec == null      && exp == null            && isDigits(numeric.substring(1)) [BUGGY] && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric);  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	452	454	1	replace	
40	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; }  String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : [BUGGY] [BUGGY] if (dec == null      && exp == null            && isDigits(numeric.substring(1)) && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric);  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	452	454	1	add	
41	[BUG] [BUGGY] return createLong(numeric); [FE] NumberFormatException [CONTEXT] if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { [BUGGY] return createLong(numeric); [BUGGY] } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	457	457	1	replace	
42	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] if (dec == null && exp == null && isDigits(numeric.substring(1)) && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) { try { [BUGGY] [BUGGY] return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	457	457	1	add	
43	[BUG] [BUGGY] if (str == null) { [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { [BUGGY] if (str == null) { [BUGGY] return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	556	556	1	replace	
44	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { [BUGGY] [BUGGY] if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	556	556	1	add	
45	[BUG] [BUGGY] for (int i = str.length() - 1; i >= 0; i--) { [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } [BUGGY] for (int i = str.length() - 1; i >= 0; i--) { [BUGGY] if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	559	559	1	replace	
46	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } [BUGGY] [BUGGY] for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	559	559	1	add	
47	[BUG] [BUGGY] if (str.charAt(i) != '0') { [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { [BUGGY] if (str.charAt(i) != '0') { [BUGGY] return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	560	560	1	replace	
48	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { [BUGGY] [BUGGY] if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	560	560	1	add	
49	[BUG] [BUGGY] return false; [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { [BUGGY] return false; [BUGGY] } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	561	561	1	replace	
50	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { [BUGGY] [BUGGY] return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5773502691896258	561	561	1	add	
51	[BUG] [BUGGY] if (str == null) { [FE] NumberFormatException [CONTEXT] public static Long createLong(String str) { [BUGGY] if (str == null) { [BUGGY] return null; } return Long.valueOf(str); } [CLASS] NumberUtils [METHOD] createLong [RETURN_TYPE] Long  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	628	628	1	replace	
52	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static Long createLong(String str) { [BUGGY] [BUGGY] if (str == null) { return null; } return Long.valueOf(str); } [CLASS] NumberUtils [METHOD] createLong [RETURN_TYPE] Long  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	628	628	1	add	
53	[BUG] [BUGGY] return Long.valueOf(str); [FE] NumberFormatException [CONTEXT] public static Long createLong(String str) { if (str == null) { return null; } [BUGGY] return Long.valueOf(str); [BUGGY] } [CLASS] NumberUtils [METHOD] createLong [RETURN_TYPE] Long  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	631	631	1	replace	
54	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static Long createLong(String str) { if (str == null) { return null; } [BUGGY] [BUGGY] return Long.valueOf(str); } [CLASS] NumberUtils [METHOD] createLong [RETURN_TYPE] Long  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	631	631	1	add	
55	[BUG] [BUGGY] if (StringUtils.isEmpty(str)) { [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { [BUGGY] if (StringUtils.isEmpty(str)) { [BUGGY] return false; } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1507	1507	1	replace	
56	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { [BUGGY] [BUGGY] if (StringUtils.isEmpty(str)) { return false; } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1507	1507	1	add	
57	[BUG] [BUGGY] for (int i = 0; i < str.length(); i++) { [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { return false; } [BUGGY] for (int i = 0; i < str.length(); i++) { [BUGGY] if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1510	1510	1	replace	
58	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { return false; } [BUGGY] [BUGGY] for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1510	1510	1	add	
59	[BUG] [BUGGY] if (!Character.isDigit(str.charAt(i))) { [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { return false; } for (int i = 0; i < str.length(); i++) { [BUGGY] if (!Character.isDigit(str.charAt(i))) { [BUGGY] return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1511	1511	1	replace	
60	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { return false; } for (int i = 0; i < str.length(); i++) { [BUGGY] [BUGGY] if (!Character.isDigit(str.charAt(i))) { return false; } } return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1511	1511	1	add	
61	[BUG] [BUGGY] return true; [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { return false; } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } [BUGGY] return true; [BUGGY] } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1515	1515	1	replace	
62	[BUG] [BUGGY] [FE] NumberFormatException [CONTEXT] public static boolean isDigits(String str) { if (StringUtils.isEmpty(str)) { return false; } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } [BUGGY] [BUGGY] return true; } [CLASS] NumberUtils [METHOD] isDigits [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang58/src/java/org/apache/commons/lang/math/NumberUtils.java	0.5	1515	1515	1	add	
