bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  ' "'  &&  s.charAt(i  +  1)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  ' "'  &&  s.charAt(i  +  1)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  ' "'  &&  s.charAt(i  +  1)!=  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2	[BUG]  [BUGGY]  if(c!=  s.charAt(i  +  1)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  s.charAt(i  +  1)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  s.charAt(i  +  1)!=  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
3	[BUG]  [BUGGY]  if(c  ==  s.charAt(i  +  1)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  s.charAt(i  +  1)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  s.charAt(i  +  1)!=  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
4	[BUG]  [BUGGY]  if(c!=  s.charAt(i  +  1)  >>  quote)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  s.charAt(i  +  1)  >>  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  s.charAt(i  +  1)  >>  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
5	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  >=  quote)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  >=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  >=  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
6	[BUG]  [BUGGY]  char  outputCharsetEncoder  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  outputCharsetEncoder  =  s.charAt(i  +  1);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  outputCharsetEncoder  =  s.charAt(i  +  1);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
7	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  c);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  1,  c);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
8	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  2);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  2);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
9	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
10	[BUG]  [BUGGY]  String  outputCharsetEncoder  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  String  outputCharsetEncoder  =  s.charAt(i  +  1);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	String  outputCharsetEncoder  =  s.charAt(i  +  1);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
11	[BUG]  [BUGGY]  if(s.charAt(i)  ==  'n'  ||  s.charAt(i)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  ==  'n'  ||  s.charAt(i)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  ==  'n'  ||  s.charAt(i)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
12	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
13	[BUG]  [BUGGY]  if(s.charAt(i)  ==  'n'  &&  s.charAt(i)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  ==  'n'  &&  s.charAt(i)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  ==  'n'  &&  s.charAt(i)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
14	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
15	[BUG]  [BUGGY]  if(i  ==  'n'  ||  s.charAt(i)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  ==  'n'  ||  s.charAt(i)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  ==  'n'  ||  s.charAt(i)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
16	[BUG]  [BUGGY]  if(c  <  0x7F  ||  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0x7F  ||  outputCharsetEncoder  ==  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0x7F  ||  outputCharsetEncoder  ==  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
17	[BUG]  [BUGGY]  if(c  >  0x7F  ||  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  outputCharsetEncoder!=  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
18	[BUG]  [BUGGY]  if(c  >  0x7F  &&  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  &&  outputCharsetEncoder  ==  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  &&  outputCharsetEncoder  ==  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
19	[BUG]  [BUGGY]  if(c  >=  0x7F  ||  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  0x7F  ||  outputCharsetEncoder  ==  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  0x7F  ||  outputCharsetEncoder  ==  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
20	[BUG]  [BUGGY]  if(c  ==  0x7F  ||  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  0x7F  ||  outputCharsetEncoder  ==  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  0x7F  ||  outputCharsetEncoder  ==  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
21	[BUG]  [BUGGY]  if(c  <  0x7FF  ||  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0x7FF  ||  outputCharsetEncoder  ==  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0x7FF  ||  outputCharsetEncoder  ==  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
22	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  if(c  ==  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
25	[BUG]  [BUGGY]  if(c  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
26	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c  ==  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c  ==  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c  ==  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
27	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  2);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  2);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
28	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  3);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  3);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  3);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
29	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1,  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  1,  quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  1,  quote);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
30	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  1,  outputCharsetEncoder);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  1,  outputCharsetEncoder);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
31	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  4);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  4);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  4);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
32	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
33	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
34	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_ENABLED  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_ENABLED  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_ENABLED  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
35	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
36	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED)||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED)||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED)||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
37	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
38	[BUG]  [BUGGY]  sb.append('  <  ');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append('  <  ');  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append('  <  ');	  sb.append(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
39	[BUG]  [BUGGY]  sb.append( "  <   ").append(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  <   ").append(c);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <   ").append(c);	  sb.append(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
40	[BUG]  [BUGGY]  sb.append( "  <  / ");  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  <  / ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <  / ");	  sb.append(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
41	[BUG]  [BUGGY]  if(c!=  ' "'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  ' "'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  ' "'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
42	[BUG]  [BUGGY]  if(c  ==  ' "'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  ' "'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  ' "'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
43	[BUG]  [BUGGY]  if(c  <  0  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
44	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  c.length())&&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  c.length())&&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  c,  0,  c.length())&&!outputCharsetEncoder.canEncode(c))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
45	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(outputCharsetEncoder))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(outputCharsetEncoder))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  if(c!=  inputCharsetEncoder  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  inputCharsetEncoder  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  inputCharsetEncoder  &&  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(outputCharset))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(outputCharset))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(outputCharset))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  if(i!=  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i!=  outputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i!=  outputCharsetEncoder.charAt(i))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(i!=  outputCharsetEncoder.charAt(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i!=  outputCharsetEncoder.charAt(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i!=  outputCharsetEncoder.charAt(c))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  if(i  >=  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >=  outputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >=  outputCharsetEncoder.charAt(i))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  if(i  >=  outputCharsetEncoder.charAt(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >=  outputCharsetEncoder.charAt(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >=  outputCharsetEncoder.charAt(c))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.charAt(i  +  1))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.charAt(i  +  1))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
56	[BUG]  [BUGGY]  if(c  ==  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  outputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  outputCharsetEncoder.charAt(i))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
57	[BUG]  [BUGGY]  if(c  ==  outputCharsetEncoder  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  outputCharsetEncoder  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  outputCharsetEncoder  ||  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
58	[BUG]  [BUGGY]  if(c  ==  null  ||  outputCharsetEncoder.canEncode(output))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  ||  outputCharsetEncoder.canEncode(output))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  ||  outputCharsetEncoder.canEncode(output))  {	  if(outputCharsetEncoder    ==    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
59	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.computeHexJavaScriptRepresentation(sb,  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.computeHexJavaScriptRepresentation(sb,  outputCharsetEncoder));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(c.computeHexJavaScriptRepresentation(sb,  outputCharsetEncoder));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
60	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  quote);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
61	[BUG]  [BUGGY]  sb  =  new  StringBuilder(c.computeHexJavaScriptRepresentation(sb,  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(c.computeHexJavaScriptRepresentation(sb,  outputCharsetEncoder));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(c.computeHexJavaScriptRepresentation(sb,  outputCharsetEncoder));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
62	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c,  quote));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c,  quote));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c,  quote));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
63	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(c,  sb));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(c,  sb));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(c,  sb));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
64	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  backslashEscape);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  backslashEscape);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
65	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
66	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
67	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
68	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.isEmpty())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.isEmpty())  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
69	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
70	[BUG]  [BUGGY]  if(c!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  quote)  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
71	[BUG]  [BUGGY]  if(c.charAt(i)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.charAt(i)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.charAt(i)!=  quote)  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
72	[BUG]  [BUGGY]  if(c!=  s.charAt(i)  >>  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  s.charAt(i)  >>  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  s.charAt(i)  >>  quote)  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
73	[BUG]  [BUGGY]  if(c!=  s.charAt(i)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  s.charAt(i)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  s.charAt(i)!=  quote)  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
74	[BUG]  [BUGGY]  if(c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
75	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
76	[BUG]  [BUGGY]  if(c!=  START_COMMENT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_COMMENT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
77	[BUG]  [BUGGY]  if(c  ==  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
78	[BUG]  [BUGGY]  if(c!=  START_COMMENT  ||  inputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_COMMENT  ||  inputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT  ||  inputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
79	[BUG]  [BUGGY]  if(c!=  START_COMMENT  ||  outputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_COMMENT  ||  outputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT  ||  outputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
80	[BUG]  [BUGGY]  char  c  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(0);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(0);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
81	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  1,  s.length());  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  1,  s.length());	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
82	[BUG]  [BUGGY]  char  c  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i++);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i++);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
83	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
84	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  inputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  inputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  inputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length())&&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length())&&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length())&&  outputCharsetEncoder.canEncode(c))  {	  if(s.regionMatches(true,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    BAD_COMMENT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
87	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    BAD_COMMENT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
88	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    BAD_COMMENT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
89	[BUG]  [BUGGY]  if(c  <  0  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||!outputCharsetEncoder.canEncode(c))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
90	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  appendHexJavaScriptRepresentation(sb,  c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  appendHexJavaScriptRepresentation(sb,  c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)&&  appendHexJavaScriptRepresentation(sb,  c))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
91	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  appendHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)&&  appendHexJavaScriptRepresentation(sb,  c);	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
92	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)||!outputCharsetEncoder.canEncode(c))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
93	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(sb))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(sb))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(sb))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
94	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
95	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_ENCODING  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_ENCODING  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_ENCODING  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
96	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
97	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
98	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
99	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING)||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING)||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING)||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
100	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    CASE_QUOTE,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
101	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  BASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BASE_QUOTE,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    CASE_QUOTE,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
102	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(false,    i    +    1,    CASE_QUOTE,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
103	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
104	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
105	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
106	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
107	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  inputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  inputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  inputCharsetEncoder.length()))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
108	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.charAt(i));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.charAt(i));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(s.charAt(i));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
109	[BUG]  [BUGGY]  sb  =  new  StringBuilder(s.charAt(i));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(s.charAt(i));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(s.charAt(i));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
110	[BUG]  [BUGGY]  sb  =  new  StringBuilder(c.charAt(i));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(c.charAt(i));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(c.charAt(i));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
111	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.charAt(i));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.charAt(i));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(c.charAt(i));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
112	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
113	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
114	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
115	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
116	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_NAMES  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_NAMES  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_NAMES  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
117	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
118	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_NAMES  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_NAMES  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_NAMES  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
119	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES)||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES)||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES)||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
120	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(s.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
121	[BUG]  [BUGGY]  sb  =  new  StringBuilder(s.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(s.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(s.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
122	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1)+  1);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1)+  1);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1)+  1);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
123	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(c.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
124	[BUG]  [BUGGY]  sb  =  new  StringBuilder(c.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(c.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(c.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
125	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
126	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
127	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
128	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  END_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
129	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(outputCharsetEncoder))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
130	[BUG]  [BUGGY]  if(c!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  inputCharsetEncoder.canEncode(c))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(outputCharsetEncoder))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
131	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
132	[BUG]  [BUGGY]  if(c  ==  ':'  ||  s.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  ':'  ||  s.charAt(i  +  1)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  ':'  ||  s.charAt(i  +  1)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
133	[BUG]  [BUGGY]  if(c.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.charAt(i  +  1)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.charAt(i  +  1)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
134	[BUG]  [BUGGY]  if(c  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
135	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  2)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  2)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  2)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
136	[BUG]  [BUGGY]  if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
137	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
138	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
139	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  HEX_CHARS.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  HEX_CHARS.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  HEX_CHARS.length()))  {	  if(s.regionMatches(true,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
140	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(true,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
141	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
142	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
143	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
144	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  END_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  END_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  END_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
145	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
146	[BUG]  [BUGGY]  if(c  ==  outputCharsetEncoder.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  outputCharsetEncoder.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  outputCharsetEncoder.endsWith( ".java "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
147	[BUG]  [BUGGY]  if(c!=  inputCharsetEncoder.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  inputCharsetEncoder.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  inputCharsetEncoder.endsWith( ".java "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
148	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "java "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
149	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java/ "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java/ "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "java/ "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
150	[BUG]  [BUGGY]  if(outputCharsetEncoder.endsWith(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.endsWith(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.endsWith(c))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
151	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
152	[BUG]  [BUGGY]  if(inputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(inputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(inputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
153	[BUG]  [BUGGY]  if(inputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(inputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(inputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
154	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  outputCharsetEncoder)  {	  if(c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
155	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  c)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  c)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  c)  {	  if(c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
156	[BUG]  [BUGGY]  sb.append( "null ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "null ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "null ");	  sb.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
157	[BUG]  [BUGGY]  sb.append( "   ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "   ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "   ");	  sb.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
158	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
159	[BUG]  [BUGGY]  if(i  +  1  <  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  <  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  <  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
160	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
161	[BUG]  [BUGGY]  if(i  +  1  >=  s.charAt(i  +  1)||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  >=  s.charAt(i  +  1)||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  >=  s.charAt(i  +  1)||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
162	[BUG]  [BUGGY]  if(i  +  1  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
163	[BUG]  [BUGGY]  if(c  ==  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
164	[BUG]  [BUGGY]  if(c  ==  null  &&  outputCharsetEncoder.canEncode(outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  &&  outputCharsetEncoder.canEncode(outputCharsetEncoder))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  &&  outputCharsetEncoder.canEncode(outputCharsetEncoder))  {	  if(outputCharsetEncoder    ==    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
165	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '-')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
166	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '+')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '+')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '+')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
167	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
168	[BUG]  [BUGGY]  if(c.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.charAt(i  +  1)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.charAt(i  +  1)  ==  '-')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
169	[BUG]  [BUGGY]  if(c  ==  '-'  ||  s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  '-'  ||  s.charAt(i  +  1)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  '-'  ||  s.charAt(i  +  1)  ==  '-')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  '-')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
171	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  inputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  inputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  inputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
172	[BUG]  [BUGGY]  if(s.regionMatches(0,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(0,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(0,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
173	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
174	[BUG]  [BUGGY]  if(i  +  1  <=  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  <=  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  <=  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
175	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)!=  'n')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)!=  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)!=  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
176	[BUG]  [BUGGY]  if(i  +  1  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
177	[BUG]  [BUGGY]  if(i  +  1  >=  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  >=  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  >=  'n'  ||  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
178	[BUG]  [BUGGY]  if(i  +  1  <  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  <  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  <  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
179	[BUG]  [BUGGY]  if(c  ==  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
180	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  c  ==  backslashEscape)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  ||  c  ==  backslashEscape)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  c  ==  backslashEscape)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
181	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  c  ==  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  c  ==  outputCharsetEncoder)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
182	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  c  ==  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  ||  c  ==  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  c  ==  inputCharsetEncoder)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
183	[BUG]  [BUGGY]  if(c  >=  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
184	[BUG]  [BUGGY]  if(c  ==  END_SCRIPT  ||  c  ==  backslashEscape)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  END_SCRIPT  ||  c  ==  backslashEscape)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  END_SCRIPT  ||  c  ==  backslashEscape)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
185	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    c    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
186	[BUG]  [BUGGY]  if(s.regionMatches(true,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    c    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
187	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    c    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
188	[BUG]  [BUGGY]  if(c!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
189	[BUG]  [BUGGY]  if(c  ==  HEX_CHARS  ||  c  ==  HEX_CHARS)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  HEX_CHARS  ||  c  ==  HEX_CHARS)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  HEX_CHARS  ||  c  ==  HEX_CHARS)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
190	[BUG]  [BUGGY]  if(c  ==  HEX_CHARS)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  HEX_CHARS)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  HEX_CHARS)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
191	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "null "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "null "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "null "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
192	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "# "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "# "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "# "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
193	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "/ "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "/ "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "/ "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
194	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "__ "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "__ "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
195	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "javascript "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "javascript "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "javascript "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
196	[BUG]  [BUGGY]  if(c  ==  null  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
197	[BUG]  [BUGGY]  if(c!=  null  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
198	[BUG]  [BUGGY]  if(c!=  START_OF_EXPR)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_OF_EXPR)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_OF_EXPR)  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
199	[BUG]  [BUGGY]  if(c!=  ' "')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  ' "')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  ' "')  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
200	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
201	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.encode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.encode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.encode(c))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
202	[BUG]  [BUGGY]  if(c!=  inputCharsetEncoder.encode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  inputCharsetEncoder.encode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  inputCharsetEncoder.encode(c))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
203	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.encode(c)||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.encode(c)||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.encode(c)||!outputCharsetEncoder.canEncode(c))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
204	[BUG]  [BUGGY]  if(outputCharsetEncoder.encode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.encode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.encode(c))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
205	[BUG]  [BUGGY]  if(c  <  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  outputCharsetEncoder)  {	  if(c    >=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
206	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
207	[BUG]  [BUGGY]  if(c.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
208	[BUG]  [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
209	[BUG]  [BUGGY]  if(sb.length()  ==  0  &&  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  &&  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  &&  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
210	[BUG]  [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
211	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
212	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  BAD_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  BAD_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  BAD_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
213	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
214	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
215	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
216	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  BAD_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  BAD_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  BAD_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
217	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
218	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
219	[BUG]  [BUGGY]  sb.append( "  <  ' ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  <  ' ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <  ' ");	  sb.append(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
220	[BUG]  [BUGGY]  sb.append( "  <!n ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  <!n ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <!n ");	  sb.append(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
221	[BUG]  [BUGGY]  if(c!=  ' "'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  ' "'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  ' "'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
222	[BUG]  [BUGGY]  if(c  ==  ' "'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  ' "'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  ' "'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
223	[BUG]  [BUGGY]  if(c!=  null  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
224	[BUG]  [BUGGY]  if(c  <  0  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
225	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
226	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()  -  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()  -  1))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()  -  1))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
227	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.isEmpty())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.isEmpty())  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
228	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||  s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||  s.charAt(i  +  1)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||  s.charAt(i  +  1)  ==  '-')  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
229	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(c);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(c);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
230	[BUG]  [BUGGY]  char  outputCharsetEncoder  =  getOutputCharsetEncoder();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  outputCharsetEncoder  =  getOutputCharsetEncoder();  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  outputCharsetEncoder  =  getOutputCharsetEncoder();	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
231	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(i);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(i);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
232	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(s);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(s);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
233	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder().length;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder().length;  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder().length;	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
234	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getInputCharsetEncoder();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getInputCharsetEncoder();  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getInputCharsetEncoder();	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
235	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
236	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
237	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
238	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
239	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
240	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append('   "');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append('   "');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {  sb.append('   "');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
241	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
242	[BUG]  [BUGGY]  if(s.charAt(i)  ==  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  ==  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  ==  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
243	[BUG]  [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
244	[BUG]  [BUGGY]  if(i!=  '.'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i!=  '.'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i!=  '.'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
245	[BUG]  [BUGGY]  if(c!=  '.'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  '.'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  '.'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
246	[BUG]  [BUGGY]  if(s.charAt(i)!=  ''  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)!=  ''  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  ''  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
247	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder.canEncode(c))  {	  if(sb!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
248	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(sb))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(sb))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.canEncode(sb))  {	  if(sb!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
249	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(s))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(s))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.canEncode(s))  {	  if(sb!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
250	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
251	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
252	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
253	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
254	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
255	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  c,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
256	[BUG]  [BUGGY]  if(c!=  HexJavaScriptRepresentation.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HexJavaScriptRepresentation.EXPR_RESULT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HexJavaScriptRepresentation.EXPR_RESULT)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
257	[BUG]  [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT_OUTPUT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT_OUTPUT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HexJavaScriptRepresentation.DEFAULT_OUTPUT)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
258	[BUG]  [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HexJavaScriptRepresentation.DEFAULT)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
259	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  outputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  outputCharsetEncoder.charAt(i))  {	  if(outputCharsetEncoder!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
260	[BUG]  [BUGGY]  if(c.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
261	[BUG]  [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
262	[BUG]  [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
263	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder!=  c)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder!=  c)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder!=  c)  {	  if(outputCharsetEncoder!=    c)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
264	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
265	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  inputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  inputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  inputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
266	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
267	[BUG]  [BUGGY]  if(c.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
268	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c)||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c)||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c)||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
269	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  c.length())||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  c.length())||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  c.length())||!outputCharsetEncoder.canEncode(c))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
270	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
271	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
272	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
273	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
274	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
275	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
276	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  INSTANCE,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  INSTANCE,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  INSTANCE,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
277	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  c,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
278	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
279	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  c,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
280	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEscape,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEscape,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEscape,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
281	[BUG]  [BUGGY]  if(c  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
282	[BUG]  [BUGGY]  if(c.charAt(i)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.charAt(i)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.charAt(i)  ==  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
283	[BUG]  [BUGGY]  if(c  ==  quote  ||  s.charAt(i)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  quote  ||  s.charAt(i)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  quote  ||  s.charAt(i)  ==  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
284	[BUG]  [BUGGY]  if(charAt(i)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(charAt(i)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(charAt(i)  ==  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
285	[BUG]  [BUGGY]  if(!s.charAt(i)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.charAt(i)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.charAt(i)  ==  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
286	[BUG]  [BUGGY]  if(sb!=  null  ||  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  ||  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  ||  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
287	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  sb!=  null  &&  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  sb!=  null  &&  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  sb!=  null  &&  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
288	[BUG]  [BUGGY]  if(c!=  null  &&  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
289	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
290	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
291	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  sb!=  null  ||  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  sb!=  null  ||  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  sb!=  null  ||  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
292	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    RECORD_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
293	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    RECORD_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
294	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    RECORD_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
295	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  quote);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
296	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
297	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0),  outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0),  outputCharsetEncoder.charAt(0));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0),  outputCharsetEncoder.charAt(0));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
298	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
299	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
300	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
301	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
302	[BUG]  [BUGGY]  if(c.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
303	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
304	[BUG]  [BUGGY]  if(c.regionMatches(true,  i  +  1,  c,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.regionMatches(true,  i  +  1,  c,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.regionMatches(true,  i  +  1,  c,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
305	[BUG]  [BUGGY]  if(c.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
306	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  inputCharsetEncoder)  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
307	[BUG]  [BUGGY]  if(c  ==  inputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  inputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  inputCharsetEncoder.charAt(i))  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
308	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
309	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  c!=  END_SCRIPT  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  c!=  END_SCRIPT  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  c!=  END_SCRIPT  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
310	[BUG]  [BUGGY]  if(c  >=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
311	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
312	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
313	[BUG]  [BUGGY]  if(i  +  1  <  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  <  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  <  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
314	[BUG]  [BUGGY]  if(i  +  1  >=  s.charAt(i  +  1)||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  >=  s.charAt(i  +  1)||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  >=  s.charAt(i  +  1)||  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
315	[BUG]  [BUGGY]  if(i  +  1  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
316	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)!=  'n')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)!=  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)!=  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
317	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
318	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
319	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
320	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
321	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
322	[BUG]  [BUGGY]  if(i  +  1  ==  '.'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  ==  '.'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  ==  '.'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
323	[BUG]  [BUGGY]  if(i  +  1  >=  '.'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  >=  '.'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  >=  '.'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
324	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  inputCharsetEncoder)  {	  if(c!=    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
325	[BUG]  [BUGGY]  if(c!=  inputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  inputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  inputCharsetEncoder.charAt(i))  {	  if(c!=    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
326	[BUG]  [BUGGY]  if(inputCharsetEncoder!=  c)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(inputCharsetEncoder!=  c)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(inputCharsetEncoder!=  c)  {	  if(c!=    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
327	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(output))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(output))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.canEncode(output))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(output))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
328	[BUG]  [BUGGY]  if(c  ==  null  &&  outputCharsetEncoder.canEncode(output))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  &&  outputCharsetEncoder.canEncode(output))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  &&  outputCharsetEncoder.canEncode(output))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(output))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
329	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c.canEncode(output))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c.canEncode(output))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c.canEncode(output))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(output))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
330	[BUG]  [BUGGY]  if(c  >=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
331	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
332	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  backslashEscape.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
333	[BUG]  [BUGGY]  if(c!=  backslashEscape  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  backslashEscape  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  backslashEscape  &&  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
334	[BUG]  [BUGGY]  if(backslashEscape!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(backslashEscape!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(backslashEscape!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
335	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape!=  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape!=  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  backslashEscape!=  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
336	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape  ==  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape  ==  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  backslashEscape  ==  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
337	[BUG]  [BUGGY]  if(inputCharsetEncoder  ==  null  ||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(inputCharsetEncoder  ==  null  ||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(inputCharsetEncoder  ==  null  ||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
338	[BUG]  [BUGGY]  if(c  ==  null  ||  inputCharsetEncoder.canEncode(outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  ||  inputCharsetEncoder.canEncode(outputCharsetEncoder))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  ||  inputCharsetEncoder.canEncode(outputCharsetEncoder))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
339	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null  &&  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
340	[BUG]  [BUGGY]  if(c  ==  null  ||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  ||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  ||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
341	[BUG]  [BUGGY]  if(c  ==  inputCharsetEncoder  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  inputCharsetEncoder  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  inputCharsetEncoder  ||  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
342	[BUG]  [BUGGY]  c  =  s.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i  +  2);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  2);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
343	[BUG]  [BUGGY]  c  =  s.charAt(i  +  1,  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i  +  1,  quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  1,  quote);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
344	[BUG]  [BUGGY]  c  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
345	[BUG]  [BUGGY]  c  =  s.charAt(i  +  3);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i  +  3);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  3);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
346	[BUG]  [BUGGY]  c  =  s.charAt(i  +  1,  c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i  +  1,  c);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  1,  c);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
347	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
348	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
349	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
350	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
351	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
352	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
353	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
354	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
355	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  inputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  inputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  inputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
356	[BUG]  [BUGGY]  if(c  ==  quote  ||  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  quote  ||  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  quote  ||  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
357	[BUG]  [BUGGY]  if(c  ==  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
358	[BUG]  [BUGGY]  if(c.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
359	[BUG]  [BUGGY]  if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  s.length()  ||  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
360	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
361	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
362	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_NAME  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_NAME  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_NAME  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
363	[BUG]  [BUGGY]  if(c!=  ' "'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  ' "'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  ' "'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
364	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
365	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME)||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME)||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME)||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
366	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
367	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
368	[BUG]  [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
369	[BUG]  [BUGGY]  if(c!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
370	[BUG]  [BUGGY]  if(s.charAt(i)  ==  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  ==  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  ==  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
371	[BUG]  [BUGGY]  if(s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt(i)!=  ''  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
372	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
373	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
374	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())&&  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())&&  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())&&  outputCharsetEncoder!=  null)  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
375	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.endsWith( ".java "))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
376	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  this.backslashEscape)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  this.backslashEscape)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  this.backslashEscape)  {	  if(outputCharsetEncoder!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
377	[BUG]  [BUGGY]  if(i  ==  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  ==  outputCharsetEncoder.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  ==  outputCharsetEncoder.charAt(i))  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
378	[BUG]  [BUGGY]  if(c  >  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  outputCharsetEncoder)  {	  if(c    >=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
379	[BUG]  [BUGGY]  if(outputCharsetEncoder  >=  c)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  >=  c)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  >=  c)  {	  if(c    >=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
380	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
381	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
382	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c!=  outputCharsetEncoder)  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(output))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
383	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
384	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(s))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(s))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
385	[BUG]  [BUGGY]  if(!outputCharsetEncoder.isResourceManaged())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.isResourceManaged())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.isResourceManaged())  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
386	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
387	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  '/')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  '/')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
388	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&!s.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&!s.isEmpty())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&!s.isEmpty())  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
389	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  ||  s.charAt(i  +  1)  ==  '-')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
390	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  Character.isDigit(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&  Character.isDigit(c))  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
391	[BUG]  [BUGGY]  if(sb  ==  null  &&  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb  ==  null  &&  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb  ==  null  &&  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
392	[BUG]  [BUGGY]  if(sb  ==  null  ||  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb  ==  null  ||  s.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb  ==  null  ||  s.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
393	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder!=  null)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
394	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  QUOTE_FIELD_NAMES,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  QUOTE_FIELD_NAMES,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  QUOTE_FIELD_NAMES,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
395	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  CHECK_COMMENT,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  CHECK_COMMENT,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  CHECK_COMMENT,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
396	[BUG]  [BUGGY]  if(sb.charAt(i)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i)  ==  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
397	[BUG]  [BUGGY]  if(quote  ==  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(quote  ==  s.charAt(i))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(quote  ==  s.charAt(i))  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
398	[BUG]  [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
399	[BUG]  [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
400	[BUG]  [BUGGY]  if(c!=  'n'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
401	[BUG]  [BUGGY]  if(c!=  'n'  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
402	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
403	[BUG]  [BUGGY]  if(!outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    c)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
404	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
405	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
406	[BUG]  [BUGGY]  sb.append( "  <   ").append(quote);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  <   ").append(quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <   ").append(quote);	  sb.append(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
407	[BUG]  [BUGGY]  if(singlequoteEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(singlequoteEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(singlequoteEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
408	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
409	[BUG]  [BUGGY]  if(backslashEscape  ==  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(backslashEscape  ==  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(backslashEscape  ==  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
410	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
411	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
412	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_EXPR_RESULT))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_EXPR_RESULT))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_EXPR_RESULT))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
413	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
414	[BUG]  [BUGGY]  if(i  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
415	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
416	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  HX_CHARS.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  HX_CHARS.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  HX_CHARS.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
417	[BUG]  [BUGGY]  if(charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
418	[BUG]  [BUGGY]  if(c  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
419	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
420	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
421	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
422	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    c    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
423	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  c!=  END_SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  c!=  END_SCRIPT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  c!=  END_SCRIPT)  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
424	[BUG]  [BUGGY]  if(c!=  END_COMMENT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_COMMENT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_COMMENT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
425	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.toString());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.toString());  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.toString());	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
426	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
427	[BUG]  [BUGGY]  if(c!=  null  ||  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  ||  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||  outputCharsetEncoder!=  null)  {	  if(c    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
428	[BUG]  [BUGGY]  if(c!=  null  ||!c.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  ||!c.isEmpty())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||!c.isEmpty())  {	  if(c    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
429	[BUG]  [BUGGY]  if(c  ==  null  ||  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  null  ||  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null  ||  outputCharsetEncoder!=  null)  {	  if(c    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
430	[BUG]  [BUGGY]  char  c  =  strEscape.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  strEscape.charAt(i  +  1);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  strEscape.charAt(i  +  1);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
431	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1,  outputCharsetEncoding);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  +  1,  outputCharsetEncoding);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  1,  outputCharsetEncoding);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
432	[BUG]  [BUGGY]  if(c  >=  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  inputCharsetEncoder)  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
433	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
434	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
435	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_CRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_CRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  DEFAULT_CRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
436	[BUG]  [BUGGY]  if(i  >  0  ||  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
437	[BUG]  [BUGGY]  if(charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
438	[BUG]  [BUGGY]  if(s.charAt(i)  >=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
439	[BUG]  [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'r'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  'n'  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'r'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  'n'  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  s.charAt(i)!=  'r'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  'n'  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
440	[BUG]  [BUGGY]  if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
441	[BUG]  [BUGGY]  if(i  +  1  >=  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  >=  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  >=  s.length()  ||  s.charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
442	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  2)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  2)  ==  '-')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  2)  ==  '-')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
443	[BUG]  [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  sb.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
444	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
445	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
446	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
447	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
448	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  outputCharsetEscape);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  outputCharsetEscape);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  1,  outputCharsetEscape);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
449	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  outputCharsetEncoder);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  1,  outputCharsetEncoder);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
450	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  3);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  3);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  3);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
451	[BUG]  [BUGGY]  if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
452	[BUG]  [BUGGY]  if(i  >=  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >=  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >=  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
453	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)!=  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)!=  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
454	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())&&  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())&&  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())&&  outputCharsetEncoder!=  null)  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
455	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length())||!s.endsWith( ".java "))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
456	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  MX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  MX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  MX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
457	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  RECORD_COMMENT,  0,  s.length()))  {	  if(s.regionMatches(false,    i    +    1,    RECORD_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
458	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    RECORD_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
459	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    RECORD_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
460	[BUG]  [BUGGY]  if(c  >  0x7FF  &&  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7FF  &&  outputCharsetEncoder  ==  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7FF  &&  outputCharsetEncoder  ==  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
461	[BUG]  [BUGGY]  if(c  >  0x7FF  ||  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7FF  ||  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7FF  ||  outputCharsetEncoder!=  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
462	[BUG]  [BUGGY]  if(c  >  0x7f  ||  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7f  ||  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7f  ||  outputCharsetEncoder!=  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
463	[BUG]  [BUGGY]  if(c  ==  outputCharsetEncoder.encode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  outputCharsetEncoder.encode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  outputCharsetEncoder.encode(c))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
464	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.toString(),  outputCharsetEncoder.toString());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.toString(),  outputCharsetEncoder.toString());  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.toString(),  outputCharsetEncoder.toString());	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
465	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  1));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  1));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
466	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(0));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(0));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
467	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
468	[BUG]  [BUGGY]  if(charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
469	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT)  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
470	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder!=  null)  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
471	[BUG]  [BUGGY]  if(c  ==  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
472	[BUG]  [BUGGY]  if(c!=  HexJavaScriptRepresentation.IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HexJavaScriptRepresentation.IN_FOR_INIT_CLAUSE)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HexJavaScriptRepresentation.IN_FOR_INIT_CLAUSE)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
473	[BUG]  [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT_CASE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT_CASE)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HexJavaScriptRepresentation.DEFAULT_CASE)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
474	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(outputCharsetEscape);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(outputCharsetEscape);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(outputCharsetEscape);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
475	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(backslashEscape);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(backslashEscape);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(backslashEscape);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
476	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(sb);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(sb);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(sb);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
477	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(output);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(output);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(output);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
478	[BUG]  [BUGGY]  if(s.regionMatches(0,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(0,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(0,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
479	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()  -  1))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()  -  1))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()  -  1))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
480	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length())||!s.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length())||!s.isEmpty())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length())||!s.isEmpty())  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
481	[BUG]  [BUGGY]  if(inputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(inputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(inputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
482	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder    ==    null    ||    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
483	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
484	[BUG]  [BUGGY]  if(backslashEscape!=  null  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(backslashEscape!=  null  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(backslashEscape!=  null  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    inputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
485	[BUG]  [BUGGY]  c  =  s.charAt(i  +  1,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i  +  1,  outputCharsetEncoder);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  1,  outputCharsetEncoder);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
486	[BUG]  [BUGGY]  c  =  strEscape.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  strEscape.charAt(i  +  1);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  strEscape.charAt(i  +  1);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
487	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '/')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '/')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
488	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  c  >  '+')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  c  >  '+')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  c  >  '+')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
489	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  ']')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  ']')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  ']')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
490	[BUG]  [BUGGY]  if(sb.charAt(i)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i)!=  quote)  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
491	[BUG]  [BUGGY]  if(s.charAt(i)  >=  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  quote)  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
492	[BUG]  [BUGGY]  if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
493	[BUG]  [BUGGY]  if(i  >=  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >=  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >=  0  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
494	[BUG]  [BUGGY]  if(c!=  'n'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
495	[BUG]  [BUGGY]  if(c!=  'n'  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
496	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
497	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  c!=  outputCharsetEncoder.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  c!=  outputCharsetEncoder.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  c!=  outputCharsetEncoder.endsWith( ".java "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
498	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.startsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.startsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.startsWith( ".java "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
499	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
500	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
501	[BUG]  [BUGGY]  if(c!=  END_COMMENT  ||  c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_COMMENT  ||  c  ==  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_COMMENT  ||  c  ==  outputCharsetEncoder)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
502	[BUG]  [BUGGY]  if(c!=  END_CRIPT  ||  c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_CRIPT  ||  c  ==  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_CRIPT  ||  c  ==  outputCharsetEncoder)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
503	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder  ||  c!=  END_SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder  ||  c!=  END_SCRIPT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder  ||  c!=  END_SCRIPT)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
504	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
505	[BUG]  [BUGGY]  sb.append('n');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append('n');  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append('n');	  sb.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
506	[BUG]  [BUGGY]  sb.append( "  }   ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  }   ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  }   ");	  sb.append(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
507	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoding,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoding,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEncoding,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
508	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_COMMENT,  0,  END_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_COMMENT,  0,  END_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  END_COMMENT,  0,  END_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
509	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoding,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoding,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEncoding,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
510	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
511	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
512	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
513	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
514	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
515	[BUG]  [BUGGY]  if(i  >  0  ||  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
516	[BUG]  [BUGGY]  if(s.charAt(i  +  1)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
517	[BUG]  [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'r'  &&  s.charAt(i)!=  'n'  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  s.charAt(i)!=  'r'  &&  s.charAt(i)!=  'n'  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  s.charAt(i)!=  'r'  &&  s.charAt(i)!=  'n'  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
518	[BUG]  [BUGGY]  sb.append( "  <!-- ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  sb.append( "  <!-- ");  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <!-- ");	  sb.append(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
519	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c!=  'r')  {	  if(sb!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
520	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.isEnabled(c))  {	  if(sb!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
521	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
522	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
523	[BUG]  [BUGGY]  if(c!=  START_COMMENT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_COMMENT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT)  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
524	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  't')  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
525	[BUG]  [BUGGY]  char  c  =  strEscape.charAt(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  strEscape.charAt(i);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  strEscape.charAt(i);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
526	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BAD_COMMENT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
527	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
528	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  doublequoteEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  doublequoteEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  doublequoteEscape,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
529	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEscape,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
530	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null)  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
531	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append(c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append(c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null)  {  sb.append(c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
532	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null)  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder  ==  null)  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null)  {  sb.append( "  <   ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
533	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append(' "');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null)  {  sb.append(' "');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null)  {  sb.append(' "');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
534	[BUG]  [BUGGY]  if(c  ==  HexJavaScriptRepresentation.DEFAULT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  HexJavaScriptRepresentation.DEFAULT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  HexJavaScriptRepresentation.DEFAULT)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
535	[BUG]  [BUGGY]  if(c  <  HEX_CHARS)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  HEX_CHARS)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  HEX_CHARS)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
536	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  &&  s.charAt(i)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)!=  'n'  &&  s.charAt(i)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  &&  s.charAt(i)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
537	[BUG]  [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
538	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  i,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  c  +  1,  i,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  i,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
539	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  outputCharsetEncoder);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  outputCharsetEncoder);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
540	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  backingslashEscape);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  backingslashEscape);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c),  backingslashEscape);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,    c));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
541	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(0));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(0));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
542	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)!=  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
543	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  s.charAt(i  +  1)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  s.charAt(i  +  1)!=  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  s.charAt(i  +  1)!=  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
544	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
545	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
546	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  2));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  2));  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  outputCharsetEncoder.charAt(i  +  2));	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i),    outputCharsetEncoder.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
547	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isResourceAsStream(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
548	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
549	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  c!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  ||  c!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  c!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
550	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  c!=  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  ||  c!=  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  c!=  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
551	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(false,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
552	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
553	[BUG]  [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
554	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
555	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
556	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(c)))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(c)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(c)))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
557	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  C,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  C,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  C,  0,  c.length()))  {	  if(!s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
558	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(true,    i    +    1,    backslashEscape,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
559	[BUG]  [BUGGY]  if(i!=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i!=  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i!=  outputCharsetEncoder)  {	  if(outputCharsetEncoder!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
560	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  s.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
561	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  END_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  END_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  END_SCRIPT,  0,  END_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    END_SCRIPT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
562	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
563	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_ENCODING  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_ENCODING  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_ENCODING  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
564	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
565	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING)||  i  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING)||  i  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING)||  i  >  0)  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
566	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
567	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED)||  i  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED)||  i  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED)||  i  >  0)  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
568	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
569	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED,  c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED,  c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED,  c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
570	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
571	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  quote)  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
572	[BUG]  [BUGGY]  if(c!=  'n')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n')  {	  if(sb!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
573	[BUG]  [BUGGY]  if(c  <  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
574	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  C,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
575	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  CENTER_COMMENT,  0,  CENTER_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  CENTER_COMMENT,  0,  CENTER_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  CENTER_COMMENT,  0,  CENTER_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
576	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  CC,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  CC,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  CC,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
577	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
578	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.charAt(i    +    1)    ==    'n'    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
579	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder  ||  c  ==  END_SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder  ||  c  ==  END_SCRIPT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder  ||  c  ==  END_SCRIPT)  {	  if(c!=    END_SCRIPT    ||    c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
580	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(sb,  i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(sb,  i);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(sb,  i);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
581	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(char);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder(char);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder(char);	  int    outputCharsetEncoder    =    getOutputCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
582	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
583	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(!s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
584	[BUG]  [BUGGY]  if(c  ==  ' "'  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  ' "'  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  ' "'  ||!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(!s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
585	[BUG]  [BUGGY]  if(sb!=  null  &&  s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb!=  null  &&  s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  s.charAt(i  +  1)  ==  'n'  &&  s.charAt(i  +  1)  ==  'n')  {	  if(outputCharsetEncoder    ==    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
586	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  s.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  s.charAt(i  +  1)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&  s.charAt(i  +  1)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
587	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&!s.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&!s.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&!s.endsWith( ".java "))  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
588	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  c  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  c  <=  '9')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&  c  <=  '9')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
589	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  s.charAt(i  +  2)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  ':'  &&  s.charAt(i  +  2)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':'  &&  s.charAt(i  +  2)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
590	[BUG]  [BUGGY]  if(c  <=  outputCharsetEncoder.encode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <=  outputCharsetEncoder.encode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <=  outputCharsetEncoder.encode(c))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
591	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.encode(c)&&  s.charAt(i  +  1)  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.encode(c)&&  s.charAt(i  +  1)  ==  '/')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.encode(c)&&  s.charAt(i  +  1)  ==  '/')  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
592	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.encode(c)&&!s.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.encode(c)&&!s.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.encode(c)&&!s.endsWith( ".java "))  {	  if(c!=    outputCharsetEncoder.encode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
593	[BUG]  [BUGGY]  if(i  +  1  <=  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  <=  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  <=  s.length()  ||  s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
594	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'e'  ||  s.charAt(i  +  1)  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'e'  ||  s.charAt(i  +  1)  ==  'E')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'e'  ||  s.charAt(i  +  1)  ==  'E')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
595	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  c!=  START_COMMENT  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
596	[BUG]  [BUGGY]  if(c!=  START_COMMENT  &&  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  START_COMMENT  &&  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT  &&  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
597	[BUG]  [BUGGY]  if(c  >=  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  START_COMMENT  ||  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c!=    START_COMMENT    ||    outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
598	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  quote);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1,  quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  1,  quote);	  int    outputCharsetEncoder    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
599	[BUG]  [BUGGY]  if(c  >  0x7F  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||!outputCharsetEncoder.canEncode(c))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
600	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&!backslashEscape.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&!backslashEscape.isEmpty())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)&&!backslashEscape.isEmpty())  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
601	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  s.charAt(i  +  1)  ==  '/')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&  s.charAt(i  +  1)  ==  '/')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)&&  s.charAt(i  +  1)  ==  '/')  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
602	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&!backslashEscape.equals(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.canEncode(c)&&!backslashEscape.equals(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c)&&!backslashEscape.equals(c))  {	  if(!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
603	[BUG]  [BUGGY]  if(!outputCharsetEncoder.isEnabled(c))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!outputCharsetEncoder.isEnabled(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.isEnabled(c))  {	  if(outputCharsetEncoder!=    c)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
604	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
605	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
606	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
607	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  STATEMENT,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
608	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  STATEMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  STATEMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    INSTANCE,    0,    STATEMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
609	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
610	[BUG]  [BUGGY]  if(c!=  QUOTE_FIELD_NAME  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  QUOTE_FIELD_NAME  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  QUOTE_FIELD_NAME  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
611	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME,  c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME,  c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME,  c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
612	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
613	[BUG]  [BUGGY]  if(c  <  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
614	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  C,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  C,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
615	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  C,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
616	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
617	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())&&!s.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())&&!s.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())&&!s.endsWith( ".java "))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
618	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||  c  <  HEX_CHARS.length())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||  c  <  HEX_CHARS.length())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length())||  c  <  HEX_CHARS.length())  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
619	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  char  c  =  s.charAt(i  *  1);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  *  1);	  char    c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
620	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
621	[BUG]  [BUGGY]  if(c  >  0x7F  ||  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
622	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
623	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  '9'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  '9'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  '9'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
624	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
625	[BUG]  [BUGGY]  if(s.charAt(i)  >=  'n'  &&  c!=  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  'n'  &&  c!=  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  'n'  &&  c!=  outputCharsetEncoder.canEncode(c))  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
626	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  '-'  &&  s.charAt(i)!=  '+')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  '-'  &&  s.charAt(i)!=  '+')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)!=  '-'  &&  s.charAt(i)!=  '+')  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
627	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    c    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
628	[BUG]  [BUGGY]  if(c!=  'n'  &&  sb!=  null  &&  sb.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  sb!=  null  &&  sb.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  sb!=  null  &&  sb.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
629	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  sb!=  null  &&  sb.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  sb!=  null  &&  sb.length()  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  sb!=  null  &&  sb.length()  >  0)  {	  if(sb!=    null    &&    s.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
630	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEncoded(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.isEncoded(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.isEncoded(c))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(outputCharsetEncoder))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
631	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.endsWith( ".java "))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(outputCharsetEncoder))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
632	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
633	[BUG]  [BUGGY]  if(bAD_SCRIPT!=  null  &&  s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(bAD_SCRIPT!=  null  &&  s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(bAD_SCRIPT!=  null  &&  s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
634	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_QUOTE,  0,  BAD_QUOTE.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_QUOTE,  0,  BAD_QUOTE.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BAD_QUOTE,  0,  BAD_QUOTE.length()))  {	  if(s.regionMatches(false,    i    +    1,    BAD_SCRIPT,    0,    BAD_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
635	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  ||  s.charAt(i)!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)!=  'n'  ||  s.charAt(i)!=  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  ||  s.charAt(i)!=  'r')  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
636	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  &&  s.charAt(i  +  1)!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)!=  'n'  &&  s.charAt(i  +  1)!=  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  &&  s.charAt(i  +  1)!=  'r')  {	  if(s.charAt(i)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
637	[BUG]  [BUGGY]  if(sb.length()  >  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  >  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  >  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
638	[BUG]  [BUGGY]  if(sb.length()  <=  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  <=  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  <=  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
639	[BUG]  [BUGGY]  if(sb.length()!=  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()!=  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()!=  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
640	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEncoding(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEncoding(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEncoding(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
641	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEncoded(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEncoded(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEncoded(c))  {	  if(c!=    END_SCRIPT    &&    outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
642	[BUG]  [BUGGY]  if(i  >=  outputCharsetEncoder.length())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >=  outputCharsetEncoder.length())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >=  outputCharsetEncoder.length())  {	  if(c!=    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
643	[BUG]  [BUGGY]  if(charAt(i  +  1)  ==  'n'  ||  charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(charAt(i  +  1)  ==  'n'  ||  charAt(i  +  2)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(charAt(i  +  1)  ==  'n'  ||  charAt(i  +  2)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
644	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(0)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(0)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(0)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    2)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
645	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(sb!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
646	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  quote);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  quote);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1),  quote);	  StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.charAt(i    +    1));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
647	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
648	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
649	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  DEFAULT_COMMENT,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    DEFAULT_CASE,    0,    DEFAULT_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
650	[BUG]  [BUGGY]  if(c  <=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <=  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <=  outputCharsetEncoder)  {	  if(c    ==    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
651	[BUG]  [BUGGY]  if(c  <  HEX_CHARS  ||  c  >  HEX_CHARS)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  HEX_CHARS  ||  c  >  HEX_CHARS)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  HEX_CHARS  ||  c  >  HEX_CHARS)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
652	[BUG]  [BUGGY]  if(c  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0)  {	  if(hexJavaScriptRepresentation    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
653	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
654	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.encodeHeader(c)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.encodeHeader(c)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.encodeHeader(c)))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
655	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(0)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(0)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.charAt(0)))  {	  if(s.regionMatches(false,    i    +    1,    HX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
656	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    inputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
657	[BUG]  [BUGGY]  if(strEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(strEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(strEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
658	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  &&  backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)!=  'n'  &&  backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  &&  backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(backslashEscape!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
659	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(false,    i    +    1,    HEX_CHARS,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
660	[BUG]  [BUGGY]  if(c  >  0x7F  ||  inputCharsetEncoder!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||  inputCharsetEncoder!=  null)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  inputCharsetEncoder!=  null)  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
661	[BUG]  [BUGGY]  if(c  >  0x7F  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x7F    ||    outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
662	[BUG]  [BUGGY]  c  =  s.charAt(i  +  4);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  c  =  s.charAt(i  +  4);  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  4);	  c    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
663	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
664	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(!s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {	  if(!s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
665	[BUG]  [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'r')  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
666	[BUG]  [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'n')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'n')  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
667	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)!=  'r')  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
668	[BUG]  [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)  ==  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)!=  'n'  ||  s.charAt(i  +  1)  ==  quote)  {	  if(s.charAt(i    +    1)!=    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
669	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
670	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)  <=  '9')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'n'  &&  s.charAt(i)  <=  '9')  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
671	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'z')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'z')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  >=  '0'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'a'  &&  s.charAt(i)!=  'z')  {	  if(s.charAt(i)!=    'n'    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
672	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(c)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(c)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(c)))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
673	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  C,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    c,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
674	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(c)||!outputCharsetEncoder.endsWith( " "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(c)||!outputCharsetEncoder.endsWith( " "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.canEncode(c)||!outputCharsetEncoder.endsWith( " "))  {	  if(c!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
675	[BUG]  [BUGGY]  if(i  >=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >=  outputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >=  outputCharsetEncoder)  {	  if(c    >=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
676	[BUG]  [BUGGY]  if(c  <  outputCharsetEncoder.length())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  outputCharsetEncoder.length())  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  outputCharsetEncoder.length())  {	  if(c    >=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
677	[BUG]  [BUGGY]  if(i  >  0  ||  s.charAt(i)!=  'n'  ||  s.charAt(i)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  >  0  ||  s.charAt(i)!=  'n'  ||  s.charAt(i)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  >  0  ||  s.charAt(i)!=  'n'  ||  s.charAt(i)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
678	[BUG]  [BUGGY]  if(s.charAt(0)  ==  'n'  ||  s.charAt(0)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(0)  ==  'n'  ||  s.charAt(0)  ==  'r')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(0)  ==  'n'  ||  s.charAt(0)  ==  'r')  {	  if(s.charAt(i)!=    'n'    ||    s.charAt(i)    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
679	[BUG]  [BUGGY]  if(c  <=  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <=  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <=  inputCharsetEncoder)  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
680	[BUG]  [BUGGY]  if(c  <  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  inputCharsetEncoder)  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
681	[BUG]  [BUGGY]  if(c  >  0x7F  ||  c  <  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||  c  <  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  c  <  inputCharsetEncoder)  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
682	[BUG]  [BUGGY]  if(c  >  0x7F  ||  c  ==  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0x7F  ||  c  ==  inputCharsetEncoder)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  c  ==  inputCharsetEncoder)  {	  if(c    ==    inputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
683	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(0)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(0)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(0)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
684	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_SCRIPT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_SCRIPT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_SCRIPT,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.charAt(i    +    1)))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
685	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
686	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()  -  1))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()  -  1))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()  -  1))  {	  if(s.regionMatches(true,    i    +    1,    HEX_CHARS,    0,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
687	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java/lang/Object "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java/lang/Object "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "java/lang/Object "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
688	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( " "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( " "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( " "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
689	[BUG]  [BUGGY]  if(c  ==  outputCharsetEncoder.endsWith( "null "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  ==  outputCharsetEncoder.endsWith( "null "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  outputCharsetEncoder.endsWith( "null "))  {	  if(c!=    outputCharsetEncoder.endsWith(   "n   "))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
690	[BUG]  [BUGGY]  if(sb.length()  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
691	[BUG]  [BUGGY]  if(sb.length()  <=  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  <=  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  <=  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
692	[BUG]  [BUGGY]  if(c  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(sb.length()    ==    0    ||    s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
693	[BUG]  [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
694	[BUG]  [BUGGY]  if(c  <  0  ||  c  >  0  ||  c  <  0  ||  c  >  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  c  >  0  ||  c  <  0  ||  c  >  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  c  >  0  ||  c  <  0  ||  c  >  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    c.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
695	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  2)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  2)  ==  ':')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  2)  ==  ':')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
696	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '%')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '%')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-'  ||  s.charAt(i  +  1)  ==  '%')  {	  if(s.charAt(i    +    1)    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
697	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append( ", ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append( ", ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {  sb.append( ", ");  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
698	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append('n');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  sb.append('n');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {  sb.append('n');  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
699	[BUG]  [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  'n'  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
700	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
701	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i  >  0)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i  >  0)  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
702	[BUG]  [BUGGY]  if(c!=  HEX_CHARS)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HEX_CHARS)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HEX_CHARS)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
703	[BUG]  [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT_SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  HexJavaScriptRepresentation.DEFAULT_SCRIPT)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  HexJavaScriptRepresentation.DEFAULT_SCRIPT)  {	  if(hexJavaScriptRepresentation!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
704	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java. "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "java. "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "java. "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
705	[BUG]  [BUGGY]  if(c  >=  outputCharsetEncoder.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  outputCharsetEncoder.endsWith( ".java "))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  outputCharsetEncoder.endsWith( ".java "))  {	  if(c!=    outputCharsetEncoder.endsWith(   ".java   "))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
706	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    DEFAULT_SCRIPT,    0,    DEFAULT_SCRIPT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
707	[BUG]  [BUGGY]  if(charAt(i  +  1)  ==  'n'  ||  charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(charAt(i  +  1)  ==  'n'  ||  charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(charAt(i  +  1)  ==  'n'  ||  charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
708	[BUG]  [BUGGY]  if(i  +  1  <=  s.length()  ||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(i  +  1  <=  s.length()  ||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(i  +  1  <=  s.length()  ||  s.charAt(i  +  1)  ==  'n')  {	  if(s.charAt(i    +    1)    ==    'n'    ||    s.charAt(i    +    1)    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
709	[BUG]  [BUGGY]  if(c  >=  null  &&  outputCharsetEncoder.canEncode(output))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  >=  null  &&  outputCharsetEncoder.canEncode(output))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  null  &&  outputCharsetEncoder.canEncode(output))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(output))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
710	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c!=  outputCharsetEncoder.canEncode(c))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.canEncode(c))  {	  if(c!=    null    ||    outputCharsetEncoder.canEncode(output))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
711	[BUG]  [BUGGY]  if(s.charAt(i)  <  quote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.charAt(i)  <  quote)  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  <  quote)  {	  if(s.charAt(i)    ==    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
712	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.charAt(i)))  {	  if(s.regionMatches(true,    i    +    1,    BAD_COMMENT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
713	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  CASE_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  CASE_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  CASE_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    BAD_COMMENT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
714	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.encode(c)))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.encode(c)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.encode(c)))  {	  if(s.regionMatches(true,    i    +    1,    BAD_COMMENT,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
715	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(false,    i    +    1,    CASE_QUOTE,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
716	[BUG]  [BUGGY]  if(s.regionMatches(0,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(s.regionMatches(0,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(0,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    CASE_QUOTE,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
717	[BUG]  [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(     "<\\     ");  }  else  {  sb.append(c);  }  break;  default:        [BUGGY]  if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]      if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  <  0  ||  s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    c,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
