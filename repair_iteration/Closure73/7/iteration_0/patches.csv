bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]    [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	  	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(outputCharsetEncoder  ==  null)  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null)  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
8	[BUG]  [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(outputCharsetEncoder.canEncode(c))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder.canEncode(c))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(c!=  outputCharsetEncoder)  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder)  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append( "<\\ ");  }  else  {  sb.append(c);  }  break;  default:    [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]  if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	if  (outputCharsetEncoder  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
