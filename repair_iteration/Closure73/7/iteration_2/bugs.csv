bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  null  &&  outputCharsetEncoder.canEncode(outputCharsetEncoder))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  &&  outputCharsetEncoder.canEncode(outputCharsetEncoder))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isResourceAsStream(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  outputCharsetEncoder)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  outputCharsetEncoder)  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  if(c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c  ==  outputCharsetEncoder)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  outputCharsetEncoder)  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  if(c!=  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  inputCharsetEncoder)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  inputCharsetEncoder)  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  outputCharsetEncoder.charAt(i))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.charAt(i))  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  if(c  >=  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c  >=  outputCharsetEncoder)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >=  outputCharsetEncoder)  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  if(c  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c  ==  null)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  null)  {	  if(outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  if(c  ==  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c  ==  inputCharsetEncoder)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  ==  inputCharsetEncoder)  {	  if(outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(!s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  int  outputCharsetEncoder  =  getOutputCharsetEncoder();  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  getOutputCharsetEncoder();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  char  c  =  s.charAt(i  +  1);  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i  +  1);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  c  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  c  =  s.charAt(i  +  1);  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	c  =  s.charAt(i  +  1);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i));  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i));	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  sb.append( "  <   ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  sb.append( "  <   ");  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <   ");	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  int  outputCharsetEncoder  =  s.charAt(i  +  1);  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	int  outputCharsetEncoder  =  s.charAt(i  +  1);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1));  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i  +  1));	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  if(s.charAt(i)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i)  ==  quote)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)  ==  quote)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  quote)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)  ==  quote)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  quote)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(s.charAt(i)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i)!=  quote)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  quote)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  ':')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)  ==  ':')  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  ':')  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)  ==  '-')  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  '-')  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  if(s.charAt(i  +  1)!=  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)!=  quote)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)!=  quote)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  c,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  c,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  if(!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(true,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  backslashEscape,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  c  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!s.regionMatches(false,  i  +  1,  c,  0,  c.length()))  {	  if(s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  if(c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  START_COMMENT  ||  outputCharsetEncoder!=  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.canEncode(output))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  null  ||  outputCharsetEncoder.canEncode(output))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  null  ||  outputCharsetEncoder.canEncode(output))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  if(c!=  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  END_SCRIPT  ||  c  ==  outputCharsetEncoder)  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(backslashEscape!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  null  &&  outputCharsetEncoder.isEnabled(Feature.QUOTE_FIELD_ENABLED))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  ||  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
51	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null  ||  inputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder  ==  null  ||  inputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder  ==  null  ||  inputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
52	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HEX_CHARS,  0,  s.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  INSTANCE,  0,  STATEMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  INSTANCE,  0,  STATEMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  INSTANCE,  0,  STATEMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  RECORD_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c));  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c));	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i));  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(i),  outputCharsetEncoder.charAt(i));	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  if(!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(!outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  if(hexJavaScriptRepresentation!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(hexJavaScriptRepresentation!=  null)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(hexJavaScriptRepresentation!=  null)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  if(hexJavaScriptRepresentation  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(hexJavaScriptRepresentation  ==  null)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(hexJavaScriptRepresentation  ==  null)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  if(sb!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(sb!=  null)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null)  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  BAD_COMMENT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
65	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  c)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(outputCharsetEncoder!=  c)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(outputCharsetEncoder!=  c)  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
67	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  HX_CHARS,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'n')  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  1)  ==  'r')  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if(sb!=  null  &&  s.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(sb!=  null  &&  s.length()  >  0)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  s.length()  >  0)  {	  if(outputCharsetEncoder!=    null    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
72	[BUG]  [BUGGY]  char  c  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  char  c  =  s.charAt(i);  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	char  c  =  s.charAt(i);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  sb.append(c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  sb.append(c);  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append(c);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  sb.append( "n ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  sb.append( "n ");  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "n ");	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  sb.append( "  <  n ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  sb.append( "  <  n ");  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	sb.append( "  <  n ");	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  DEFAULT_SCRIPT,  0,  DEFAULT_SCRIPT.length()))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
77	[BUG]  [BUGGY]  if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(true,  i  +  1,  outputCharsetEncoder,  0,  outputCharsetEncoder.charAt(i  +  1)))  {	  if(s.regionMatches(true,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  ||  s.charAt(i)  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i)!=  'n'  ||  s.charAt(i)  ==  'r')  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  ||  s.charAt(i)  ==  'r')  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i  +  1)  ==  'n'  ||  s.charAt(i  +  2)  ==  'n')  {	  if(outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( ".java "))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( ".java "))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( ".java "))  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.encode(c))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  outputCharsetEncoder.encode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.encode(c))  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "n "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c!=  outputCharsetEncoder.endsWith( "n "))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c!=  outputCharsetEncoder.endsWith( "n "))  {	  if(c!=    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  inputCharsetEncoder,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  CASE_QUOTE,  0,  outputCharsetEncoder.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
85	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  BAD_SCRIPT,  0,  BAD_SCRIPT.length()))  {	  if(s.regionMatches(false,    i    +    1,    outputCharsetEncoder,    0,    outputCharsetEncoder.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  if(c  >  0x7F  ||  outputCharsetEncoder  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(c  >  0x7F  ||  outputCharsetEncoder  ==  null)  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(c  >  0x7F  ||  outputCharsetEncoder  ==  null)  {	  if(outputCharsetEncoder    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(sb!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
88	[BUG]  [BUGGY]  if(s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.charAt(i)!=  'n'  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(outputCharsetEncoder!=    null    ||    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.length()  ==  0  ||  s.regionMatches(true,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
90	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  END_SCRIPT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(s.regionMatches(false,  i  +  1,  DEFAULT_CASE,  0,  DEFAULT_COMMENT.length()))  {	  if(s.regionMatches(true,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  sb.append(   "<\\   ");  }  else  {  sb.append(c);  }  break;  default:      [BUGGY]  if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {  [BUGGY]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1034	1034	1	replace	if(sb.charAt(i  +  1)  ==  'n'  ||  s.regionMatches(false,  i  +  1,  START_COMMENT,  0,  START_COMMENT.length()))  {	  if(s.regionMatches(false,    i    +    1,    START_COMMENT,    0,    START_COMMENT.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
