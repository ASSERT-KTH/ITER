bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sb.append( "00e7f ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "00e7f ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "00e7f ");	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
2	[BUG]  [BUGGY]  sb.append( "0x7f ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "0x7f ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "0x7f ");	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
3	[BUG]  [BUGGY]  sb.append( "u00e7f ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "u00e7f ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "u00e7f ",  c);	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
4	[BUG]  [BUGGY]  sb.append( "msg.u00e7f ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.u00e7f ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.u00e7f ");	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
5	[BUG]  [BUGGY]  sb.append( "00e7f ",  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "00e7f ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "00e7f ",  c);	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
6	[BUG]  [BUGGY]  sb.append( ";next ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";next ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";next ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
7	[BUG]  [BUGGY]  sb.append( ";native ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";native ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";native ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
8	[BUG]  [BUGGY]  sb.append( ";nt ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";nt ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";nt ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
9	[BUG]  [BUGGY]  sb.append( ";no ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";no ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";no ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
10	[BUG]  [BUGGY]  sb.append( ";navigation ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";navigation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";navigation ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
11	[BUG]  [BUGGY]  sb.append( ";non ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";non ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";non ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
12	[BUG]  [BUGGY]  sb.append( ": ").append(c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ": ").append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ": ").append(c);	  sb.append(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
13	[BUG]  [BUGGY]  sb.append( ": "  +  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ": "  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ": "  +  quote);	  sb.append(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
14	[BUG]  [BUGGY]  sb.append(c, ": ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, ": ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, ": ");	  sb.append(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
15	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  quote);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
16	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  c);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  backslashEscape);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
18	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  1);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
19	[BUG]  [BUGGY]  sb.append('f',  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('f',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('f',  c);	  sb.append('f');    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  sb.append('f'  +  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('f'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('f'  +  c);	  sb.append('f');    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  sb.append('f').append(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('f').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('f').append(c);	  sb.append('f');    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  sb.append('F');  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('F');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('F');	  sb.append('f');    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  sb.append('N',  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N',  c);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  sb.append('N').append(Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N').append(Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N').append(Character.toLowerCase(c));	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  sb.append('N').append(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N').append(c);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
26	[BUG]  [BUGGY]  sb.append( "null ",  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "null ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "null ",  c);	  sb.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
27	[BUG]  [BUGGY]  sb.append( "[null] ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "[null] ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "[null] ");	  sb.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
28	[BUG]  [BUGGY]  sb.append( ",null ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",null ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",null ");	  sb.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
29	[BUG]  [BUGGY]  sb.append(backslashEscape);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(backslashEscape);	  sb.append(doublequoteEscape);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  sb.append(doublequoteEscape,  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(doublequoteEscape,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(doublequoteEscape,  quote);	  sb.append(doublequoteEscape);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  sb.append(quoteEscape);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(quoteEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(quoteEscape);	  sb.append(doublequoteEscape);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  sb.append('n'  +  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('n'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('n'  +  c);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
33	[BUG]  [BUGGY]  sb.append('n'  +  quote  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('n'  +  quote  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('n'  +  quote  +  1);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
34	[BUG]  [BUGGY]  sb.append('N'  +  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N'  +  c);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
35	[BUG]  [BUGGY]  sb.append(c  +  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c  +  quote);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
36	[BUG]  [BUGGY]  sb.append('0'  +  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0'  +  c);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
37	[BUG]  [BUGGY]  sb.append( ",null ",  c);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",null ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",null ",  c);	  sb.append(   ",n   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
38	[BUG]  [BUGGY]  sb.append( ".reportUnsupportedOperation ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".reportUnsupportedOperation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".reportUnsupportedOperation ");	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
39	[BUG]  [BUGGY]  sb.append(c, "mv.reportUnsupportedOperation ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, "mv.reportUnsupportedOperation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, "mv.reportUnsupportedOperation ");	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
40	[BUG]  [BUGGY]  sb.append( "mv.reportUnsupportedOperation ",  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.reportUnsupportedOperation ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.reportUnsupportedOperation ",  c);	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
41	[BUG]  [BUGGY]  sb.append( ",mv.reportUnsupportedOperation ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",mv.reportUnsupportedOperation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",mv.reportUnsupportedOperation ");	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
42	[BUG]  [BUGGY]  sb.append( "mv.reportUnsupportedOperation ").append(c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.reportUnsupportedOperation ").append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.reportUnsupportedOperation ").append(c);	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
43	[BUG]  [BUGGY]  sb.append(c  + ".reportUnsupportedOperation ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c  + ".reportUnsupportedOperation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c  + ".reportUnsupportedOperation ");	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
44	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toUpperCase(c)+  1);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toUpperCase(c),  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toUpperCase(c),  quote);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c)+  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toUpperCase(c)+  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toUpperCase(c)+  quote);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  sb.append( "Native ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "Native ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "Native ");	  sb.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
48	[BUG]  [BUGGY]  sb.append( "native ",  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "native ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "native ",  c);	  sb.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
49	[BUG]  [BUGGY]  sb.append( "[native] ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "[native] ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "[native] ");	  sb.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
50	[BUG]  [BUGGY]  sb.append( "[Native] ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "[Native] ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "[Native] ");	  sb.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
51	[BUG]  [BUGGY]  sb.append( "native  representation ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "native  representation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "native  representation ");	  sb.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
52	[BUG]  [BUGGY]  sb.append(c,  quote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  quote);	  sb.append(c,   ",   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
53	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  ',');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),  ',');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),  ',');	  sb.append(c,   ",   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
54	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),   ", ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),   ", ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),   ", ");	  sb.append(c,   ",   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
55	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  ':');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),  ':');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),  ':');	  sb.append(c,   ",   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
56	[BUG]  [BUGGY]  sb.append(c, "msg.no.character ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, "msg.no.character ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, "msg.no.character ");	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
57	[BUG]  [BUGGY]  sb.append( ",msg.no.character ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",msg.no.character ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",msg.no.character ");	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
58	[BUG]  [BUGGY]  sb.append( ".s.character ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".s.character ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".s.character ");	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
59	[BUG]  [BUGGY]  sb.append( "msg.no.character ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.no.character ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.no.character ",  c);	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
60	[BUG]  [BUGGY]  sb.append( "msg.no.character. ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.no.character. ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.no.character. ");	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
61	[BUG]  [BUGGY]  sb.append( "msg.no.character ",  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.no.character ",  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.no.character ",  quote);	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
62	[BUG]  [BUGGY]  sb.append(',',  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(',',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(',',  c);	  sb.append(   ",   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
63	[BUG]  [BUGGY]  sb.append( "negative ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "negative ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "negative ");	  sb.append(   ";negative   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
64	[BUG]  [BUGGY]  sb.append( ";negative ",  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";negative ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";negative ",  c);	  sb.append(   ";negative   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
65	[BUG]  [BUGGY]  sb.append(c;negative ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c;negative ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c;negative ");	  sb.append(   ";negative   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
66	[BUG]  [BUGGY]  sb.append( ";negative: ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";negative: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";negative: ");	  sb.append(   ";negative   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
67	[BUG]  [BUGGY]  sb.append( ".negative ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".negative ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".negative ");	  sb.append(   ";negative   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
68	[BUG]  [BUGGY]  sb.append( "#000 ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#000 ");	  sb.append(   "#00   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
69	[BUG]  [BUGGY]  sb.append( "#0 ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#0 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#0 ");	  sb.append(   "#00   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
70	[BUG]  [BUGGY]  sb.append( "#00 ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#00 ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#00 ",  c);	  sb.append(   "#00   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
71	[BUG]  [BUGGY]  sb.append( "#0000 ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#0000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#0000 ");	  sb.append(   "#00   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
72	[BUG]  [BUGGY]  sb.append( ":: ").append(c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ":: ").append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ":: ").append(c);	  sb.append(   "::   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
73	[BUG]  [BUGGY]  sb.append(c, ":: ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, ":: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, ":: ");	  sb.append(   "::   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
74	[BUG]  [BUGGY]  sb.append( ":: "  +  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ":: "  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ":: "  +  quote);	  sb.append(   "::   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
75	[BUG]  [BUGGY]  sb.append(c  + ":: ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c  + ":: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c  + ":: ");	  sb.append(   "::   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
76	[BUG]  [BUGGY]  sb.append(':',  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(':',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(':',  c);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
77	[BUG]  [BUGGY]  sb.append(':').append(c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(':').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(':').append(c);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  sb.append(':'  +  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(':'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(':'  +  c);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
80	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
81	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
82	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
83	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendHexJavaScriptRepresentation(c,  sb);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
84	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
85	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  quote);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  quote);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
86	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  backslashEscape);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
87	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb,  quote);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb,  quote);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
88	[BUG]  [BUGGY]  sb.append(',').append(c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(',').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(',').append(c);	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
89	[BUG]  [BUGGY]  sb.append(c,  ',');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  ',');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  ',');	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
90	[BUG]  [BUGGY]  sb.append(','  +  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(','  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(','  +  c);	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  sb.append(';',  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(';',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(';',  c);	  sb.append(';');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
92	[BUG]  [BUGGY]  sb.append(';').append(c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(';').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(';').append(c);	  sb.append(';');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
93	[BUG]  [BUGGY]  sb.append('0000');  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0000');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0000');	  sb.append(   "0000   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
94	[BUG]  [BUGGY]  sb.append( "0000 ",  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "0000 ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "0000 ",  c);	  sb.append(   "0000   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
95	[BUG]  [BUGGY]  sb.append( ".000 ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".000 ");	  sb.append(   "0000   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
96	[BUG]  [BUGGY]  sb.append('n',  c  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('n',  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('n',  c  +  1);	  sb.append('n',    c);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
97	[BUG]  [BUGGY]  sb.append('N',  c  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N',  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N',  c  +  1);	  sb.append('n',    c);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
98	[BUG]  [BUGGY]  sb.append('0',  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0',  c);	  sb.append('n',    c);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
99	[BUG]  [BUGGY]  sb.append('$',  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('$',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('$',  c);	  sb.append('n',    c);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
100	[BUG]  [BUGGY]  sb.append(c,  'n');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  'n');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  'n');	  sb.append('n',    c);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  sb.append('0').append(Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0').append(Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0').append(Character.toLowerCase(c));	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
102	[BUG]  [BUGGY]  sb.append( ".xml ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".xml ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".xml ");	  sb.append(   "mv.xml   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
103	[BUG]  [BUGGY]  sb.append( "mv.xml ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.xml ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.xml ",  c);	  sb.append(   "mv.xml   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
104	[BUG]  [BUGGY]  sb.append(c, "mv.xml ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, "mv.xml ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, "mv.xml ");	  sb.append(   "mv.xml   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
105	[BUG]  [BUGGY]  sb.append( "mv.xhtml ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.xhtml ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.xhtml ");	  sb.append(   "mv.xml   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
106	[BUG]  [BUGGY]  sb.append( ",mv.xml ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",mv.xml ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",mv.xml ");	  sb.append(   "mv.xml   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
107	[BUG]  [BUGGY]  sb.append( "; ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "; ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "; ",  c);	  sb.append(   ";   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
108	[BUG]  [BUGGY]  sb.append( ";: ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";: ");	  sb.append(   ";   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
109	[BUG]  [BUGGY]  sb.append( "mv.utf-8 ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.utf-8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.utf-8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
110	[BUG]  [BUGGY]  sb.append( "utf-8 ",  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "utf-8 ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "utf-8 ",  c);	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
111	[BUG]  [BUGGY]  sb.append( "f-8 ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "f-8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "f-8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
112	[BUG]  [BUGGY]  sb.append( "tf-8 ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "tf-8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "tf-8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
113	[BUG]  [BUGGY]  sb.append( "mdf-8 ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mdf-8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mdf-8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
114	[BUG]  [BUGGY]  sb.append( "00000 ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "00000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "00000 ");	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
115	[BUG]  [BUGGY]  sb.append( "$000 ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "$000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "$000 ");	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
116	[BUG]  [BUGGY]  sb.append(c;null ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c;null ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c;null ");	  sb.append(   ";null   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
117	[BUG]  [BUGGY]  sb.append( ";null ",  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";null ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";null ",  c);	  sb.append(   ";null   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
118	[BUG]  [BUGGY]  sb.append( ".null ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".null ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".null ");	  sb.append(   ";null   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
119	[BUG]  [BUGGY]  sb.append( "mv.export.backslash ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.export.backslash ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.export.backslash ",  c);	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
120	[BUG]  [BUGGY]  sb.append( ".backslash ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".backslash ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
121	[BUG]  [BUGGY]  sb.append(c, "mv.export.backslash ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, "mv.export.backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, "mv.export.backslash ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
122	[BUG]  [BUGGY]  sb.append( ",mv.export.backslash ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",mv.export.backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",mv.export.backslash ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
123	[BUG]  [BUGGY]  sb.append( "mv.export.backslash ",  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.export.backslash ",  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.export.backslash ",  quote);	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
124	[BUG]  [BUGGY]  sb.append( "mv.export.background ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.export.background ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.export.background ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
125	[BUG]  [BUGGY]  sb.append('+',  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('+',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('+',  c);	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
126	[BUG]  [BUGGY]  sb.append('+'  +  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('+'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('+'  +  c);	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  sb.append('+').append(c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('+').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('+').append(c);	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
128	[BUG]  [BUGGY]  sb.append('+'  +  quote);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('+'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('+'  +  quote);	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
129	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendJavaScriptRepresentation(sb,  c,  quote);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
130	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendJavaScriptRepresentation(sb,  c,  c);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
131	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendJavaScriptRepresentation(sb,  c,  backslashEscape);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
132	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendJavaScriptRepresentation(sb,  c,  1);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
133	[BUG]  [BUGGY]  appendIgnoreJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendIgnoreJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendIgnoreJavaScriptRepresentation(sb,  c);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
134	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c,  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c,  quote);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
135	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c  +  1);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
136	[BUG]  [BUGGY]  appendSingleQuotedString(sb,  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedString(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedString(sb,  c);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
137	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c,  quotes);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c,  quotes);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c,  quotes);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
138	[BUG]  [BUGGY]  appendSingleQuotedChar(c,  sb);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(c,  sb);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(c,  sb);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
139	[BUG]  [BUGGY]  n   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n   ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n   ");	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
140	[BUG]  [BUGGY]  n't  getFlag(CATCH_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n't  getFlag(CATCH_OF_EXPR);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n't  getFlag(CATCH_OF_EXPR);	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
141	[BUG]  [BUGGY]  n't  getFlag(CATCH_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n't  getFlag(CATCH_OF_EXPR));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n't  getFlag(CATCH_OF_EXPR));	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
142	[BUG]  [BUGGY]  n.append(c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n.append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n.append(c);	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
143	[BUG]  [BUGGY]  n't  getCurrentStructure();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n't  getCurrentStructure();  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n't  getCurrentStructure();	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
144	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
145	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
148	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
149	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
150	[BUG]  [BUGGY]  sb.append(c;n: ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c;n: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c;n: ");	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
151	[BUG]  [BUGGY]  sb.append( ";n:n ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n:n ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n:n ");	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
152	[BUG]  [BUGGY]  sb.append( ";n: ",  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n: ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n: ",  c);	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
153	[BUG]  [BUGGY]  sb.append( "n: ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "n: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "n: ");	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
154	[BUG]  [BUGGY]  sb.append( ".n: ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".n: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".n: ");	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
155	[BUG]  [BUGGY]  sb.append('000');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('000');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('000');	  sb.append(   "000   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
156	[BUG]  [BUGGY]  sb.append( "000 ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "000 ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "000 ",  c);	  sb.append(   "000   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
157	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c)+  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c)+  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c)+  1);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
158	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c)+  quote);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c)+  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c)+  quote);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
159	[BUG]  [BUGGY]  sb.append(CaseConsumer.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(CaseConsumer.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(CaseConsumer.toLowerCase(c));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
160	[BUG]  [BUGGY]  sb.append('00');  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('00');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('00');	  sb.append(   "00   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
161	[BUG]  [BUGGY]  appendSinglequoteEscape(sb,  c,  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(sb,  c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(sb,  c,  quote);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
162	[BUG]  [BUGGY]  appendSinglequoteEscape(sb,  c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(sb,  c,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(sb,  c,  backslashEscape);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
163	[BUG]  [BUGGY]  appendSinglequoteEscape(sb,  c,  quotes);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(sb,  c,  quotes);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(sb,  c,  quotes);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
164	[BUG]  [BUGGY]  appendSinglequoteEscape(sb,  c  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(sb,  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(sb,  c  +  1);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
165	[BUG]  [BUGGY]  appendSinglequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
166	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  quote);  appendSinglequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  quote);  appendSinglequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  quote);  appendSinglequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
167	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  appendSinglequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  appendSinglequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  appendSinglequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
168	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  quote);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendHexJavaScriptRepresentation(sb,  c,  quote);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
169	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendHexJavaScriptRepresentation(sb,  c,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
170	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendHexJavaScriptRepresentation(sb,  c,  backslashEscape);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
171	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendHexJavaScriptRepresentation(sb,  c,  1);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
172	[BUG]  [BUGGY]  appendDevHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendDevHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendDevHexJavaScriptRepresentation(sb,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
173	[BUG]  [BUGGY]  sb.append( "$0 ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "$0 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "$0 ");	  sb.append(   "$00   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
174	[BUG]  [BUGGY]  sb.append( "$00 ",  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "$00 ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "$00 ",  c);	  sb.append(   "$00   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
175	[BUG]  [BUGGY]  sb.append( ".$00 ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".$00 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".$00 ");	  sb.append(   "$00   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
176	[BUG]  [BUGGY]  sb.append(c,  Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  Character.toLowerCase(c));	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
177	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),  backslashEscape);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
178	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  quote  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),  quote  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),  quote  +  1);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
179	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  quote,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),  quote,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),  quote,  backslashEscape);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
180	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  quote,  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c),  quote,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c),  quote,  c);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
181	[BUG]  [BUGGY]  sb.append( "msg.js.internal.reflect.backslash ",  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.js.internal.reflect.backslash ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.js.internal.reflect.backslash ",  c);	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
182	[BUG]  [BUGGY]  sb.append( "msg.js.internal.reflect.backslash ",  quote);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.js.internal.reflect.backslash ",  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.js.internal.reflect.backslash ",  quote);	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
183	[BUG]  [BUGGY]  sb.append( ",msg.js.internal.reflect.backslash ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",msg.js.internal.reflect.backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",msg.js.internal.reflect.backslash ");	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
184	[BUG]  [BUGGY]  sb.append( "msg.js.internal.reflect.background ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.js.internal.reflect.background ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.js.internal.reflect.background ");	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
185	[BUG]  [BUGGY]  sb.append( "msg.js.internal.reflect. ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.js.internal.reflect. ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.js.internal.reflect. ");	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
186	[BUG]  [BUGGY]  sb.append(c, "msg.js.internal.reflect.backslash ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, "msg.js.internal.reflect.backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, "msg.js.internal.reflect.backslash ");	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
187	[BUG]  [BUGGY]  sb.append('$').append(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('$').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('$').append(c);	  sb.append('$');    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
188	[BUG]  [BUGGY]  sb.append('$'  +  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('$'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('$'  +  c);	  sb.append('$');    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
189	[BUG]  [BUGGY]  sb.append('$'  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('$'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('$'  +  quote);	  sb.append('$');    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
190	[BUG]  [BUGGY]  sb.append( ";n ", ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n ", ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n ", ",  c);	  sb.append(   ";n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
191	[BUG]  [BUGGY]  sb.append( ";n ", "n ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n ", "n ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n ", "n ");	  sb.append(   ";n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
192	[BUG]  [BUGGY]  sb.append( ";n ", " ",  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n ", " ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n ", " ",  c);	  sb.append(   ";n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
193	[BUG]  [BUGGY]  sb.append('#',  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('#',  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('#',  c);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
194	[BUG]  [BUGGY]  sb.append('#').append(c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('#').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('#').append(c);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
195	[BUG]  [BUGGY]  sb.append('#'  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('#'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('#'  +  quote);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
196	[BUG]  [BUGGY]  sb.append('#'  +  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('#'  +  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('#'  +  c);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
197	[BUG]  [BUGGY]  sb.append( ",null, ",  c);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",null, ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",null, ",  c);	  sb.append(   ",n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
198	[BUG]  [BUGGY]  sb.append( ",n ", "n ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",n ", "n ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",n ", "n ");	  sb.append(   ",n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
199	[BUG]  [BUGGY]  sb.append( ",null ", "c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",null ", "c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",null ", "c);	  sb.append(   ",n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
200	[BUG]  [BUGGY]  sb.append( "# ",  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "# ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "# ",  c);	  sb.append(   "#   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
201	[BUG]  [BUGGY]  sb.append( "# ").append(c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "# ").append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "# ").append(c);	  sb.append(   "#   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
202	[BUG]  [BUGGY]  sb.append( "#n ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#n ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#n ");	  sb.append(   "#   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
203	[BUG]  [BUGGY]  sb.append( "numeric ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "numeric ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "numeric ");	  sb.append(   ";numeric   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
204	[BUG]  [BUGGY]  sb.append( "#;numeric ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#;numeric ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#;numeric ");	  sb.append(   ";numeric   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
205	[BUG]  [BUGGY]  sb.append( ";numeric ",  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";numeric ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";numeric ",  c);	  sb.append(   ";numeric   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
206	[BUG]  [BUGGY]  sb.append(c;numeric ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c;numeric ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c;numeric ");	  sb.append(   ";numeric   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
207	[BUG]  [BUGGY]  sb.append( ".numeric ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".numeric ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".numeric ");	  sb.append(   ";numeric   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
208	[BUG]  [BUGGY]  AppendSinglequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendSinglequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendSinglequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
209	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c  +  1);  appendSinglequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c  +  1);  appendSinglequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c  +  1);  appendSinglequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
210	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendDoublequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  appendDoublequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c);  appendDoublequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
211	[BUG]  [BUGGY]  AppendJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
212	[BUG]  [BUGGY]  sb.append( "msg.js.internal.reflect.backlash ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.js.internal.reflect.backlash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.js.internal.reflect.backlash ");	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
213	[BUG]  [BUGGY]  sb.append( "msg.js.internal.reflect.back-slash ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "msg.js.internal.reflect.back-slash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "msg.js.internal.reflect.back-slash ");	  sb.append(   "msg.js.internal.reflect.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
214	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c  +  1));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(Character.toLowerCase(c  +  1));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(Character.toLowerCase(c  +  1));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
215	[BUG]  [BUGGY]  sb.append(':'  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(':'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(':'  +  quote);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
216	[BUG]  [BUGGY]  sb.append(':').append(quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(':').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(':').append(quote);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
217	[BUG]  [BUGGY]  sb.append(quote,  Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(quote,  Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(quote,  Character.toLowerCase(c));	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
218	[BUG]  [BUGGY]  sb.append(CaseConsumer.toLowerCase(c),  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(CaseConsumer.toLowerCase(c),  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(CaseConsumer.toLowerCase(c),  quote);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
219	[BUG]  [BUGGY]  sb.append(c,  Character.toLowerCase(c),  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  Character.toLowerCase(c),  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  Character.toLowerCase(c),  quote);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
220	[BUG]  [BUGGY]  sb.append('$').append(quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('$').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('$').append(quote);	  sb.append('$');    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
221	[BUG]  [BUGGY]  sb.append('$')+  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('$')+  1;  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('$')+  1;	  sb.append('$');    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
222	[BUG]  [BUGGY]  sb.append( "[:: ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "[:: ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "[:: ");	  sb.append(   "::   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
223	[BUG]  [BUGGY]  sb.append( ":: ").append(quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ":: ").append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ":: ").append(quote);	  sb.append(   "::   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
224	[BUG]  [BUGGY]  sb.append( "#$ ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#$ ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#$ ");	  sb.append(   "#   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
225	[BUG]  [BUGGY]  if(c  >  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
226	[BUG]  [BUGGY]  sb.append('.');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('.');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('.');	  sb.append(   "mv.xml   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
227	[BUG]  [BUGGY]  sb.append( "0000000 ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "0000000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "0000000 ");	  sb.append(   "0000   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
228	[BUG]  [BUGGY]  sb.append( "0000, ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "0000, ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "0000, ");	  sb.append(   "0000   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
229	[BUG]  [BUGGY]  sb.append( "#00, ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "#00, ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "#00, ");	  sb.append(   "#00   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
230	[BUG]  [BUGGY]  sb.append('0'  +  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0'  +  quote);	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
231	[BUG]  [BUGGY]  sb.append('0').append(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0').append(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0').append(c);	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
232	[BUG]  [BUGGY]  sb.append('0').append(Character.toUpperCase(c));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('0').append(Character.toUpperCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('0').append(Character.toUpperCase(c));	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
233	[BUG]  [BUGGY]  sb.append(';'  +  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(';'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(';'  +  quote);	  sb.append(';');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
234	[BUG]  [BUGGY]  sb.append(';').append(quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(';').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(';').append(quote);	  sb.append(';');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
235	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ".charAt(c));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".s.IFJDCS ".charAt(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".s.IFJDCS ".charAt(c));	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
236	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".s.IFJDCS ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".s.IFJDCS ");	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
237	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ".charAt(0));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ".s.IFJDCS ".charAt(0));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ".s.IFJDCS ".charAt(0));	  sb.append(   "msg.no.character   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
238	[BUG]  [BUGGY]  sb.append('f'  +  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('f'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('f'  +  quote);	  sb.append('f');    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
239	[BUG]  [BUGGY]  sb.append('e');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('e');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('e');	  sb.append('f');    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
240	[BUG]  [BUGGY]  sb.append( ";nnel ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";nnel ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";nnel ");	  sb.append(   ";nn   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
241	[BUG]  [BUGGY]  sb.append( "$0000 ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "$0000 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "$0000 ");	  sb.append(   "$00   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
242	[BUG]  [BUGGY]  sb.append( "00, ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "00, ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "00, ");	  sb.append(   "00   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
243	[BUG]  [BUGGY]  sb.append( "mv.backslash ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.backslash ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
244	[BUG]  [BUGGY]  sb.append( "mv.export. ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.export. ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.export. ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
245	[BUG]  [BUGGY]  sb.append( "null ",  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "null ",  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "null ",  quote);	  sb.append(   "null   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
246	[BUG]  [BUGGY]  sb.append('/');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('/');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('/');	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
247	[BUG]  [BUGGY]  sb.append('+')+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('+')+  1;  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('+')+  1;	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
248	[BUG]  [BUGGY]  sb.append('+').append(quote);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('+').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('+').append(quote);	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
249	[BUG]  [BUGGY]  sb.append( ",n ", "rn ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",n ", "rn ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",n ", "rn ");	  sb.append(   ",n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
250	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  0);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  0);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
251	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  0x7f);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  0x7f);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  0x7f);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
252	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(sb,  c  +  1);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
253	[BUG]  [BUGGY]  if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
254	[BUG]  [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendDescriptorHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendDescriptorHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendDescriptorHexJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
255	[BUG]  [BUGGY]  AppendDeviation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDeviation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDeviation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
256	[BUG]  [BUGGY]  AppendDelimiterHexJavaScriptRepresentation(sb,  c);  appendDelimiterHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDelimiterHexJavaScriptRepresentation(sb,  c);  appendDelimiterHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDelimiterHexJavaScriptRepresentation(sb,  c);  appendDelimiterHexJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
257	[BUG]  [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDescriptorHexJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
258	[BUG]  [BUGGY]  sb.append(',').append(Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(',').append(Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(',').append(Character.toLowerCase(c));	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
259	[BUG]  [BUGGY]  sb.append(','  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(','  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(','  +  quote);	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
260	[BUG]  [BUGGY]  sb.append(',').append(quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(',').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(',').append(quote);	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
261	[BUG]  [BUGGY]  sb.append(',').append(Character.toUpperCase(c));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(',').append(Character.toUpperCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(',').append(Character.toUpperCase(c));	  sb.append(',');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
262	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendJavaScriptRepresentation(sb,  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendJavaScriptRepresentation(sb,  c  +  1);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
263	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  0);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  0);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendJavaScriptRepresentation(sb,  c,  0);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
264	[BUG]  [BUGGY]  sb.append( "mv-8 ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv-8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv-8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
265	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c,  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c,  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c,  1);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
266	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c,  c);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
267	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c,  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c,  0);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c,  0);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
268	[BUG]  [BUGGY]  appendSingleQuotedChar(sb,  c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSingleQuotedChar(sb,  c,  backslashEscape);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSingleQuotedChar(sb,  c,  backslashEscape);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
269	[BUG]  [BUGGY]  n.append( ";n ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n.append( ";n ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n.append( ";n ");	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
270	[BUG]  [BUGGY]  n't  getJavaScriptRepresentation();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n't  getJavaScriptRepresentation();  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n't  getJavaScriptRepresentation();	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
271	[BUG]  [BUGGY]  n  =  sb.toString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n  =  sb.toString();  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n  =  sb.toString();	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
272	[BUG]  [BUGGY]  n't  matchJavaScriptRepresentation(c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n't  matchJavaScriptRepresentation(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n't  matchJavaScriptRepresentation(c);	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
273	[BUG]  [BUGGY]  sb.append('N'  +  quote);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N'  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N'  +  quote);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
274	[BUG]  [BUGGY]  sb.append( "NaN ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "NaN ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "NaN ");	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
275	[BUG]  [BUGGY]  sb.append('N').append(quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('N').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('N').append(quote);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
276	[BUG]  [BUGGY]  sb.append( "  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "  }   ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "  }   ");	  sb.append(   ";   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
277	[BUG]  [BUGGY]  sb.append( ",   ",  c  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",   ",  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",   ",  c  +  1);	  sb.append(   ",   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
278	[BUG]  [BUGGY]  sb.append( ",n, ",  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",n, ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",n, ",  c);	  sb.append(   ",   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
279	[BUG]  [BUGGY]  sb.append( ". ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ". ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ". ");	  sb.append(   "       ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
280	[BUG]  [BUGGY]  sb.append( "JavaScriptRepresentation.reportUnsupportedOperation ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "JavaScriptRepresentation.reportUnsupportedOperation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "JavaScriptRepresentation.reportUnsupportedOperation ");	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
281	[BUG]  [BUGGY]  sb.append( "/.reportUnsupportedOperation ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "/.reportUnsupportedOperation ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "/.reportUnsupportedOperation ");	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
282	[BUG]  [BUGGY]  sb.append( "mv.reportUnsupportedOperation "  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.reportUnsupportedOperation "  +  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.reportUnsupportedOperation "  +  quote);	  sb.append(   "mv.reportUnsupportedOperation   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
283	[BUG]  [BUGGY]  appendSinglequoteEscape(sb,  c,  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(sb,  c,  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(sb,  c,  1);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
284	[BUG]  [BUGGY]  appendSinglequoteEscape(sb,  c,  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendSinglequoteEscape(sb,  c,  2);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendSinglequoteEscape(sb,  c,  2);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
285	[BUG]  [BUGGY]  sb.append( "007f ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "007f ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "007f ");	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
286	[BUG]  [BUGGY]  sb.append( "$00e7f ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "$00e7f ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "$00e7f ");	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
287	[BUG]  [BUGGY]  sb.append( ";n   ",  c  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n   ",  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n   ",  c  +  1);	  sb.append(   ";n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
288	[BUG]  [BUGGY]  sb.append( ";null ", "c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";null ", "c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";null ", "c);	  sb.append(   ";n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
289	[BUG]  [BUGGY]  sb.append('#').append(Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('#').append(Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('#').append(Character.toLowerCase(c));	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
290	[BUG]  [BUGGY]  sb.append('#').append(quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('#').append(quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('#').append(quote);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
291	[BUG]  [BUGGY]  sb.append( ",null, ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",null, ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",null, ");	  sb.append(   ",n   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
292	[BUG]  [BUGGY]  sb.append( ": ".charAt(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ": ".charAt(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ": ".charAt(c));	  sb.append(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
293	[BUG]  [BUGGY]  sb.append( ":n ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ":n ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ":n ");	  sb.append(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
294	[BUG]  [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendDescriptorHexJavaScriptRepresentation(c,  sb);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendDescriptorHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendDescriptorHexJavaScriptRepresentation(c,  sb);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
295	[BUG]  [BUGGY]  AppendDeviation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDeviation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDeviation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
296	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendHexJavaScriptRepresentation(c,  sb);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
297	[BUG]  [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendDescriptorHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
298	[BUG]  [BUGGY]  appendDeviationHexJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendDeviationHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendDeviationHexJavaScriptRepresentation(sb,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
299	[BUG]  [BUGGY]  appendDelimiterRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendDelimiterRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendDelimiterRepresentation(sb,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
300	[BUG]  [BUGGY]  sb.append(c, ",null ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, ",null ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, ",null ");	  sb.append(   ",n   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
301	[BUG]  [BUGGY]  sb.append(doublequoteEscape,  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(doublequoteEscape,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(doublequoteEscape,  c);	  sb.append(doublequoteEscape);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
302	[BUG]  [BUGGY]  sb.append( ",  quote= ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",  quote= ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",  quote= ");	  sb.append(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
303	[BUG]  [BUGGY]  sb.append('u000');  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('u000');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('u000');	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
304	[BUG]  [BUGGY]  AppendSingleQuotedChar(sb,  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendSingleQuotedChar(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendSingleQuotedChar(sb,  c);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
305	[BUG]  [BUGGY]  appendQuotedChar(sb,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendQuotedChar(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendQuotedChar(sb,  c);	  appendSingleQuotedChar(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
306	[BUG]  [BUGGY]  sb.append(AsciiCharacter.toUpperCase(c));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(AsciiCharacter.toUpperCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(AsciiCharacter.toUpperCase(c));	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
307	[BUG]  [BUGGY]  sb.append('-');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('-');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('-');	  sb.append('+');    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
308	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
309	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
310	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  else  {  appendSinglequoteEscape(c);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  else  {  appendSinglequoteEscape(c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  else  {  appendSinglequoteEscape(c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
311	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  else  {  AppendHexJavaScriptRepresentation(sb,  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  else  {  AppendHexJavaScriptRepresentation(sb,  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  appendHexJavaScriptRepresentation(sb,  c);  appendSinglequoteEscape(c);  }  else  {  AppendHexJavaScriptRepresentation(sb,	  AppendHexJavaScriptRepresentation(sb,    c);    appendSinglequoteEscape(c);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
312	[BUG]  [BUGGY]  sb.append('n',  c  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append('n',  c  -  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append('n',  c  -  1);	  sb.append('n',    c);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
313	[BUG]  [BUGGY]  n:   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n:   ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n:   ");	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
314	[BUG]  [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  'n');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  'n');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  'n');	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
315	[BUG]  [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  ';');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  ';');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  ';');	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
316	[BUG]  [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.substring(0,  c):  sb.substring(c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.substring(0,  c):  sb.substring(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.substring(0,  c):  sb.substring(c);	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
317	[BUG]  [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  'n';  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  'n';  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	n:(c  >  0x1f  &&  c  <=  0x7f)?  sb.charAt(c  -  1):  'n';	  sb.append(   ";n:   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
318	[BUG]  [BUGGY]  sb.append(AsciiCharacter.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(AsciiCharacter.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(AsciiCharacter.toLowerCase(c));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
319	[BUG]  [BUGGY]  sb.append( ";n ", "rn ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ";n ", "rn ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ";n ", "rn ");	  sb.append(   ";n   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
320	[BUG]  [BUGGY]  AppendSinglequoteEscape(sb,  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  AppendSinglequoteEscape(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	AppendSinglequoteEscape(sb,  c);	  appendSinglequoteEscape(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
321	[BUG]  [BUGGY]  null  =  c;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  null  =  c;  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	null  =  c;	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
322	[BUG]  [BUGGY]  null  =  Character.toLowerCase(c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  null  =  Character.toLowerCase(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	null  =  Character.toLowerCase(c);	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
323	[BUG]  [BUGGY]  null  =  Character.toUpperCase(c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  null  =  Character.toUpperCase(c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	null  =  Character.toUpperCase(c);	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
324	[BUG]  [BUGGY]  null  =  Character.toLowerCase(c).trim();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  null  =  Character.toLowerCase(c).trim();  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	null  =  Character.toLowerCase(c).trim();	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
325	[BUG]  [BUGGY]  null  =  Character.toLowerCase(c).charAt(0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  null  =  Character.toLowerCase(c).charAt(0);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	null  =  Character.toLowerCase(c).charAt(0);	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
326	[BUG]  [BUGGY]  null  =  Character.toLowerCase(c).charValue();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  null  =  Character.toLowerCase(c).charValue();  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	null  =  Character.toLowerCase(c).charValue();	  sb.append(c;n   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
327	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
328	[BUG]  [BUGGY]  if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
329	[BUG]  [BUGGY]  sb.append(c  +  'n');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c  +  'n');  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c  +  'n');	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
330	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c  +  1);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendHexJavaScriptRepresentation(sb,  c  +  1);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
331	[BUG]  [BUGGY]  sb.append( "[NaN] ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "[NaN] ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "[NaN] ");	  sb.append(   "native   ");    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
332	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  appendHexJavaScriptRepresentation(sb,  c);  }  else  {  appendHexJavaScriptRepresentation(sb,	  sb.append(c);    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
333	[BUG]  [BUGGY]  if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
334	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  else  {  appendHexJavaScriptRepresentation(  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  else  {  appendHexJavaScriptRepresentation(  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  AppendHexJavaScriptRepresentation(sb,  c);  appendHexJavaScriptRepresentation(c,  sb);  }  else  {  appendHexJavaScriptRepresentation(	  AppendHexJavaScriptRepresentation(sb,    c);    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
335	[BUG]  [BUGGY]  sb.append( ",negative ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( ",negative ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( ",negative ");	  sb.append(   ";negative   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
336	[BUG]  [BUGGY]  sb.append(c,  Character.toUpperCase(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  Character.toUpperCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  Character.toUpperCase(c));	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
337	[BUG]  [BUGGY]  sb.append(c  +  quote,  Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c  +  quote,  Character.toLowerCase(c));  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c  +  quote,  Character.toLowerCase(c));	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
338	[BUG]  [BUGGY]  sb.append(c,  Character.toUpperCase(c),  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c,  Character.toUpperCase(c),  quote);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c,  Character.toUpperCase(c),  quote);	  sb.append(Character.toLowerCase(c),    quote);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
339	[BUG]  [BUGGY]  sb.append( "itf-8 ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "itf-8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "itf-8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
340	[BUG]  [BUGGY]  sb.append( "u00f8 ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "u00f8 ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "u00f8 ");	  sb.append(   "utf-8   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
341	[BUG]  [BUGGY]  sb.append(c, "mv.backslash ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append(c, "mv.backslash ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append(c, "mv.backslash ");	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
342	[BUG]  [BUGGY]  sb.append( "mv.backslash ",  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "mv.backslash ",  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "mv.backslash ",  c);	  sb.append(   "mv.export.backslash   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
343	[BUG]  [BUGGY]  appendShortJavaScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendShortJavaScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendShortJavaScriptRepresentation(sb,  c);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
344	[BUG]  [BUGGY]  appendMoreGuaranteedRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendMoreGuaranteedRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendMoreGuaranteedRepresentation(sb,  c);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
345	[BUG]  [BUGGY]  appendWrappedScriptRepresentation(sb,  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  appendWrappedScriptRepresentation(sb,  c);  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	appendWrappedScriptRepresentation(sb,  c);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
346	[BUG]  [BUGGY]  sb.append( "e7f ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {    if  (c  >  0x1f  &&  c  <=  0x7f)  {      [BUGGY]  sb.append( "e7f ");  [BUGGY]      }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1046	1046	1	replace	sb.append( "e7f ");	  sb.append(   "u00e7f   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
