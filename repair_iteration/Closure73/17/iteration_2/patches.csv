bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  quote  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.charAt(0);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.charAt(0);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2	[BUG]  [BUGGY]  char  quote  =  s.charAt(1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(1);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
3	[BUG]  [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(0);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  outputCharsetEncoder.charAt(0);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
4	[BUG]  [BUGGY]  char  quote  =  s.charAt(0)  +  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(0)  +  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(0)  +  1;	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
5	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i  +  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i  +  1);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.length()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.length()  -  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.length()  -  1;  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.length()  +  1;  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  1;  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  1;  i  <  s.length();  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.length()  +  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.length()  +  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.length()  +  2;  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.length()  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.length()  -  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.length()  -  2;  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.length()  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.length()  *  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.length()  *  2;  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  int  singleq  =  s.lastIndexOf(''');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.lastIndexOf(''');  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.lastIndexOf(''');	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
13	[BUG]  [BUGGY]  int  singleq  =  s.indexOf(''',  i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.indexOf(''',  i);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.indexOf(''',  i);	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
14	[BUG]  [BUGGY]  char  singleq  =  s.indexOf(''');  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  singleq  =  s.indexOf(''');  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  singleq  =  s.indexOf(''');	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
15	[BUG]  [BUGGY]  int  singleq  =  outputCharsetEncoder.indexOf(''');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  outputCharsetEncoder.indexOf(''');  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  outputCharsetEncoder.indexOf(''');	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
16	[BUG]  [BUGGY]  int  singleq  =  s.indexOf(''',  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.indexOf(''',  0);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.indexOf(''',  0);	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
17	[BUG]  [BUGGY]  int  singleq  =  s.indexOf(''',  doubleq);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.indexOf(''',  doubleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.indexOf(''',  doubleq);	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
18	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.getContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  s.getContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  s.getContext();	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getCurrentContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getCurrentContext();	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s);	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
22	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  cc.getContext();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  cc.getContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  cc.getContext();	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
23	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getCodingContext();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getCodingContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getCodingContext();	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length  -  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    s.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    s.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  s.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  s.length;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  s.length;  i++)  {	  for(int    i    =    0;    i    <    s.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length  -  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    s.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length()  +  1;  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length()  +  1;  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length()  +  1;  i  <  s.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outputCharsetEncoder.length();  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  outputCharsetEncoder.length();  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  outputCharsetEncoder.length();  i  <  s.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0,  is.length();  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  is.length();  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  is.length();  i  <  s.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  s.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  s.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  s.length()  +  1;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  0;  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  0;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  0;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
33	[BUG]  [BUGGY]  String  quote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.charAt(i);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.charAt(i);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
34	[BUG]  [BUGGY]  char  quote  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i++);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i++);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
35	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i,  singleq);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
36	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1,  singleq);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i  +  1,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i  +  1,  singleq);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
37	[BUG]  [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  outputCharsetEncoder.charAt(i);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  outputCharsetEncoder.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  outputCharsetEncoder.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  outputCharsetEncoder.length();  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outputCharsetEncoder.length();  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  outputCharsetEncoder.length();  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  outputCharsetEncoder.length();  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.outputCharsetEncoder.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  this.outputCharsetEncoder.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  this.outputCharsetEncoder.length();  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outputCharsetEncoder.length()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  outputCharsetEncoder.length()  -  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  outputCharsetEncoder.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  singleq.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  singleq.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  singleq.length();  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outputCharsetEncoder.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  outputCharsetEncoder.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  outputCharsetEncoder.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  4;  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  4;  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  4;  i  <  s.length();  i++)  {	  for(int    i    =    3;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length()  +  1;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length()  +  1;  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length()  +  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  >=  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  >=  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  len  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  len  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  len  +  1;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length()  *  2;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length()  *  2;  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length()  *  2;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  2;  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  s  =  s.toString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  s.toString();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  s.toString();	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
51	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.toString()  +  quote;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.toString()  +  quote;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.toString()  +  quote;	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
52	[BUG]  [BUGGY]  s  =  s.substring(0,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  s.substring(0,  s.length()  -  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  s.substring(0,  s.length()  -  1);	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
53	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.toString(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.toString(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.toString(s);	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
54	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.toString()  +  1;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.toString()  +  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.toString()  +  1;	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
55	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.toString()  + ": "  +  s;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.toString()  + ": "  +  s;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.toString()  + ": "  +  s;	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  str.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  str.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  str.length();  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  str.length()  -  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  str.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  str.length();  i  <  len;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  str.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  str.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  s.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  2;  i  <  s.size();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  2;  i  <  s.size();  i++)  {	  for(int    i    =    1;    i    <    s.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  s.size()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  s.size()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  s.size()  +  1;  i++)  {	  for(int    i    =    1;    i    <    s.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  s.size();  i  +=  2)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  s.size();  i  +=  2)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  s.size();  i  +=  2)  {	  for(int    i    =    1;    i    <    s.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  FOR(int  i  =  1;  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  1;  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  1;  i  <  s.length();  i++)  {	  for(int    i    =    1;    i    <    s.length()    +    2;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  context.getCurrentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
65	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.getCurrentContext(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.getCurrentContext(outputCharsetEncoder);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.getCurrentContext(outputCharsetEncoder);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.currentContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.currentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  Context  cc  =  Context.createCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.createCurrentContext(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.createCurrentContext(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
69	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length());  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length());	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length()  +  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length()  +  1);	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
71	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length())+  1;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length())+  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length())+  1;	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
72	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length()  *  1);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length()  *  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length()  *  1);	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
73	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length();  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length();	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
74	[BUG]  [BUGGY]  char  quote  =  s.substring(0,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.substring(0,  s.length()  -  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.substring(0,  s.length()  -  1);	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  s.length(1);  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  s.length(1);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  s.length(1);  i++)  {	  for(int    i    =    0;    i    <    s.length(1);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(1)+  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(1)+  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(1)+  1;  i++)  {	  for(int    i    =    0;    i    <    s.length(1);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(1)+  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(1)+  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(1)+  2;  i++)  {	  for(int    i    =    0;    i    <    s.length(1);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(1)-  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(1)-  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(1)-  2;  i++)  {	  for(int    i    =    0;    i    <    s.length(1);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.trim();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.trim();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.trim();	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
80	[BUG]  [BUGGY]  s  =  s.trim()  +  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  s.trim()  +  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  s.trim()  +  1;	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
81	[BUG]  [BUGGY]  s  =  s.toLowerCase();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  s.toLowerCase();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  s.toLowerCase();	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
82	[BUG]  [BUGGY]  s  =  s.substring(0,  singleq);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  s.substring(0,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  s.substring(0,  singleq);	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
83	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  singleq);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  singleq);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
84	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  doubleq);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  doubleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  doubleq);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
85	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.parseDouble(s));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.parseDouble(s));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.parseDouble(s));	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
86	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  singleq  +  1);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  singleq  +  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  singleq  +  1);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
87	[BUG]  [BUGGY]  char  quote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.substring(0,  i);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.substring(0,  i);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
88	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.parseDouble(singleq));  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.parseDouble(singleq));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.parseDouble(singleq));	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
89	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.valueOf(s.length()));  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.valueOf(s.length()));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.valueOf(s.length()));	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  s.length(0);  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  i  <  s.length(0);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  i  <  s.length(0);  i++)  {	  for(int    i    =    0;    i    <    s.length(0);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  quote);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
92	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
93	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
94	[BUG]  [BUGGY]  char  quote  =  jsString(s,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  jsString(s,  outputCharsetEncoder);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  jsString(s,  outputCharsetEncoder);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
95	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  false);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  false);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  false);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
96	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  true);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  true);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  true);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.size();  i  +=  1)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.size();  i  +=  1)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.size();  i  +=  1)  {	  for(int    i    =    0;    i    <    s.size();    i    +=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.size()  +  2;  i  +=  2)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.size()  +  2;  i  +=  2)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.size()  +  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    s.size();    i    +=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.size();  i  -=  2)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.size();  i  -=  2)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.size();  i  -=  2)  {	  for(int    i    =    0;    i    <    s.size();    i    +=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length();  i  +=  2)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length();  i  +=  2)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    s.size();    i    +=    2)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  s.length();  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1,  len  =  s.length();  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1,  len  =  s.length();  i  <  len;  i++)  {	  for(int    i    =    1;    i    <    s.length()    +    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  outputCharsetEncoder.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  outputCharsetEncoder.size();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  outputCharsetEncoder.size();  i++)  {	  for(int    i    =    0;    i    <    s.size()    -    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
103	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.size();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.size();  i++)  {	  for(int    i    =    0;    i    <    s.size()    -    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
104	[BUG]  [BUGGY]  int  singleq  =  s.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.length()  +  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.length()  +  1;	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
105	[BUG]  [BUGGY]  char  singleq  =  s.length();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  singleq  =  s.length();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  singleq  =  s.length();	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
106	[BUG]  [BUGGY]  int  singleq  =  outputCharsetEncoder.length();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  outputCharsetEncoder.length();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  outputCharsetEncoder.length();	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
107	[BUG]  [BUGGY]  int  singleq  =  s.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.length()  -  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.length()  -  1;	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
108	[BUG]  [BUGGY]  int  singleq  =  s.length()  *  2;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.length()  *  2;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.length()  *  2;	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
109	[BUG]  [BUGGY]  doubleq  =  s.length();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  doubleq  =  s.length();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	doubleq  =  s.length();	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  s.charAt(0);  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  2;  i  <  s.charAt(0);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  2;  i  <  s.charAt(0);  i++)  {	  for(int    i    =    1;    i    <    s.charAt(0);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.charAt(1);  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.charAt(1);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.charAt(1);  i++)  {	  for(int    i    =    1;    i    <    s.charAt(0);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  quote);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
113	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
114	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  singleq);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  singleq);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
115	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  0);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  0);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
116	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.encode(outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  s.encode(outputCharsetEncoder);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  s.encode(outputCharsetEncoder);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
117	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  false);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  false);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  false);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
118	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  -  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0;  i  <  s.length()  -  1;  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
119	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0;  i  <  s.length()  +  1;  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
120	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  -  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0;  i  <  s.length()  -  2;  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
121	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  +  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  +  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0;  i  <  s.length()  +  2;  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
122	[BUG]  [BUGGY]  FOR(int  i  =  0,  len  =  s.length();  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0,  len  =  s.length();  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0,  len  =  s.length();  i  <  len;  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
123	[BUG]  [BUGGY]  FOR(int  i  =  2;  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  2;  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  2;  i  <  s.length();  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  s.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  2;  i  <  s.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  2;  i  <  s.length()  +  1;  i++)  {	  for(int    i    =    2;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(4);  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(4);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(4);  i++)  {	  for(int    i    =    0;    i    <    s.length(2);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(3);  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(3);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(3);  i++)  {	  for(int    i    =    0;    i    <    s.length(2);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(6);  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(6);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(6);  i++)  {	  for(int    i    =    0;    i    <    s.length(2);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  outputCharsetEncoder.size();  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  outputCharsetEncoder.size();  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  outputCharsetEncoder.size();  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.size()  +  1;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.size()  +  1;  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.size()  +  1;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  <  len  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  <  len  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.size();  i  <  len  +  1;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  >=  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  >=  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.size();  i  >=  len;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  1,  len  =  s.size();  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1,  len  =  s.size();  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1,  len  =  s.size();  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  s.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  s.length()  +  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  s.length()  +  1;  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  1;  it  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  1;  it  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  1;  it  <  s.length();  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  s.length()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  s.length()  -  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  s.length()  -  1;  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  s.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  s.size();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  s.size();  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  s.length();  i  +=  2)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  s.length();  i  +=  2)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  s.length();  i  +=  2)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
138	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1,  outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i  +  1,  outputCharsetEncoder.charAt(0));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i  +  1,  outputCharsetEncoder.charAt(0));	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
139	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i  +  2);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i  +  2);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
140	[BUG]  [BUGGY]  int  singleq  =  s.indexOf(''',  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.indexOf(''',  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.indexOf(''',  1);	  int    singleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
141	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.POSITIVE_INFINITY);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.POSITIVE_INFINITY);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
142	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.valueOf(s.charAt(i)));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.valueOf(s.charAt(i)));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.valueOf(s.charAt(i)));	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
143	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.valueOf(s.charAt(0)));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.valueOf(s.charAt(0)));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.valueOf(s.charAt(0)));	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
144	[BUG]  [BUGGY]  Context  cc  =  Context.current();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.current();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.current();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
145	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  getCurrentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(2)+  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(2)+  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(2)+  2;  i++)  {	  for(int    i    =    0;    i    <    s.length(2);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length(2)+  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.length(2)+  1;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.length(2)+  1;  i++)  {	  for(int    i    =    0;    i    <    s.length(2);    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
148	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(s);	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
149	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.get(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.get(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.get(s);	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
150	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.jsString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.jsString();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.jsString();	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
151	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.toString()  + "n ";  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.toString()  + "n ";  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.toString()  + "n ";	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
152	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  s.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0;  i  <  s.size();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0;  i  <  s.size();  i++)  {	  for(int    i    =    0;    i    <    s.size()    +    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  outputCharsetEncoder.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  outputCharsetEncoder.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  outputCharsetEncoder.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  str.length();  i  <  s.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  str.length();  i  <  s.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  sep.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  sep.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  sep.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  decoder.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  decoder.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  decoder.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  outputCharsetEncoder.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  outputCharsetEncoder.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  outputCharsetEncoder.length();  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  str.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  str.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  str.length();  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length;  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length;  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length;  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.getLength();  i++)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  s.getLength();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  s.getLength();  i++)  {	  for(int    i    =    0;    i    <    s.size()    -    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
161	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  FOR(int  i  =  0;  i  <  s.length()  *  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	FOR(int  i  =  0;  i  <  s.length()  *  2;  i++)  {	  FOR(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
162	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.charAt(0));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder.charAt(0));	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
163	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder  +  quote);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder  +  quote);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
164	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder)+  quote;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder)+  quote;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder)+  quote;	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
165	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length()));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length()));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length()));	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
166	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
167	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.length()  -  1);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.length()  -  1);	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
168	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.indexOf(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.indexOf(s));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.indexOf(s));	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
169	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.length());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.length());  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.substring(0,  outputCharsetEncoder.length());	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
170	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.charAt(i);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.charAt(i);	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
171	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.getCurrentContextForCodeInsertion(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
172	[BUG]  [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	Context  cc  =  Context.currentTimeMillis();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
173	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  s.charAt(0);  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  For(int  i  =  0;  i  <  s.charAt(0);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	For(int  i  =  0;  i  <  s.charAt(0);  i++)  {	  For(int    i    =    0;    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
174	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.toUpperCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.toUpperCase());  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder.toUpperCase());	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  len;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  len;  ++i)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  len;  ++i)  {	  for(int    i    =    0,    len    =    s.length();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
176	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length()).trim();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  s.length()).trim();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  s.length()).trim();	  String    quote    =    s.substring(0,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
177	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s);	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
178	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  s.getCurrentContext();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  s.getCurrentContext();	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
179	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.getCharset();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  CharsetEncoder  consumer  =  s.getCharset();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	CharsetEncoder  consumer  =  s.getCharset();	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
180	[BUG]  [BUGGY]  int  singleq  =  s.lastIndexOf('');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.lastIndexOf('');  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.lastIndexOf('');	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
181	[BUG]  [BUGGY]  int  singleq  =  s.indexOf('')+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.indexOf('')+  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.indexOf('')+  1;	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
182	[BUG]  [BUGGY]  int  singleq  =  s.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  int  singleq  =  s.lastIndexOf('.');  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	int  singleq  =  s.lastIndexOf('.');	  int    singleq    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
183	[BUG]  [BUGGY]  s  =  s.trim()  +  quote;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  s.trim()  +  quote;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  s.trim()  +  quote;	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  SHORT_SIZE.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  SHORT_SIZE.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  SHORT_SIZE.length();  i++)  {	  for(int    i    =    0;    i    <    outputCharsetEncoder.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  str.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  str.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  str.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  seq.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.length();  i  <  seq.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.length();  i  <  seq.length();  i++)  {	  for(int    i    =    0,    len    =    s.length();    i    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.indexOf('');  i  <  len;  i++)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.indexOf('');  i  <  len;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.indexOf('');  i  <  len;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  <  len;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  <  len;  ++i)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.size();  i  <  len;  ++i)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  <  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0,  len  =  s.size();  i  <  2;  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0,  len  =  s.size();  i  <  2;  i++)  {	  for(int    i    =    0,    len    =    s.size();    i    <    len;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.singleq.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  i  <  this.singleq.length();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  i  <  this.singleq.length();  i++)  {	  for(int    i    =    0;    i    <    str.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
191	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(i)+  1;  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(i)+  1;	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  it  <  s.charAt(0);  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  it  <  s.charAt(0);  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  it  <  s.charAt(0);  i++)  {	  for(int    i    =    0;    it    <    s.length();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  --i  <  s.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  for(int  i  =  0;  --i  <  s.size();  i++)  {  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	for(int  i  =  0;  --i  <  s.size();  i++)  {	  for(int    i    =    0;    i    <    s.size()    +    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  char  quote  =  s.charAt(0,  singleq);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  char  quote  =  s.charAt(0,  singleq);  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	char  quote  =  s.charAt(0,  singleq);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
195	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  Double.parseDouble(s.charAt(0)));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  String  quote  =  s.substring(0,  Double.parseDouble(s.charAt(0)));  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	String  quote  =  s.substring(0,  Double.parseDouble(s.charAt(0)));	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
196	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.toUpperCase();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;        [BUGGY]  s  =  outputCharsetEncoder.toUpperCase();  [BUGGY]      switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	943	943	1	replace	s  =  outputCharsetEncoder.toUpperCase();	  s    =    outputCharsetEncoder.toString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
